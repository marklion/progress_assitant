//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./idl_types');
//HELPER FUNCTIONS AND STRUCTURES

var user_management_get_user_info_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
user_management_get_user_info_args.prototype = {};
user_management_get_user_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_user_info_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_user_info_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_user_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.user_info(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_get_user_info_result.prototype = {};
user_management_get_user_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.user_info();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_user_info_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_user_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_user_login_args = function(args) {
  this.code = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
user_management_user_login_args.prototype = {};
user_management_user_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_user_login_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_user_login_args');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_user_login_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_user_login_result.prototype = {};
user_management_user_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_user_login_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_user_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_update_user_info_args = function(args) {
  this.info = null;
  this.ssid = null;
  this.verify_code = null;
  if (args) {
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.user_info(args.info);
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.verify_code !== undefined && args.verify_code !== null) {
      this.verify_code = args.verify_code;
    }
  }
};
user_management_update_user_info_args.prototype = {};
user_management_update_user_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.user_info();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.verify_code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_update_user_info_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_update_user_info_args');
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 1);
    this.info.write(output);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.verify_code !== null && this.verify_code !== undefined) {
    output.writeFieldBegin('verify_code', Thrift.Type.STRING, 3);
    output.writeString(this.verify_code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_update_user_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_update_user_info_result.prototype = {};
user_management_update_user_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_update_user_info_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_update_user_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_logff_user_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
user_management_logff_user_args.prototype = {};
user_management_logff_user_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_logff_user_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_logff_user_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_logff_user_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_logff_user_result.prototype = {};
user_management_logff_user_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_logff_user_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_logff_user_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_bound_vichele_args = function(args) {
  this.ssid = null;
  this.main_vichele = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.main_vichele !== undefined && args.main_vichele !== null) {
      this.main_vichele = args.main_vichele;
    }
  }
};
user_management_get_bound_vichele_args.prototype = {};
user_management_get_bound_vichele_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.main_vichele = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_bound_vichele_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_bound_vichele_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.main_vichele !== null && this.main_vichele !== undefined) {
    output.writeFieldBegin('main_vichele', Thrift.Type.BOOL, 2);
    output.writeBool(this.main_vichele);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_bound_vichele_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.vichele_info_t]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_get_bound_vichele_result.prototype = {};
user_management_get_bound_vichele_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = new ttypes.vichele_info_t();
          elem18.read(input);
          this.success.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_bound_vichele_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_bound_vichele_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter19 in this.success) {
      if (this.success.hasOwnProperty(iter19)) {
        iter19 = this.success[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_bind_new_vichele_args = function(args) {
  this.ssid = null;
  this.vichele = null;
  this.main_vichele = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.vichele !== undefined && args.vichele !== null) {
      this.vichele = args.vichele;
    }
    if (args.main_vichele !== undefined && args.main_vichele !== null) {
      this.main_vichele = args.main_vichele;
    }
  }
};
user_management_bind_new_vichele_args.prototype = {};
user_management_bind_new_vichele_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vichele = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.main_vichele = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_bind_new_vichele_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_bind_new_vichele_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.vichele !== null && this.vichele !== undefined) {
    output.writeFieldBegin('vichele', Thrift.Type.STRING, 2);
    output.writeString(this.vichele);
    output.writeFieldEnd();
  }
  if (this.main_vichele !== null && this.main_vichele !== undefined) {
    output.writeFieldBegin('main_vichele', Thrift.Type.BOOL, 3);
    output.writeBool(this.main_vichele);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_bind_new_vichele_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_bind_new_vichele_result.prototype = {};
user_management_bind_new_vichele_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_bind_new_vichele_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_bind_new_vichele_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_remove_vichele_args = function(args) {
  this.ssid = null;
  this.id = null;
  this.main_vichele = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.main_vichele !== undefined && args.main_vichele !== null) {
      this.main_vichele = args.main_vichele;
    }
  }
};
user_management_remove_vichele_args.prototype = {};
user_management_remove_vichele_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.main_vichele = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_remove_vichele_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_remove_vichele_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.main_vichele !== null && this.main_vichele !== undefined) {
    output.writeFieldBegin('main_vichele', Thrift.Type.BOOL, 3);
    output.writeBool(this.main_vichele);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_remove_vichele_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_remove_vichele_result.prototype = {};
user_management_remove_vichele_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_remove_vichele_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_remove_vichele_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_update_logo_args = function(args) {
  this.content = null;
  this.ssid = null;
  if (args) {
    if (args.content !== undefined && args.content !== null) {
      this.content = args.content;
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
user_management_update_logo_args.prototype = {};
user_management_update_logo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.content = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_update_logo_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_update_logo_args');
  if (this.content !== null && this.content !== undefined) {
    output.writeFieldBegin('content', Thrift.Type.STRING, 1);
    output.writeString(this.content);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_update_logo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_update_logo_result.prototype = {};
user_management_update_logo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_update_logo_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_update_logo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_customer_info_args = function(args) {
  this.user_id = null;
  if (args) {
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
  }
};
user_management_get_customer_info_args.prototype = {};
user_management_get_customer_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_customer_info_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_customer_info_args');
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 1);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_customer_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_get_customer_info_result.prototype = {};
user_management_get_customer_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_customer_info_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_customer_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_is_admin_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
user_management_is_admin_args.prototype = {};
user_management_is_admin_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_is_admin_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_is_admin_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_is_admin_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_is_admin_result.prototype = {};
user_management_is_admin_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_is_admin_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_is_admin_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_wx_api_signature_args = function(args) {
  this.timestamp = null;
  this.nonceStr = null;
  this.url = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.nonceStr !== undefined && args.nonceStr !== null) {
      this.nonceStr = args.nonceStr;
    }
    if (args.url !== undefined && args.url !== null) {
      this.url = args.url;
    }
  }
};
user_management_get_wx_api_signature_args.prototype = {};
user_management_get_wx_api_signature_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.nonceStr = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_wx_api_signature_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_wx_api_signature_args');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 1);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.nonceStr !== null && this.nonceStr !== undefined) {
    output.writeFieldBegin('nonceStr', Thrift.Type.STRING, 2);
    output.writeString(this.nonceStr);
    output.writeFieldEnd();
  }
  if (this.url !== null && this.url !== undefined) {
    output.writeFieldBegin('url', Thrift.Type.STRING, 3);
    output.writeString(this.url);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_wx_api_signature_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
  }
};
user_management_get_wx_api_signature_result.prototype = {};
user_management_get_wx_api_signature_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_wx_api_signature_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_wx_api_signature_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_bound_driver_info_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
user_management_get_bound_driver_info_args.prototype = {};
user_management_get_bound_driver_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_bound_driver_info_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_bound_driver_info_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_bound_driver_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.driver_info]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_get_bound_driver_info_result.prototype = {};
user_management_get_bound_driver_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp321 = input.readListBegin();
        var _size20 = _rtmp321.size || 0;
        for (var _i22 = 0; _i22 < _size20; ++_i22) {
          var elem23 = null;
          elem23 = new ttypes.driver_info();
          elem23.read(input);
          this.success.push(elem23);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_bound_driver_info_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_bound_driver_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter24 in this.success) {
      if (this.success.hasOwnProperty(iter24)) {
        iter24 = this.success[iter24];
        iter24.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_bind_new_driver_args = function(args) {
  this.ssid = null;
  this.driver = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.driver !== undefined && args.driver !== null) {
      this.driver = new ttypes.driver_info(args.driver);
    }
  }
};
user_management_bind_new_driver_args.prototype = {};
user_management_bind_new_driver_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.driver = new ttypes.driver_info();
        this.driver.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_bind_new_driver_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_bind_new_driver_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.driver !== null && this.driver !== undefined) {
    output.writeFieldBegin('driver', Thrift.Type.STRUCT, 2);
    this.driver.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_bind_new_driver_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_bind_new_driver_result.prototype = {};
user_management_bind_new_driver_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_bind_new_driver_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_bind_new_driver_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_remove_driver_args = function(args) {
  this.ssid = null;
  this.id = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
user_management_remove_driver_args.prototype = {};
user_management_remove_driver_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_remove_driver_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_remove_driver_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_remove_driver_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_remove_driver_result.prototype = {};
user_management_remove_driver_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_remove_driver_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_remove_driver_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_send_sms_verify_args = function(args) {
  this.ssid = null;
  this.phone = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
  }
};
user_management_send_sms_verify_args.prototype = {};
user_management_send_sms_verify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_send_sms_verify_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_send_sms_verify_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 2);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_send_sms_verify_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_send_sms_verify_result.prototype = {};
user_management_send_sms_verify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_send_sms_verify_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_send_sms_verify_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_user_email_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
user_management_get_user_email_args.prototype = {};
user_management_get_user_email_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_user_email_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_user_email_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_get_user_email_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_get_user_email_result.prototype = {};
user_management_get_user_email_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_get_user_email_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_get_user_email_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_has_apply_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
user_management_has_apply_args.prototype = {};
user_management_has_apply_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_has_apply_args.prototype.write = function(output) {
  output.writeStructBegin('user_management_has_apply_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_management_has_apply_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
user_management_has_apply_result.prototype = {};
user_management_has_apply_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_management_has_apply_result.prototype.write = function(output) {
  output.writeStructBegin('user_management_has_apply_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_managementClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
user_managementClient.prototype = {};
user_managementClient.prototype.seqid = function() { return this._seqid; };
user_managementClient.prototype.new_seqid = function() { return this._seqid += 1; };

user_managementClient.prototype.get_user_info = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_user_info(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_user_info(ssid);
  }
};

user_managementClient.prototype.send_get_user_info = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new user_management_get_user_info_args(params);
  try {
    output.writeMessageBegin('get_user_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_get_user_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_get_user_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_user_info failed: unknown result');
};

user_managementClient.prototype.user_login = function(code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_user_login(code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_user_login(code);
  }
};

user_managementClient.prototype.send_user_login = function(code) {
  var output = new this.pClass(this.output);
  var params = {
    code: code
  };
  var args = new user_management_user_login_args(params);
  try {
    output.writeMessageBegin('user_login', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_user_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_user_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('user_login failed: unknown result');
};

user_managementClient.prototype.update_user_info = function(info, ssid, verify_code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_user_info(info, ssid, verify_code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_user_info(info, ssid, verify_code);
  }
};

user_managementClient.prototype.send_update_user_info = function(info, ssid, verify_code) {
  var output = new this.pClass(this.output);
  var params = {
    info: info,
    ssid: ssid,
    verify_code: verify_code
  };
  var args = new user_management_update_user_info_args(params);
  try {
    output.writeMessageBegin('update_user_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_update_user_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_update_user_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_user_info failed: unknown result');
};

user_managementClient.prototype.logff_user = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_logff_user(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_logff_user(ssid);
  }
};

user_managementClient.prototype.send_logff_user = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new user_management_logff_user_args(params);
  try {
    output.writeMessageBegin('logff_user', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_logff_user = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_logff_user_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

user_managementClient.prototype.get_bound_vichele = function(ssid, main_vichele, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_bound_vichele(ssid, main_vichele);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_bound_vichele(ssid, main_vichele);
  }
};

user_managementClient.prototype.send_get_bound_vichele = function(ssid, main_vichele) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    main_vichele: main_vichele
  };
  var args = new user_management_get_bound_vichele_args(params);
  try {
    output.writeMessageBegin('get_bound_vichele', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_get_bound_vichele = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_get_bound_vichele_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_bound_vichele failed: unknown result');
};

user_managementClient.prototype.bind_new_vichele = function(ssid, vichele, main_vichele, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_bind_new_vichele(ssid, vichele, main_vichele);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_bind_new_vichele(ssid, vichele, main_vichele);
  }
};

user_managementClient.prototype.send_bind_new_vichele = function(ssid, vichele, main_vichele) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    vichele: vichele,
    main_vichele: main_vichele
  };
  var args = new user_management_bind_new_vichele_args(params);
  try {
    output.writeMessageBegin('bind_new_vichele', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_bind_new_vichele = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_bind_new_vichele_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('bind_new_vichele failed: unknown result');
};

user_managementClient.prototype.remove_vichele = function(ssid, id, main_vichele, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove_vichele(ssid, id, main_vichele);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove_vichele(ssid, id, main_vichele);
  }
};

user_managementClient.prototype.send_remove_vichele = function(ssid, id, main_vichele) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    id: id,
    main_vichele: main_vichele
  };
  var args = new user_management_remove_vichele_args(params);
  try {
    output.writeMessageBegin('remove_vichele', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_remove_vichele = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_remove_vichele_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

user_managementClient.prototype.update_logo = function(content, ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_logo(content, ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_logo(content, ssid);
  }
};

user_managementClient.prototype.send_update_logo = function(content, ssid) {
  var output = new this.pClass(this.output);
  var params = {
    content: content,
    ssid: ssid
  };
  var args = new user_management_update_logo_args(params);
  try {
    output.writeMessageBegin('update_logo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_update_logo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_update_logo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_logo failed: unknown result');
};

user_managementClient.prototype.get_customer_info = function(user_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_customer_info(user_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_customer_info(user_id);
  }
};

user_managementClient.prototype.send_get_customer_info = function(user_id) {
  var output = new this.pClass(this.output);
  var params = {
    user_id: user_id
  };
  var args = new user_management_get_customer_info_args(params);
  try {
    output.writeMessageBegin('get_customer_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_get_customer_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_get_customer_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_customer_info failed: unknown result');
};

user_managementClient.prototype.is_admin = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_is_admin(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_is_admin(ssid);
  }
};

user_managementClient.prototype.send_is_admin = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new user_management_is_admin_args(params);
  try {
    output.writeMessageBegin('is_admin', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_is_admin = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_is_admin_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('is_admin failed: unknown result');
};

user_managementClient.prototype.get_wx_api_signature = function(timestamp, nonceStr, url, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_wx_api_signature(timestamp, nonceStr, url);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_wx_api_signature(timestamp, nonceStr, url);
  }
};

user_managementClient.prototype.send_get_wx_api_signature = function(timestamp, nonceStr, url) {
  var output = new this.pClass(this.output);
  var params = {
    timestamp: timestamp,
    nonceStr: nonceStr,
    url: url
  };
  var args = new user_management_get_wx_api_signature_args(params);
  try {
    output.writeMessageBegin('get_wx_api_signature', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_get_wx_api_signature = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_get_wx_api_signature_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_wx_api_signature failed: unknown result');
};

user_managementClient.prototype.get_bound_driver_info = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_bound_driver_info(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_bound_driver_info(ssid);
  }
};

user_managementClient.prototype.send_get_bound_driver_info = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new user_management_get_bound_driver_info_args(params);
  try {
    output.writeMessageBegin('get_bound_driver_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_get_bound_driver_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_get_bound_driver_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_bound_driver_info failed: unknown result');
};

user_managementClient.prototype.bind_new_driver = function(ssid, driver, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_bind_new_driver(ssid, driver);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_bind_new_driver(ssid, driver);
  }
};

user_managementClient.prototype.send_bind_new_driver = function(ssid, driver) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    driver: driver
  };
  var args = new user_management_bind_new_driver_args(params);
  try {
    output.writeMessageBegin('bind_new_driver', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_bind_new_driver = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_bind_new_driver_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('bind_new_driver failed: unknown result');
};

user_managementClient.prototype.remove_driver = function(ssid, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove_driver(ssid, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove_driver(ssid, id);
  }
};

user_managementClient.prototype.send_remove_driver = function(ssid, id) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    id: id
  };
  var args = new user_management_remove_driver_args(params);
  try {
    output.writeMessageBegin('remove_driver', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_remove_driver = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_remove_driver_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

user_managementClient.prototype.send_sms_verify = function(ssid, phone, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_send_sms_verify(ssid, phone);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_send_sms_verify(ssid, phone);
  }
};

user_managementClient.prototype.send_send_sms_verify = function(ssid, phone) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    phone: phone
  };
  var args = new user_management_send_sms_verify_args(params);
  try {
    output.writeMessageBegin('send_sms_verify', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_send_sms_verify = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_send_sms_verify_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('send_sms_verify failed: unknown result');
};

user_managementClient.prototype.get_user_email = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_user_email(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_user_email(ssid);
  }
};

user_managementClient.prototype.send_get_user_email = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new user_management_get_user_email_args(params);
  try {
    output.writeMessageBegin('get_user_email', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_get_user_email = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_get_user_email_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_user_email failed: unknown result');
};

user_managementClient.prototype.has_apply = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_has_apply(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_has_apply(ssid);
  }
};

user_managementClient.prototype.send_has_apply = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new user_management_has_apply_args(params);
  try {
    output.writeMessageBegin('has_apply', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

user_managementClient.prototype.recv_has_apply = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new user_management_has_apply_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('has_apply failed: unknown result');
};
var user_managementProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
user_managementProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
user_managementProcessor.prototype.process_get_user_info = function(seqid, input, output) {
  var args = new user_management_get_user_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_user_info.length === 1) {
    Q.fcall(this._handler.get_user_info.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new user_management_get_user_info_result({success: result});
      output.writeMessageBegin("get_user_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_get_user_info_result(err);
        output.writeMessageBegin("get_user_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_user_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_user_info(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_get_user_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_user_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_user_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_user_login = function(seqid, input, output) {
  var args = new user_management_user_login_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.user_login.length === 1) {
    Q.fcall(this._handler.user_login.bind(this._handler),
      args.code
    ).then(function(result) {
      var result_obj = new user_management_user_login_result({success: result});
      output.writeMessageBegin("user_login", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_user_login_result(err);
        output.writeMessageBegin("user_login", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("user_login", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.user_login(args.code, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_user_login_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("user_login", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("user_login", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_update_user_info = function(seqid, input, output) {
  var args = new user_management_update_user_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_user_info.length === 3) {
    Q.fcall(this._handler.update_user_info.bind(this._handler),
      args.info,
      args.ssid,
      args.verify_code
    ).then(function(result) {
      var result_obj = new user_management_update_user_info_result({success: result});
      output.writeMessageBegin("update_user_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_update_user_info_result(err);
        output.writeMessageBegin("update_user_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_user_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.update_user_info(args.info, args.ssid, args.verify_code, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_update_user_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_user_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_user_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_logff_user = function(seqid, input, output) {
  var args = new user_management_logff_user_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.logff_user.length === 1) {
    Q.fcall(this._handler.logff_user.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new user_management_logff_user_result({success: result});
      output.writeMessageBegin("logff_user", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_logff_user_result(err);
        output.writeMessageBegin("logff_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logff_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.logff_user(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_logff_user_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("logff_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("logff_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_get_bound_vichele = function(seqid, input, output) {
  var args = new user_management_get_bound_vichele_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_bound_vichele.length === 2) {
    Q.fcall(this._handler.get_bound_vichele.bind(this._handler),
      args.ssid,
      args.main_vichele
    ).then(function(result) {
      var result_obj = new user_management_get_bound_vichele_result({success: result});
      output.writeMessageBegin("get_bound_vichele", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_get_bound_vichele_result(err);
        output.writeMessageBegin("get_bound_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_bound_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_bound_vichele(args.ssid, args.main_vichele, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_get_bound_vichele_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_bound_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_bound_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_bind_new_vichele = function(seqid, input, output) {
  var args = new user_management_bind_new_vichele_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.bind_new_vichele.length === 3) {
    Q.fcall(this._handler.bind_new_vichele.bind(this._handler),
      args.ssid,
      args.vichele,
      args.main_vichele
    ).then(function(result) {
      var result_obj = new user_management_bind_new_vichele_result({success: result});
      output.writeMessageBegin("bind_new_vichele", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_bind_new_vichele_result(err);
        output.writeMessageBegin("bind_new_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("bind_new_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.bind_new_vichele(args.ssid, args.vichele, args.main_vichele, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_bind_new_vichele_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("bind_new_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("bind_new_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_remove_vichele = function(seqid, input, output) {
  var args = new user_management_remove_vichele_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove_vichele.length === 3) {
    Q.fcall(this._handler.remove_vichele.bind(this._handler),
      args.ssid,
      args.id,
      args.main_vichele
    ).then(function(result) {
      var result_obj = new user_management_remove_vichele_result({success: result});
      output.writeMessageBegin("remove_vichele", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_remove_vichele_result(err);
        output.writeMessageBegin("remove_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.remove_vichele(args.ssid, args.id, args.main_vichele, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_remove_vichele_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("remove_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_update_logo = function(seqid, input, output) {
  var args = new user_management_update_logo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_logo.length === 2) {
    Q.fcall(this._handler.update_logo.bind(this._handler),
      args.content,
      args.ssid
    ).then(function(result) {
      var result_obj = new user_management_update_logo_result({success: result});
      output.writeMessageBegin("update_logo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_update_logo_result(err);
        output.writeMessageBegin("update_logo", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_logo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.update_logo(args.content, args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_update_logo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_logo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_logo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_get_customer_info = function(seqid, input, output) {
  var args = new user_management_get_customer_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_customer_info.length === 1) {
    Q.fcall(this._handler.get_customer_info.bind(this._handler),
      args.user_id
    ).then(function(result) {
      var result_obj = new user_management_get_customer_info_result({success: result});
      output.writeMessageBegin("get_customer_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_get_customer_info_result(err);
        output.writeMessageBegin("get_customer_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_customer_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_customer_info(args.user_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_get_customer_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_customer_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_customer_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_is_admin = function(seqid, input, output) {
  var args = new user_management_is_admin_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.is_admin.length === 1) {
    Q.fcall(this._handler.is_admin.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new user_management_is_admin_result({success: result});
      output.writeMessageBegin("is_admin", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_is_admin_result(err);
        output.writeMessageBegin("is_admin", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("is_admin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.is_admin(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_is_admin_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("is_admin", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("is_admin", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_get_wx_api_signature = function(seqid, input, output) {
  var args = new user_management_get_wx_api_signature_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_wx_api_signature.length === 3) {
    Q.fcall(this._handler.get_wx_api_signature.bind(this._handler),
      args.timestamp,
      args.nonceStr,
      args.url
    ).then(function(result) {
      var result_obj = new user_management_get_wx_api_signature_result({success: result});
      output.writeMessageBegin("get_wx_api_signature", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
      output.writeMessageBegin("get_wx_api_signature", Thrift.MessageType.EXCEPTION, seqid);
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_wx_api_signature(args.timestamp, args.nonceStr, args.url, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined')) {
        result_obj = new user_management_get_wx_api_signature_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_wx_api_signature", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_wx_api_signature", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_get_bound_driver_info = function(seqid, input, output) {
  var args = new user_management_get_bound_driver_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_bound_driver_info.length === 1) {
    Q.fcall(this._handler.get_bound_driver_info.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new user_management_get_bound_driver_info_result({success: result});
      output.writeMessageBegin("get_bound_driver_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_get_bound_driver_info_result(err);
        output.writeMessageBegin("get_bound_driver_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_bound_driver_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_bound_driver_info(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_get_bound_driver_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_bound_driver_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_bound_driver_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_bind_new_driver = function(seqid, input, output) {
  var args = new user_management_bind_new_driver_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.bind_new_driver.length === 2) {
    Q.fcall(this._handler.bind_new_driver.bind(this._handler),
      args.ssid,
      args.driver
    ).then(function(result) {
      var result_obj = new user_management_bind_new_driver_result({success: result});
      output.writeMessageBegin("bind_new_driver", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_bind_new_driver_result(err);
        output.writeMessageBegin("bind_new_driver", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("bind_new_driver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.bind_new_driver(args.ssid, args.driver, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_bind_new_driver_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("bind_new_driver", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("bind_new_driver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_remove_driver = function(seqid, input, output) {
  var args = new user_management_remove_driver_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove_driver.length === 2) {
    Q.fcall(this._handler.remove_driver.bind(this._handler),
      args.ssid,
      args.id
    ).then(function(result) {
      var result_obj = new user_management_remove_driver_result({success: result});
      output.writeMessageBegin("remove_driver", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_remove_driver_result(err);
        output.writeMessageBegin("remove_driver", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_driver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.remove_driver(args.ssid, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_remove_driver_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("remove_driver", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_driver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_send_sms_verify = function(seqid, input, output) {
  var args = new user_management_send_sms_verify_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.send_sms_verify.length === 2) {
    Q.fcall(this._handler.send_sms_verify.bind(this._handler),
      args.ssid,
      args.phone
    ).then(function(result) {
      var result_obj = new user_management_send_sms_verify_result({success: result});
      output.writeMessageBegin("send_sms_verify", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_send_sms_verify_result(err);
        output.writeMessageBegin("send_sms_verify", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("send_sms_verify", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.send_sms_verify(args.ssid, args.phone, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_send_sms_verify_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("send_sms_verify", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("send_sms_verify", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_get_user_email = function(seqid, input, output) {
  var args = new user_management_get_user_email_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_user_email.length === 1) {
    Q.fcall(this._handler.get_user_email.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new user_management_get_user_email_result({success: result});
      output.writeMessageBegin("get_user_email", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_get_user_email_result(err);
        output.writeMessageBegin("get_user_email", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_user_email", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_user_email(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_get_user_email_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_user_email", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_user_email", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
user_managementProcessor.prototype.process_has_apply = function(seqid, input, output) {
  var args = new user_management_has_apply_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.has_apply.length === 1) {
    Q.fcall(this._handler.has_apply.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new user_management_has_apply_result({success: result});
      output.writeMessageBegin("has_apply", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new user_management_has_apply_result(err);
        output.writeMessageBegin("has_apply", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("has_apply", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.has_apply(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new user_management_has_apply_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("has_apply", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("has_apply", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
