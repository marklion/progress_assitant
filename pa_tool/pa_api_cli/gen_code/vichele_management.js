//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./idl_types');
//HELPER FUNCTIONS AND STRUCTURES

var vichele_management_create_vichele_info_args = function(args) {
  this.open_id = null;
  this.vichele_info = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.vichele_info !== undefined && args.vichele_info !== null) {
      this.vichele_info = Thrift.copyList(args.vichele_info, [ttypes.vichele_stay_alone]);
    }
  }
};
vichele_management_create_vichele_info_args.prototype = {};
vichele_management_create_vichele_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vichele_info = [];
        var _rtmp3176 = input.readListBegin();
        var _size175 = _rtmp3176.size || 0;
        for (var _i177 = 0; _i177 < _size175; ++_i177) {
          var elem178 = null;
          elem178 = new ttypes.vichele_stay_alone();
          elem178.read(input);
          this.vichele_info.push(elem178);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_create_vichele_info_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_create_vichele_info_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.vichele_info !== null && this.vichele_info !== undefined) {
    output.writeFieldBegin('vichele_info', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.vichele_info.length);
    for (var iter179 in this.vichele_info) {
      if (this.vichele_info.hasOwnProperty(iter179)) {
        iter179 = this.vichele_info[iter179];
        iter179.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_create_vichele_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_create_vichele_info_result.prototype = {};
vichele_management_create_vichele_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_create_vichele_info_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_create_vichele_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_delete_vichele_info_args = function(args) {
  this.open_id = null;
  this.vichele_id = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.vichele_id !== undefined && args.vichele_id !== null) {
      this.vichele_id = args.vichele_id;
    }
  }
};
vichele_management_delete_vichele_info_args.prototype = {};
vichele_management_delete_vichele_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.vichele_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_delete_vichele_info_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_delete_vichele_info_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.vichele_id !== null && this.vichele_id !== undefined) {
    output.writeFieldBegin('vichele_id', Thrift.Type.I64, 2);
    output.writeI64(this.vichele_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_delete_vichele_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_delete_vichele_info_result.prototype = {};
vichele_management_delete_vichele_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_delete_vichele_info_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_delete_vichele_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_update_vichele_info_args = function(args) {
  this.open_id = null;
  this.vichele_info = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.vichele_info !== undefined && args.vichele_info !== null) {
      this.vichele_info = new ttypes.vichele_stay_alone(args.vichele_info);
    }
  }
};
vichele_management_update_vichele_info_args.prototype = {};
vichele_management_update_vichele_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.vichele_info = new ttypes.vichele_stay_alone();
        this.vichele_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_update_vichele_info_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_update_vichele_info_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.vichele_info !== null && this.vichele_info !== undefined) {
    output.writeFieldBegin('vichele_info', Thrift.Type.STRUCT, 2);
    this.vichele_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_update_vichele_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_update_vichele_info_result.prototype = {};
vichele_management_update_vichele_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_update_vichele_info_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_update_vichele_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_created_vichele_info_args = function(args) {
  this.open_id = null;
  this.ancher = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.ancher !== undefined && args.ancher !== null) {
      this.ancher = args.ancher;
    }
  }
};
vichele_management_get_created_vichele_info_args.prototype = {};
vichele_management_get_created_vichele_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.ancher = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_created_vichele_info_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_created_vichele_info_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.ancher !== null && this.ancher !== undefined) {
    output.writeFieldBegin('ancher', Thrift.Type.I64, 2);
    output.writeI64(this.ancher);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_created_vichele_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.vichele_stay_alone]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_created_vichele_info_result.prototype = {};
vichele_management_get_created_vichele_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3181 = input.readListBegin();
        var _size180 = _rtmp3181.size || 0;
        for (var _i182 = 0; _i182 < _size180; ++_i182) {
          var elem183 = null;
          elem183 = new ttypes.vichele_stay_alone();
          elem183.read(input);
          this.success.push(elem183);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_created_vichele_info_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_created_vichele_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter184 in this.success) {
      if (this.success.hasOwnProperty(iter184)) {
        iter184 = this.success[iter184];
        iter184.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_silent_login_args = function(args) {
  this.code = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
vichele_management_silent_login_args.prototype = {};
vichele_management_silent_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_silent_login_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_silent_login_args');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 1);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_silent_login_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_silent_login_result.prototype = {};
vichele_management_silent_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_silent_login_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_silent_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_verify_login_args = function(args) {
  this.open_id = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
  }
};
vichele_management_verify_login_args.prototype = {};
vichele_management_verify_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_verify_login_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_verify_login_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_verify_login_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_verify_login_result.prototype = {};
vichele_management_verify_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_verify_login_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_verify_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_silent_user_info_args = function(args) {
  this.open_id = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
  }
};
vichele_management_get_silent_user_info_args.prototype = {};
vichele_management_get_silent_user_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_silent_user_info_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_silent_user_info_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_silent_user_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.silent_user_info(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_silent_user_info_result.prototype = {};
vichele_management_get_silent_user_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.silent_user_info();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_silent_user_info_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_silent_user_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_set_silent_user_info_args = function(args) {
  this.open_id = null;
  this.info = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = new ttypes.silent_user_info(args.info);
    }
  }
};
vichele_management_set_silent_user_info_args.prototype = {};
vichele_management_set_silent_user_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.info = new ttypes.silent_user_info();
        this.info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_set_silent_user_info_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_set_silent_user_info_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.STRUCT, 2);
    this.info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_set_silent_user_info_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_set_silent_user_info_result.prototype = {};
vichele_management_set_silent_user_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_set_silent_user_info_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_set_silent_user_info_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_input_history_args = function(args) {
  this.open_id = null;
  this.search_key = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.search_key !== undefined && args.search_key !== null) {
      this.search_key = new ttypes.vichele_stay_alone(args.search_key);
    }
  }
};
vichele_management_get_input_history_args.prototype = {};
vichele_management_get_input_history_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.search_key = new ttypes.vichele_stay_alone();
        this.search_key.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_input_history_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_input_history_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.search_key !== null && this.search_key !== undefined) {
    output.writeFieldBegin('search_key', Thrift.Type.STRUCT, 2);
    this.search_key.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_input_history_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_input_history_result.prototype = {};
vichele_management_get_input_history_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3186 = input.readListBegin();
        var _size185 = _rtmp3186.size || 0;
        for (var _i187 = 0; _i187 < _size185; ++_i187) {
          var elem188 = null;
          elem188 = input.readString();
          this.success.push(elem188);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_input_history_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_input_history_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter189 in this.success) {
      if (this.success.hasOwnProperty(iter189)) {
        iter189 = this.success[iter189];
        output.writeString(iter189);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_company_vichele_info_args = function(args) {
  this.ssid = null;
  this.anchor = null;
  this.status = null;
  this.enter_date = null;
  this.stuff_name = null;
  this.supplier_name = null;
  this.vichele_number = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.anchor !== undefined && args.anchor !== null) {
      this.anchor = args.anchor;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.enter_date !== undefined && args.enter_date !== null) {
      this.enter_date = args.enter_date;
    }
    if (args.stuff_name !== undefined && args.stuff_name !== null) {
      this.stuff_name = args.stuff_name;
    }
    if (args.supplier_name !== undefined && args.supplier_name !== null) {
      this.supplier_name = args.supplier_name;
    }
    if (args.vichele_number !== undefined && args.vichele_number !== null) {
      this.vichele_number = args.vichele_number;
    }
  }
};
vichele_management_get_company_vichele_info_args.prototype = {};
vichele_management_get_company_vichele_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.anchor = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.status = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.enter_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.stuff_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.supplier_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.vichele_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_company_vichele_info_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_company_vichele_info_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.anchor !== null && this.anchor !== undefined) {
    output.writeFieldBegin('anchor', Thrift.Type.I64, 2);
    output.writeI64(this.anchor);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I64, 3);
    output.writeI64(this.status);
    output.writeFieldEnd();
  }
  if (this.enter_date !== null && this.enter_date !== undefined) {
    output.writeFieldBegin('enter_date', Thrift.Type.STRING, 4);
    output.writeString(this.enter_date);
    output.writeFieldEnd();
  }
  if (this.stuff_name !== null && this.stuff_name !== undefined) {
    output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 5);
    output.writeString(this.stuff_name);
    output.writeFieldEnd();
  }
  if (this.supplier_name !== null && this.supplier_name !== undefined) {
    output.writeFieldBegin('supplier_name', Thrift.Type.STRING, 6);
    output.writeString(this.supplier_name);
    output.writeFieldEnd();
  }
  if (this.vichele_number !== null && this.vichele_number !== undefined) {
    output.writeFieldBegin('vichele_number', Thrift.Type.STRING, 7);
    output.writeString(this.vichele_number);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_company_vichele_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.vichele_stay_alone]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_company_vichele_info_result.prototype = {};
vichele_management_get_company_vichele_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3191 = input.readListBegin();
        var _size190 = _rtmp3191.size || 0;
        for (var _i192 = 0; _i192 < _size190; ++_i192) {
          var elem193 = null;
          elem193 = new ttypes.vichele_stay_alone();
          elem193.read(input);
          this.success.push(elem193);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_company_vichele_info_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_company_vichele_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter194 in this.success) {
      if (this.success.hasOwnProperty(iter194)) {
        iter194 = this.success[iter194];
        iter194.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_confirm_vichele_args = function(args) {
  this.ssid = null;
  this.info = null;
  this.company_for_select = null;
  this.all_select = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = Thrift.copyList(args.info, [ttypes.vichele_stay_alone]);
    }
    if (args.company_for_select !== undefined && args.company_for_select !== null) {
      this.company_for_select = Thrift.copyList(args.company_for_select, [null]);
    }
    if (args.all_select !== undefined && args.all_select !== null) {
      this.all_select = args.all_select;
    }
  }
};
vichele_management_confirm_vichele_args.prototype = {};
vichele_management_confirm_vichele_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.info = [];
        var _rtmp3196 = input.readListBegin();
        var _size195 = _rtmp3196.size || 0;
        for (var _i197 = 0; _i197 < _size195; ++_i197) {
          var elem198 = null;
          elem198 = new ttypes.vichele_stay_alone();
          elem198.read(input);
          this.info.push(elem198);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.company_for_select = [];
        var _rtmp3200 = input.readListBegin();
        var _size199 = _rtmp3200.size || 0;
        for (var _i201 = 0; _i201 < _size199; ++_i201) {
          var elem202 = null;
          elem202 = input.readString();
          this.company_for_select.push(elem202);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BOOL) {
        this.all_select = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_confirm_vichele_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_confirm_vichele_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.info.length);
    for (var iter203 in this.info) {
      if (this.info.hasOwnProperty(iter203)) {
        iter203 = this.info[iter203];
        iter203.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.company_for_select !== null && this.company_for_select !== undefined) {
    output.writeFieldBegin('company_for_select', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.company_for_select.length);
    for (var iter204 in this.company_for_select) {
      if (this.company_for_select.hasOwnProperty(iter204)) {
        iter204 = this.company_for_select[iter204];
        output.writeString(iter204);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.all_select !== null && this.all_select !== undefined) {
    output.writeFieldBegin('all_select', Thrift.Type.BOOL, 4);
    output.writeBool(this.all_select);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_confirm_vichele_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_confirm_vichele_result.prototype = {};
vichele_management_confirm_vichele_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_confirm_vichele_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_confirm_vichele_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_cancel_vichele_args = function(args) {
  this.ssid = null;
  this.info = null;
  this.all_select = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.info !== undefined && args.info !== null) {
      this.info = Thrift.copyList(args.info, [ttypes.vichele_stay_alone]);
    }
    if (args.all_select !== undefined && args.all_select !== null) {
      this.all_select = args.all_select;
    }
  }
};
vichele_management_cancel_vichele_args.prototype = {};
vichele_management_cancel_vichele_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.info = [];
        var _rtmp3206 = input.readListBegin();
        var _size205 = _rtmp3206.size || 0;
        for (var _i207 = 0; _i207 < _size205; ++_i207) {
          var elem208 = null;
          elem208 = new ttypes.vichele_stay_alone();
          elem208.read(input);
          this.info.push(elem208);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.all_select = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_cancel_vichele_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_cancel_vichele_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.info !== null && this.info !== undefined) {
    output.writeFieldBegin('info', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.info.length);
    for (var iter209 in this.info) {
      if (this.info.hasOwnProperty(iter209)) {
        iter209 = this.info[iter209];
        iter209.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.all_select !== null && this.all_select !== undefined) {
    output.writeFieldBegin('all_select', Thrift.Type.BOOL, 3);
    output.writeBool(this.all_select);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_cancel_vichele_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_cancel_vichele_result.prototype = {};
vichele_management_cancel_vichele_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_cancel_vichele_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_cancel_vichele_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_create_vichele_team_args = function(args) {
  this.open_id = null;
  this.team_info = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.team_info !== undefined && args.team_info !== null) {
      this.team_info = new ttypes.vichele_team(args.team_info);
    }
  }
};
vichele_management_create_vichele_team_args.prototype = {};
vichele_management_create_vichele_team_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.team_info = new ttypes.vichele_team();
        this.team_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_create_vichele_team_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_create_vichele_team_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.team_info !== null && this.team_info !== undefined) {
    output.writeFieldBegin('team_info', Thrift.Type.STRUCT, 2);
    this.team_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_create_vichele_team_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_create_vichele_team_result.prototype = {};
vichele_management_create_vichele_team_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_create_vichele_team_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_create_vichele_team_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_update_vichele_team_args = function(args) {
  this.open_id = null;
  this.team_info = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.team_info !== undefined && args.team_info !== null) {
      this.team_info = new ttypes.vichele_team(args.team_info);
    }
  }
};
vichele_management_update_vichele_team_args.prototype = {};
vichele_management_update_vichele_team_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.team_info = new ttypes.vichele_team();
        this.team_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_update_vichele_team_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_update_vichele_team_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.team_info !== null && this.team_info !== undefined) {
    output.writeFieldBegin('team_info', Thrift.Type.STRUCT, 2);
    this.team_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_update_vichele_team_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_update_vichele_team_result.prototype = {};
vichele_management_update_vichele_team_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_update_vichele_team_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_update_vichele_team_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_del_vichele_team_args = function(args) {
  this.open_id = null;
  this.team_id = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.team_id !== undefined && args.team_id !== null) {
      this.team_id = args.team_id;
    }
  }
};
vichele_management_del_vichele_team_args.prototype = {};
vichele_management_del_vichele_team_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.team_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_del_vichele_team_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_del_vichele_team_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.team_id !== null && this.team_id !== undefined) {
    output.writeFieldBegin('team_id', Thrift.Type.I64, 2);
    output.writeI64(this.team_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_del_vichele_team_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_del_vichele_team_result.prototype = {};
vichele_management_del_vichele_team_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_del_vichele_team_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_del_vichele_team_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_all_vichele_team_args = function(args) {
  this.open_id = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
  }
};
vichele_management_get_all_vichele_team_args.prototype = {};
vichele_management_get_all_vichele_team_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_all_vichele_team_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_all_vichele_team_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_all_vichele_team_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.vichele_team]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_all_vichele_team_result.prototype = {};
vichele_management_get_all_vichele_team_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3211 = input.readListBegin();
        var _size210 = _rtmp3211.size || 0;
        for (var _i212 = 0; _i212 < _size210; ++_i212) {
          var elem213 = null;
          elem213 = new ttypes.vichele_team();
          elem213.read(input);
          this.success.push(elem213);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_all_vichele_team_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_all_vichele_team_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter214 in this.success) {
      if (this.success.hasOwnProperty(iter214)) {
        iter214 = this.success[iter214];
        iter214.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_vichele_team_args = function(args) {
  this.open_id = null;
  this.team_id = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.team_id !== undefined && args.team_id !== null) {
      this.team_id = args.team_id;
    }
  }
};
vichele_management_get_vichele_team_args.prototype = {};
vichele_management_get_vichele_team_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.team_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_vichele_team_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_vichele_team_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.team_id !== null && this.team_id !== undefined) {
    output.writeFieldBegin('team_id', Thrift.Type.I64, 2);
    output.writeI64(this.team_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_vichele_team_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.vichele_team(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_vichele_team_result.prototype = {};
vichele_management_get_vichele_team_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.vichele_team();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_vichele_team_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_vichele_team_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_change_company_name_args = function(args) {
  this.ssid = null;
  this.vichele_id = null;
  this.company_name = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.vichele_id !== undefined && args.vichele_id !== null) {
      this.vichele_id = args.vichele_id;
    }
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
  }
};
vichele_management_change_company_name_args.prototype = {};
vichele_management_change_company_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.vichele_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_change_company_name_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_change_company_name_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.vichele_id !== null && this.vichele_id !== undefined) {
    output.writeFieldBegin('vichele_id', Thrift.Type.I64, 2);
    output.writeI64(this.vichele_id);
    output.writeFieldEnd();
  }
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 3);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_change_company_name_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_change_company_name_result.prototype = {};
vichele_management_change_company_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_change_company_name_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_change_company_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_fill_company_name_args = function(args) {
  this.open_id = null;
  this.vichele_id = null;
  this.company_name = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.vichele_id !== undefined && args.vichele_id !== null) {
      this.vichele_id = args.vichele_id;
    }
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
  }
};
vichele_management_fill_company_name_args.prototype = {};
vichele_management_fill_company_name_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.vichele_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_fill_company_name_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_fill_company_name_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.vichele_id !== null && this.vichele_id !== undefined) {
    output.writeFieldBegin('vichele_id', Thrift.Type.I64, 2);
    output.writeI64(this.vichele_id);
    output.writeFieldEnd();
  }
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 3);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_fill_company_name_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_fill_company_name_result.prototype = {};
vichele_management_fill_company_name_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_fill_company_name_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_fill_company_name_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_company_history_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
vichele_management_company_history_args.prototype = {};
vichele_management_company_history_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_company_history_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_company_history_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_company_history_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_company_history_result.prototype = {};
vichele_management_company_history_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3216 = input.readListBegin();
        var _size215 = _rtmp3216.size || 0;
        for (var _i217 = 0; _i217 < _size215; ++_i217) {
          var elem218 = null;
          elem218 = input.readString();
          this.success.push(elem218);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_company_history_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_company_history_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter219 in this.success) {
      if (this.success.hasOwnProperty(iter219)) {
        iter219 = this.success[iter219];
        output.writeString(iter219);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_add_supplier_args = function(args) {
  this.ssid = null;
  this.supplier_info = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.supplier_info !== undefined && args.supplier_info !== null) {
      this.supplier_info = new ttypes.supplier_basic_info(args.supplier_info);
    }
  }
};
vichele_management_add_supplier_args.prototype = {};
vichele_management_add_supplier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.supplier_info = new ttypes.supplier_basic_info();
        this.supplier_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_add_supplier_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_add_supplier_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.supplier_info !== null && this.supplier_info !== undefined) {
    output.writeFieldBegin('supplier_info', Thrift.Type.STRUCT, 2);
    this.supplier_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_add_supplier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_add_supplier_result.prototype = {};
vichele_management_add_supplier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_add_supplier_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_add_supplier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_update_supplier_args = function(args) {
  this.ssid = null;
  this.supplier_info = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.supplier_info !== undefined && args.supplier_info !== null) {
      this.supplier_info = new ttypes.supplier_basic_info(args.supplier_info);
    }
  }
};
vichele_management_update_supplier_args.prototype = {};
vichele_management_update_supplier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.supplier_info = new ttypes.supplier_basic_info();
        this.supplier_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_update_supplier_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_update_supplier_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.supplier_info !== null && this.supplier_info !== undefined) {
    output.writeFieldBegin('supplier_info', Thrift.Type.STRUCT, 2);
    this.supplier_info.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_update_supplier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_update_supplier_result.prototype = {};
vichele_management_update_supplier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_update_supplier_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_update_supplier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_del_supplier_args = function(args) {
  this.ssid = null;
  this.supplier_id = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.supplier_id !== undefined && args.supplier_id !== null) {
      this.supplier_id = args.supplier_id;
    }
  }
};
vichele_management_del_supplier_args.prototype = {};
vichele_management_del_supplier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.supplier_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_del_supplier_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_del_supplier_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.supplier_id !== null && this.supplier_id !== undefined) {
    output.writeFieldBegin('supplier_id', Thrift.Type.I64, 2);
    output.writeI64(this.supplier_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_del_supplier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_del_supplier_result.prototype = {};
vichele_management_del_supplier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_del_supplier_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_del_supplier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_all_supplier_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
vichele_management_get_all_supplier_args.prototype = {};
vichele_management_get_all_supplier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_all_supplier_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_all_supplier_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_all_supplier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.supplier_basic_info]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_all_supplier_result.prototype = {};
vichele_management_get_all_supplier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3221 = input.readListBegin();
        var _size220 = _rtmp3221.size || 0;
        for (var _i222 = 0; _i222 < _size220; ++_i222) {
          var elem223 = null;
          elem223 = new ttypes.supplier_basic_info();
          elem223.read(input);
          this.success.push(elem223);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_all_supplier_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_all_supplier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter224 in this.success) {
      if (this.success.hasOwnProperty(iter224)) {
        iter224 = this.success[iter224];
        iter224.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_smart_assign_args = function(args) {
  this.ssid = null;
  this.vichele_info = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.vichele_info !== undefined && args.vichele_info !== null) {
      this.vichele_info = Thrift.copyList(args.vichele_info, [ttypes.vichele_stay_alone]);
    }
  }
};
vichele_management_smart_assign_args.prototype = {};
vichele_management_smart_assign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.vichele_info = [];
        var _rtmp3226 = input.readListBegin();
        var _size225 = _rtmp3226.size || 0;
        for (var _i227 = 0; _i227 < _size225; ++_i227) {
          var elem228 = null;
          elem228 = new ttypes.vichele_stay_alone();
          elem228.read(input);
          this.vichele_info.push(elem228);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_smart_assign_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_smart_assign_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.vichele_info !== null && this.vichele_info !== undefined) {
    output.writeFieldBegin('vichele_info', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.vichele_info.length);
    for (var iter229 in this.vichele_info) {
      if (this.vichele_info.hasOwnProperty(iter229)) {
        iter229 = this.vichele_info[iter229];
        iter229.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_smart_assign_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_smart_assign_result.prototype = {};
vichele_management_smart_assign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_smart_assign_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_smart_assign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_max_vichele_by_supplier_args = function(args) {
  this.supplier = null;
  this.company = null;
  if (args) {
    if (args.supplier !== undefined && args.supplier !== null) {
      this.supplier = args.supplier;
    }
    if (args.company !== undefined && args.company !== null) {
      this.company = args.company;
    }
  }
};
vichele_management_get_max_vichele_by_supplier_args.prototype = {};
vichele_management_get_max_vichele_by_supplier_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.supplier = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_max_vichele_by_supplier_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_max_vichele_by_supplier_args');
  if (this.supplier !== null && this.supplier !== undefined) {
    output.writeFieldBegin('supplier', Thrift.Type.STRING, 1);
    output.writeString(this.supplier);
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 2);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_max_vichele_by_supplier_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_max_vichele_by_supplier_result.prototype = {};
vichele_management_get_max_vichele_by_supplier_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_max_vichele_by_supplier_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_max_vichele_by_supplier_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_fill_tmd_args = function(args) {
  this.open_id = null;
  this.vichele_id = null;
  this.tmd_no = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.vichele_id !== undefined && args.vichele_id !== null) {
      this.vichele_id = args.vichele_id;
    }
    if (args.tmd_no !== undefined && args.tmd_no !== null) {
      this.tmd_no = args.tmd_no;
    }
  }
};
vichele_management_fill_tmd_args.prototype = {};
vichele_management_fill_tmd_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.vichele_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.tmd_no = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_fill_tmd_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_fill_tmd_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.vichele_id !== null && this.vichele_id !== undefined) {
    output.writeFieldBegin('vichele_id', Thrift.Type.I64, 2);
    output.writeI64(this.vichele_id);
    output.writeFieldEnd();
  }
  if (this.tmd_no !== null && this.tmd_no !== undefined) {
    output.writeFieldBegin('tmd_no', Thrift.Type.STRING, 3);
    output.writeString(this.tmd_no);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_fill_tmd_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_fill_tmd_result.prototype = {};
vichele_management_fill_tmd_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_fill_tmd_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_fill_tmd_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_fill_enter_weight_args = function(args) {
  this.open_id = null;
  this.vichele_id = null;
  this.enter_weight = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.vichele_id !== undefined && args.vichele_id !== null) {
      this.vichele_id = args.vichele_id;
    }
    if (args.enter_weight !== undefined && args.enter_weight !== null) {
      this.enter_weight = args.enter_weight;
    }
  }
};
vichele_management_fill_enter_weight_args.prototype = {};
vichele_management_fill_enter_weight_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.vichele_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.enter_weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_fill_enter_weight_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_fill_enter_weight_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.vichele_id !== null && this.vichele_id !== undefined) {
    output.writeFieldBegin('vichele_id', Thrift.Type.I64, 2);
    output.writeI64(this.vichele_id);
    output.writeFieldEnd();
  }
  if (this.enter_weight !== null && this.enter_weight !== undefined) {
    output.writeFieldBegin('enter_weight', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.enter_weight);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_fill_enter_weight_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_fill_enter_weight_result.prototype = {};
vichele_management_fill_enter_weight_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_fill_enter_weight_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_fill_enter_weight_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_fill_weight_attach_args = function(args) {
  this.open_id = null;
  this.vichele_id = null;
  this.weight_attach = null;
  if (args) {
    if (args.open_id !== undefined && args.open_id !== null) {
      this.open_id = args.open_id;
    }
    if (args.vichele_id !== undefined && args.vichele_id !== null) {
      this.vichele_id = args.vichele_id;
    }
    if (args.weight_attach !== undefined && args.weight_attach !== null) {
      this.weight_attach = args.weight_attach;
    }
  }
};
vichele_management_fill_weight_attach_args.prototype = {};
vichele_management_fill_weight_attach_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.open_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.vichele_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.weight_attach = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_fill_weight_attach_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_fill_weight_attach_args');
  if (this.open_id !== null && this.open_id !== undefined) {
    output.writeFieldBegin('open_id', Thrift.Type.STRING, 1);
    output.writeString(this.open_id);
    output.writeFieldEnd();
  }
  if (this.vichele_id !== null && this.vichele_id !== undefined) {
    output.writeFieldBegin('vichele_id', Thrift.Type.I64, 2);
    output.writeI64(this.vichele_id);
    output.writeFieldEnd();
  }
  if (this.weight_attach !== null && this.weight_attach !== undefined) {
    output.writeFieldBegin('weight_attach', Thrift.Type.STRING, 3);
    output.writeString(this.weight_attach);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_fill_weight_attach_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_fill_weight_attach_result.prototype = {};
vichele_management_fill_weight_attach_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_fill_weight_attach_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_fill_weight_attach_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_add_exception_args = function(args) {
  this.ssid = null;
  this.stuff_name = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.stuff_name !== undefined && args.stuff_name !== null) {
      this.stuff_name = args.stuff_name;
    }
  }
};
vichele_management_add_exception_args.prototype = {};
vichele_management_add_exception_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stuff_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_add_exception_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_add_exception_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.stuff_name !== null && this.stuff_name !== undefined) {
    output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 2);
    output.writeString(this.stuff_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_add_exception_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_add_exception_result.prototype = {};
vichele_management_add_exception_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_add_exception_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_add_exception_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_del_exception_args = function(args) {
  this.ssid = null;
  this.stuff_name = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.stuff_name !== undefined && args.stuff_name !== null) {
      this.stuff_name = args.stuff_name;
    }
  }
};
vichele_management_del_exception_args.prototype = {};
vichele_management_del_exception_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stuff_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_del_exception_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_del_exception_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.stuff_name !== null && this.stuff_name !== undefined) {
    output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 2);
    output.writeString(this.stuff_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_del_exception_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_del_exception_result.prototype = {};
vichele_management_del_exception_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_del_exception_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_del_exception_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_all_exceptions_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
vichele_management_get_all_exceptions_args.prototype = {};
vichele_management_get_all_exceptions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_all_exceptions_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_all_exceptions_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_all_exceptions_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_all_exceptions_result.prototype = {};
vichele_management_get_all_exceptions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3231 = input.readListBegin();
        var _size230 = _rtmp3231.size || 0;
        for (var _i232 = 0; _i232 < _size230; ++_i232) {
          var elem233 = null;
          elem233 = input.readString();
          this.success.push(elem233);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_all_exceptions_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_all_exceptions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter234 in this.success) {
      if (this.success.hasOwnProperty(iter234)) {
        iter234 = this.success[iter234];
        output.writeString(iter234);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_company_brief_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
vichele_management_get_company_brief_args.prototype = {};
vichele_management_get_company_brief_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_company_brief_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_company_brief_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_company_brief_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.single_vichele_brief(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_company_brief_result.prototype = {};
vichele_management_get_company_brief_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.single_vichele_brief();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_company_brief_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_company_brief_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_statistics_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
vichele_management_get_statistics_args.prototype = {};
vichele_management_get_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_statistics_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_management_get_statistics_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.vichele_stay_alone_statistics(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
vichele_management_get_statistics_result.prototype = {};
vichele_management_get_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.vichele_stay_alone_statistics();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_management_get_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_management_get_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_managementClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
vichele_managementClient.prototype = {};
vichele_managementClient.prototype.seqid = function() { return this._seqid; };
vichele_managementClient.prototype.new_seqid = function() { return this._seqid += 1; };

vichele_managementClient.prototype.create_vichele_info = function(open_id, vichele_info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_vichele_info(open_id, vichele_info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_vichele_info(open_id, vichele_info);
  }
};

vichele_managementClient.prototype.send_create_vichele_info = function(open_id, vichele_info) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    vichele_info: vichele_info
  };
  var args = new vichele_management_create_vichele_info_args(params);
  try {
    output.writeMessageBegin('create_vichele_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_create_vichele_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_create_vichele_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_vichele_info failed: unknown result');
};

vichele_managementClient.prototype.delete_vichele_info = function(open_id, vichele_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_delete_vichele_info(open_id, vichele_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_delete_vichele_info(open_id, vichele_id);
  }
};

vichele_managementClient.prototype.send_delete_vichele_info = function(open_id, vichele_id) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    vichele_id: vichele_id
  };
  var args = new vichele_management_delete_vichele_info_args(params);
  try {
    output.writeMessageBegin('delete_vichele_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_delete_vichele_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_delete_vichele_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('delete_vichele_info failed: unknown result');
};

vichele_managementClient.prototype.update_vichele_info = function(open_id, vichele_info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_vichele_info(open_id, vichele_info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_vichele_info(open_id, vichele_info);
  }
};

vichele_managementClient.prototype.send_update_vichele_info = function(open_id, vichele_info) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    vichele_info: vichele_info
  };
  var args = new vichele_management_update_vichele_info_args(params);
  try {
    output.writeMessageBegin('update_vichele_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_update_vichele_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_update_vichele_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_vichele_info failed: unknown result');
};

vichele_managementClient.prototype.get_created_vichele_info = function(open_id, ancher, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_created_vichele_info(open_id, ancher);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_created_vichele_info(open_id, ancher);
  }
};

vichele_managementClient.prototype.send_get_created_vichele_info = function(open_id, ancher) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    ancher: ancher
  };
  var args = new vichele_management_get_created_vichele_info_args(params);
  try {
    output.writeMessageBegin('get_created_vichele_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_created_vichele_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_created_vichele_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_created_vichele_info failed: unknown result');
};

vichele_managementClient.prototype.silent_login = function(code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_silent_login(code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_silent_login(code);
  }
};

vichele_managementClient.prototype.send_silent_login = function(code) {
  var output = new this.pClass(this.output);
  var params = {
    code: code
  };
  var args = new vichele_management_silent_login_args(params);
  try {
    output.writeMessageBegin('silent_login', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_silent_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_silent_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('silent_login failed: unknown result');
};

vichele_managementClient.prototype.verify_login = function(open_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verify_login(open_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verify_login(open_id);
  }
};

vichele_managementClient.prototype.send_verify_login = function(open_id) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id
  };
  var args = new vichele_management_verify_login_args(params);
  try {
    output.writeMessageBegin('verify_login', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_verify_login = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_verify_login_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verify_login failed: unknown result');
};

vichele_managementClient.prototype.get_silent_user_info = function(open_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_silent_user_info(open_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_silent_user_info(open_id);
  }
};

vichele_managementClient.prototype.send_get_silent_user_info = function(open_id) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id
  };
  var args = new vichele_management_get_silent_user_info_args(params);
  try {
    output.writeMessageBegin('get_silent_user_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_silent_user_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_silent_user_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_silent_user_info failed: unknown result');
};

vichele_managementClient.prototype.set_silent_user_info = function(open_id, info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_silent_user_info(open_id, info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_silent_user_info(open_id, info);
  }
};

vichele_managementClient.prototype.send_set_silent_user_info = function(open_id, info) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    info: info
  };
  var args = new vichele_management_set_silent_user_info_args(params);
  try {
    output.writeMessageBegin('set_silent_user_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_set_silent_user_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_set_silent_user_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

vichele_managementClient.prototype.get_input_history = function(open_id, search_key, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_input_history(open_id, search_key);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_input_history(open_id, search_key);
  }
};

vichele_managementClient.prototype.send_get_input_history = function(open_id, search_key) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    search_key: search_key
  };
  var args = new vichele_management_get_input_history_args(params);
  try {
    output.writeMessageBegin('get_input_history', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_input_history = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_input_history_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_input_history failed: unknown result');
};

vichele_managementClient.prototype.get_company_vichele_info = function(ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_company_vichele_info(ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_company_vichele_info(ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number);
  }
};

vichele_managementClient.prototype.send_get_company_vichele_info = function(ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    anchor: anchor,
    status: status,
    enter_date: enter_date,
    stuff_name: stuff_name,
    supplier_name: supplier_name,
    vichele_number: vichele_number
  };
  var args = new vichele_management_get_company_vichele_info_args(params);
  try {
    output.writeMessageBegin('get_company_vichele_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_company_vichele_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_company_vichele_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_company_vichele_info failed: unknown result');
};

vichele_managementClient.prototype.confirm_vichele = function(ssid, info, company_for_select, all_select, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_confirm_vichele(ssid, info, company_for_select, all_select);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_confirm_vichele(ssid, info, company_for_select, all_select);
  }
};

vichele_managementClient.prototype.send_confirm_vichele = function(ssid, info, company_for_select, all_select) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    info: info,
    company_for_select: company_for_select,
    all_select: all_select
  };
  var args = new vichele_management_confirm_vichele_args(params);
  try {
    output.writeMessageBegin('confirm_vichele', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_confirm_vichele = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_confirm_vichele_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('confirm_vichele failed: unknown result');
};

vichele_managementClient.prototype.cancel_vichele = function(ssid, info, all_select, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_vichele(ssid, info, all_select);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_vichele(ssid, info, all_select);
  }
};

vichele_managementClient.prototype.send_cancel_vichele = function(ssid, info, all_select) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    info: info,
    all_select: all_select
  };
  var args = new vichele_management_cancel_vichele_args(params);
  try {
    output.writeMessageBegin('cancel_vichele', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_cancel_vichele = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_cancel_vichele_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cancel_vichele failed: unknown result');
};

vichele_managementClient.prototype.create_vichele_team = function(open_id, team_info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_vichele_team(open_id, team_info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_vichele_team(open_id, team_info);
  }
};

vichele_managementClient.prototype.send_create_vichele_team = function(open_id, team_info) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    team_info: team_info
  };
  var args = new vichele_management_create_vichele_team_args(params);
  try {
    output.writeMessageBegin('create_vichele_team', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_create_vichele_team = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_create_vichele_team_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_vichele_team failed: unknown result');
};

vichele_managementClient.prototype.update_vichele_team = function(open_id, team_info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_vichele_team(open_id, team_info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_vichele_team(open_id, team_info);
  }
};

vichele_managementClient.prototype.send_update_vichele_team = function(open_id, team_info) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    team_info: team_info
  };
  var args = new vichele_management_update_vichele_team_args(params);
  try {
    output.writeMessageBegin('update_vichele_team', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_update_vichele_team = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_update_vichele_team_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_vichele_team failed: unknown result');
};

vichele_managementClient.prototype.del_vichele_team = function(open_id, team_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_del_vichele_team(open_id, team_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_del_vichele_team(open_id, team_id);
  }
};

vichele_managementClient.prototype.send_del_vichele_team = function(open_id, team_id) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    team_id: team_id
  };
  var args = new vichele_management_del_vichele_team_args(params);
  try {
    output.writeMessageBegin('del_vichele_team', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_del_vichele_team = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_del_vichele_team_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('del_vichele_team failed: unknown result');
};

vichele_managementClient.prototype.get_all_vichele_team = function(open_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_vichele_team(open_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_vichele_team(open_id);
  }
};

vichele_managementClient.prototype.send_get_all_vichele_team = function(open_id) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id
  };
  var args = new vichele_management_get_all_vichele_team_args(params);
  try {
    output.writeMessageBegin('get_all_vichele_team', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_all_vichele_team = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_all_vichele_team_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_vichele_team failed: unknown result');
};

vichele_managementClient.prototype.get_vichele_team = function(open_id, team_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_vichele_team(open_id, team_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_vichele_team(open_id, team_id);
  }
};

vichele_managementClient.prototype.send_get_vichele_team = function(open_id, team_id) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    team_id: team_id
  };
  var args = new vichele_management_get_vichele_team_args(params);
  try {
    output.writeMessageBegin('get_vichele_team', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_vichele_team = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_vichele_team_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_vichele_team failed: unknown result');
};

vichele_managementClient.prototype.change_company_name = function(ssid, vichele_id, company_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_change_company_name(ssid, vichele_id, company_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_change_company_name(ssid, vichele_id, company_name);
  }
};

vichele_managementClient.prototype.send_change_company_name = function(ssid, vichele_id, company_name) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    vichele_id: vichele_id,
    company_name: company_name
  };
  var args = new vichele_management_change_company_name_args(params);
  try {
    output.writeMessageBegin('change_company_name', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_change_company_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_change_company_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('change_company_name failed: unknown result');
};

vichele_managementClient.prototype.fill_company_name = function(open_id, vichele_id, company_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fill_company_name(open_id, vichele_id, company_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fill_company_name(open_id, vichele_id, company_name);
  }
};

vichele_managementClient.prototype.send_fill_company_name = function(open_id, vichele_id, company_name) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    vichele_id: vichele_id,
    company_name: company_name
  };
  var args = new vichele_management_fill_company_name_args(params);
  try {
    output.writeMessageBegin('fill_company_name', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_fill_company_name = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_fill_company_name_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fill_company_name failed: unknown result');
};

vichele_managementClient.prototype.company_history = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_company_history(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_company_history(ssid);
  }
};

vichele_managementClient.prototype.send_company_history = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new vichele_management_company_history_args(params);
  try {
    output.writeMessageBegin('company_history', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_company_history = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_company_history_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('company_history failed: unknown result');
};

vichele_managementClient.prototype.add_supplier = function(ssid, supplier_info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_supplier(ssid, supplier_info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_supplier(ssid, supplier_info);
  }
};

vichele_managementClient.prototype.send_add_supplier = function(ssid, supplier_info) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    supplier_info: supplier_info
  };
  var args = new vichele_management_add_supplier_args(params);
  try {
    output.writeMessageBegin('add_supplier', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_add_supplier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_add_supplier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_supplier failed: unknown result');
};

vichele_managementClient.prototype.update_supplier = function(ssid, supplier_info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_supplier(ssid, supplier_info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_supplier(ssid, supplier_info);
  }
};

vichele_managementClient.prototype.send_update_supplier = function(ssid, supplier_info) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    supplier_info: supplier_info
  };
  var args = new vichele_management_update_supplier_args(params);
  try {
    output.writeMessageBegin('update_supplier', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_update_supplier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_update_supplier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_supplier failed: unknown result');
};

vichele_managementClient.prototype.del_supplier = function(ssid, supplier_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_del_supplier(ssid, supplier_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_del_supplier(ssid, supplier_id);
  }
};

vichele_managementClient.prototype.send_del_supplier = function(ssid, supplier_id) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    supplier_id: supplier_id
  };
  var args = new vichele_management_del_supplier_args(params);
  try {
    output.writeMessageBegin('del_supplier', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_del_supplier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_del_supplier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('del_supplier failed: unknown result');
};

vichele_managementClient.prototype.get_all_supplier = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_supplier(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_supplier(ssid);
  }
};

vichele_managementClient.prototype.send_get_all_supplier = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new vichele_management_get_all_supplier_args(params);
  try {
    output.writeMessageBegin('get_all_supplier', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_all_supplier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_all_supplier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_supplier failed: unknown result');
};

vichele_managementClient.prototype.smart_assign = function(ssid, vichele_info, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_smart_assign(ssid, vichele_info);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_smart_assign(ssid, vichele_info);
  }
};

vichele_managementClient.prototype.send_smart_assign = function(ssid, vichele_info) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    vichele_info: vichele_info
  };
  var args = new vichele_management_smart_assign_args(params);
  try {
    output.writeMessageBegin('smart_assign', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_smart_assign = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_smart_assign_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('smart_assign failed: unknown result');
};

vichele_managementClient.prototype.get_max_vichele_by_supplier = function(supplier, company, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_max_vichele_by_supplier(supplier, company);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_max_vichele_by_supplier(supplier, company);
  }
};

vichele_managementClient.prototype.send_get_max_vichele_by_supplier = function(supplier, company) {
  var output = new this.pClass(this.output);
  var params = {
    supplier: supplier,
    company: company
  };
  var args = new vichele_management_get_max_vichele_by_supplier_args(params);
  try {
    output.writeMessageBegin('get_max_vichele_by_supplier', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_max_vichele_by_supplier = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_max_vichele_by_supplier_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_max_vichele_by_supplier failed: unknown result');
};

vichele_managementClient.prototype.fill_tmd = function(open_id, vichele_id, tmd_no, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fill_tmd(open_id, vichele_id, tmd_no);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fill_tmd(open_id, vichele_id, tmd_no);
  }
};

vichele_managementClient.prototype.send_fill_tmd = function(open_id, vichele_id, tmd_no) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    vichele_id: vichele_id,
    tmd_no: tmd_no
  };
  var args = new vichele_management_fill_tmd_args(params);
  try {
    output.writeMessageBegin('fill_tmd', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_fill_tmd = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_fill_tmd_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fill_tmd failed: unknown result');
};

vichele_managementClient.prototype.fill_enter_weight = function(open_id, vichele_id, enter_weight, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fill_enter_weight(open_id, vichele_id, enter_weight);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fill_enter_weight(open_id, vichele_id, enter_weight);
  }
};

vichele_managementClient.prototype.send_fill_enter_weight = function(open_id, vichele_id, enter_weight) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    vichele_id: vichele_id,
    enter_weight: enter_weight
  };
  var args = new vichele_management_fill_enter_weight_args(params);
  try {
    output.writeMessageBegin('fill_enter_weight', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_fill_enter_weight = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_fill_enter_weight_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fill_enter_weight failed: unknown result');
};

vichele_managementClient.prototype.fill_weight_attach = function(open_id, vichele_id, weight_attach, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_fill_weight_attach(open_id, vichele_id, weight_attach);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_fill_weight_attach(open_id, vichele_id, weight_attach);
  }
};

vichele_managementClient.prototype.send_fill_weight_attach = function(open_id, vichele_id, weight_attach) {
  var output = new this.pClass(this.output);
  var params = {
    open_id: open_id,
    vichele_id: vichele_id,
    weight_attach: weight_attach
  };
  var args = new vichele_management_fill_weight_attach_args(params);
  try {
    output.writeMessageBegin('fill_weight_attach', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_fill_weight_attach = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_fill_weight_attach_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('fill_weight_attach failed: unknown result');
};

vichele_managementClient.prototype.add_exception = function(ssid, stuff_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_exception(ssid, stuff_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_exception(ssid, stuff_name);
  }
};

vichele_managementClient.prototype.send_add_exception = function(ssid, stuff_name) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    stuff_name: stuff_name
  };
  var args = new vichele_management_add_exception_args(params);
  try {
    output.writeMessageBegin('add_exception', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_add_exception = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_add_exception_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_exception failed: unknown result');
};

vichele_managementClient.prototype.del_exception = function(ssid, stuff_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_del_exception(ssid, stuff_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_del_exception(ssid, stuff_name);
  }
};

vichele_managementClient.prototype.send_del_exception = function(ssid, stuff_name) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    stuff_name: stuff_name
  };
  var args = new vichele_management_del_exception_args(params);
  try {
    output.writeMessageBegin('del_exception', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_del_exception = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_del_exception_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('del_exception failed: unknown result');
};

vichele_managementClient.prototype.get_all_exceptions = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_exceptions(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_exceptions(ssid);
  }
};

vichele_managementClient.prototype.send_get_all_exceptions = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new vichele_management_get_all_exceptions_args(params);
  try {
    output.writeMessageBegin('get_all_exceptions', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_all_exceptions = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_all_exceptions_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_exceptions failed: unknown result');
};

vichele_managementClient.prototype.get_company_brief = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_company_brief(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_company_brief(ssid);
  }
};

vichele_managementClient.prototype.send_get_company_brief = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new vichele_management_get_company_brief_args(params);
  try {
    output.writeMessageBegin('get_company_brief', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_company_brief = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_company_brief_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_company_brief failed: unknown result');
};

vichele_managementClient.prototype.get_statistics = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_statistics(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_statistics(ssid);
  }
};

vichele_managementClient.prototype.send_get_statistics = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new vichele_management_get_statistics_args(params);
  try {
    output.writeMessageBegin('get_statistics', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

vichele_managementClient.prototype.recv_get_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new vichele_management_get_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_statistics failed: unknown result');
};
var vichele_managementProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
vichele_managementProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
vichele_managementProcessor.prototype.process_create_vichele_info = function(seqid, input, output) {
  var args = new vichele_management_create_vichele_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_vichele_info.length === 2) {
    Q.fcall(this._handler.create_vichele_info.bind(this._handler),
      args.open_id,
      args.vichele_info
    ).then(function(result) {
      var result_obj = new vichele_management_create_vichele_info_result({success: result});
      output.writeMessageBegin("create_vichele_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_create_vichele_info_result(err);
        output.writeMessageBegin("create_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_vichele_info(args.open_id, args.vichele_info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_create_vichele_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_delete_vichele_info = function(seqid, input, output) {
  var args = new vichele_management_delete_vichele_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.delete_vichele_info.length === 2) {
    Q.fcall(this._handler.delete_vichele_info.bind(this._handler),
      args.open_id,
      args.vichele_id
    ).then(function(result) {
      var result_obj = new vichele_management_delete_vichele_info_result({success: result});
      output.writeMessageBegin("delete_vichele_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_delete_vichele_info_result(err);
        output.writeMessageBegin("delete_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.delete_vichele_info(args.open_id, args.vichele_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_delete_vichele_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("delete_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("delete_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_update_vichele_info = function(seqid, input, output) {
  var args = new vichele_management_update_vichele_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_vichele_info.length === 2) {
    Q.fcall(this._handler.update_vichele_info.bind(this._handler),
      args.open_id,
      args.vichele_info
    ).then(function(result) {
      var result_obj = new vichele_management_update_vichele_info_result({success: result});
      output.writeMessageBegin("update_vichele_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_update_vichele_info_result(err);
        output.writeMessageBegin("update_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.update_vichele_info(args.open_id, args.vichele_info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_update_vichele_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_created_vichele_info = function(seqid, input, output) {
  var args = new vichele_management_get_created_vichele_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_created_vichele_info.length === 2) {
    Q.fcall(this._handler.get_created_vichele_info.bind(this._handler),
      args.open_id,
      args.ancher
    ).then(function(result) {
      var result_obj = new vichele_management_get_created_vichele_info_result({success: result});
      output.writeMessageBegin("get_created_vichele_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_created_vichele_info_result(err);
        output.writeMessageBegin("get_created_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_created_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_created_vichele_info(args.open_id, args.ancher, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_created_vichele_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_created_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_created_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_silent_login = function(seqid, input, output) {
  var args = new vichele_management_silent_login_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.silent_login.length === 1) {
    Q.fcall(this._handler.silent_login.bind(this._handler),
      args.code
    ).then(function(result) {
      var result_obj = new vichele_management_silent_login_result({success: result});
      output.writeMessageBegin("silent_login", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_silent_login_result(err);
        output.writeMessageBegin("silent_login", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("silent_login", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.silent_login(args.code, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_silent_login_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("silent_login", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("silent_login", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_verify_login = function(seqid, input, output) {
  var args = new vichele_management_verify_login_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verify_login.length === 1) {
    Q.fcall(this._handler.verify_login.bind(this._handler),
      args.open_id
    ).then(function(result) {
      var result_obj = new vichele_management_verify_login_result({success: result});
      output.writeMessageBegin("verify_login", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_verify_login_result(err);
        output.writeMessageBegin("verify_login", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verify_login", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.verify_login(args.open_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_verify_login_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verify_login", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verify_login", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_silent_user_info = function(seqid, input, output) {
  var args = new vichele_management_get_silent_user_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_silent_user_info.length === 1) {
    Q.fcall(this._handler.get_silent_user_info.bind(this._handler),
      args.open_id
    ).then(function(result) {
      var result_obj = new vichele_management_get_silent_user_info_result({success: result});
      output.writeMessageBegin("get_silent_user_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_silent_user_info_result(err);
        output.writeMessageBegin("get_silent_user_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_silent_user_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_silent_user_info(args.open_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_silent_user_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_silent_user_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_silent_user_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_set_silent_user_info = function(seqid, input, output) {
  var args = new vichele_management_set_silent_user_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_silent_user_info.length === 2) {
    Q.fcall(this._handler.set_silent_user_info.bind(this._handler),
      args.open_id,
      args.info
    ).then(function(result) {
      var result_obj = new vichele_management_set_silent_user_info_result({success: result});
      output.writeMessageBegin("set_silent_user_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_set_silent_user_info_result(err);
        output.writeMessageBegin("set_silent_user_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_silent_user_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_silent_user_info(args.open_id, args.info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_set_silent_user_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_silent_user_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_silent_user_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_input_history = function(seqid, input, output) {
  var args = new vichele_management_get_input_history_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_input_history.length === 2) {
    Q.fcall(this._handler.get_input_history.bind(this._handler),
      args.open_id,
      args.search_key
    ).then(function(result) {
      var result_obj = new vichele_management_get_input_history_result({success: result});
      output.writeMessageBegin("get_input_history", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_input_history_result(err);
        output.writeMessageBegin("get_input_history", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_input_history", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_input_history(args.open_id, args.search_key, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_input_history_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_input_history", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_input_history", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_company_vichele_info = function(seqid, input, output) {
  var args = new vichele_management_get_company_vichele_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_company_vichele_info.length === 7) {
    Q.fcall(this._handler.get_company_vichele_info.bind(this._handler),
      args.ssid,
      args.anchor,
      args.status,
      args.enter_date,
      args.stuff_name,
      args.supplier_name,
      args.vichele_number
    ).then(function(result) {
      var result_obj = new vichele_management_get_company_vichele_info_result({success: result});
      output.writeMessageBegin("get_company_vichele_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_company_vichele_info_result(err);
        output.writeMessageBegin("get_company_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_company_vichele_info(args.ssid, args.anchor, args.status, args.enter_date, args.stuff_name, args.supplier_name, args.vichele_number, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_company_vichele_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_company_vichele_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_vichele_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_confirm_vichele = function(seqid, input, output) {
  var args = new vichele_management_confirm_vichele_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.confirm_vichele.length === 4) {
    Q.fcall(this._handler.confirm_vichele.bind(this._handler),
      args.ssid,
      args.info,
      args.company_for_select,
      args.all_select
    ).then(function(result) {
      var result_obj = new vichele_management_confirm_vichele_result({success: result});
      output.writeMessageBegin("confirm_vichele", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_confirm_vichele_result(err);
        output.writeMessageBegin("confirm_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirm_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.confirm_vichele(args.ssid, args.info, args.company_for_select, args.all_select, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_confirm_vichele_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("confirm_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirm_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_cancel_vichele = function(seqid, input, output) {
  var args = new vichele_management_cancel_vichele_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_vichele.length === 3) {
    Q.fcall(this._handler.cancel_vichele.bind(this._handler),
      args.ssid,
      args.info,
      args.all_select
    ).then(function(result) {
      var result_obj = new vichele_management_cancel_vichele_result({success: result});
      output.writeMessageBegin("cancel_vichele", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_cancel_vichele_result(err);
        output.writeMessageBegin("cancel_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.cancel_vichele(args.ssid, args.info, args.all_select, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_cancel_vichele_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancel_vichele", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_vichele", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_create_vichele_team = function(seqid, input, output) {
  var args = new vichele_management_create_vichele_team_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_vichele_team.length === 2) {
    Q.fcall(this._handler.create_vichele_team.bind(this._handler),
      args.open_id,
      args.team_info
    ).then(function(result) {
      var result_obj = new vichele_management_create_vichele_team_result({success: result});
      output.writeMessageBegin("create_vichele_team", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_create_vichele_team_result(err);
        output.writeMessageBegin("create_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_vichele_team(args.open_id, args.team_info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_create_vichele_team_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_update_vichele_team = function(seqid, input, output) {
  var args = new vichele_management_update_vichele_team_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_vichele_team.length === 2) {
    Q.fcall(this._handler.update_vichele_team.bind(this._handler),
      args.open_id,
      args.team_info
    ).then(function(result) {
      var result_obj = new vichele_management_update_vichele_team_result({success: result});
      output.writeMessageBegin("update_vichele_team", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_update_vichele_team_result(err);
        output.writeMessageBegin("update_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.update_vichele_team(args.open_id, args.team_info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_update_vichele_team_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_del_vichele_team = function(seqid, input, output) {
  var args = new vichele_management_del_vichele_team_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.del_vichele_team.length === 2) {
    Q.fcall(this._handler.del_vichele_team.bind(this._handler),
      args.open_id,
      args.team_id
    ).then(function(result) {
      var result_obj = new vichele_management_del_vichele_team_result({success: result});
      output.writeMessageBegin("del_vichele_team", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_del_vichele_team_result(err);
        output.writeMessageBegin("del_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.del_vichele_team(args.open_id, args.team_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_del_vichele_team_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("del_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_all_vichele_team = function(seqid, input, output) {
  var args = new vichele_management_get_all_vichele_team_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_vichele_team.length === 1) {
    Q.fcall(this._handler.get_all_vichele_team.bind(this._handler),
      args.open_id
    ).then(function(result) {
      var result_obj = new vichele_management_get_all_vichele_team_result({success: result});
      output.writeMessageBegin("get_all_vichele_team", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_all_vichele_team_result(err);
        output.writeMessageBegin("get_all_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_vichele_team(args.open_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_all_vichele_team_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_vichele_team = function(seqid, input, output) {
  var args = new vichele_management_get_vichele_team_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_vichele_team.length === 2) {
    Q.fcall(this._handler.get_vichele_team.bind(this._handler),
      args.open_id,
      args.team_id
    ).then(function(result) {
      var result_obj = new vichele_management_get_vichele_team_result({success: result});
      output.writeMessageBegin("get_vichele_team", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_vichele_team_result(err);
        output.writeMessageBegin("get_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_vichele_team(args.open_id, args.team_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_vichele_team_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_vichele_team", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_vichele_team", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_change_company_name = function(seqid, input, output) {
  var args = new vichele_management_change_company_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.change_company_name.length === 3) {
    Q.fcall(this._handler.change_company_name.bind(this._handler),
      args.ssid,
      args.vichele_id,
      args.company_name
    ).then(function(result) {
      var result_obj = new vichele_management_change_company_name_result({success: result});
      output.writeMessageBegin("change_company_name", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_change_company_name_result(err);
        output.writeMessageBegin("change_company_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("change_company_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.change_company_name(args.ssid, args.vichele_id, args.company_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_change_company_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("change_company_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("change_company_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_fill_company_name = function(seqid, input, output) {
  var args = new vichele_management_fill_company_name_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fill_company_name.length === 3) {
    Q.fcall(this._handler.fill_company_name.bind(this._handler),
      args.open_id,
      args.vichele_id,
      args.company_name
    ).then(function(result) {
      var result_obj = new vichele_management_fill_company_name_result({success: result});
      output.writeMessageBegin("fill_company_name", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_fill_company_name_result(err);
        output.writeMessageBegin("fill_company_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fill_company_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.fill_company_name(args.open_id, args.vichele_id, args.company_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_fill_company_name_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("fill_company_name", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fill_company_name", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_company_history = function(seqid, input, output) {
  var args = new vichele_management_company_history_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.company_history.length === 1) {
    Q.fcall(this._handler.company_history.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new vichele_management_company_history_result({success: result});
      output.writeMessageBegin("company_history", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_company_history_result(err);
        output.writeMessageBegin("company_history", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("company_history", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.company_history(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_company_history_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("company_history", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("company_history", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_add_supplier = function(seqid, input, output) {
  var args = new vichele_management_add_supplier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_supplier.length === 2) {
    Q.fcall(this._handler.add_supplier.bind(this._handler),
      args.ssid,
      args.supplier_info
    ).then(function(result) {
      var result_obj = new vichele_management_add_supplier_result({success: result});
      output.writeMessageBegin("add_supplier", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_add_supplier_result(err);
        output.writeMessageBegin("add_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.add_supplier(args.ssid, args.supplier_info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_add_supplier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_update_supplier = function(seqid, input, output) {
  var args = new vichele_management_update_supplier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_supplier.length === 2) {
    Q.fcall(this._handler.update_supplier.bind(this._handler),
      args.ssid,
      args.supplier_info
    ).then(function(result) {
      var result_obj = new vichele_management_update_supplier_result({success: result});
      output.writeMessageBegin("update_supplier", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_update_supplier_result(err);
        output.writeMessageBegin("update_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.update_supplier(args.ssid, args.supplier_info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_update_supplier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_del_supplier = function(seqid, input, output) {
  var args = new vichele_management_del_supplier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.del_supplier.length === 2) {
    Q.fcall(this._handler.del_supplier.bind(this._handler),
      args.ssid,
      args.supplier_id
    ).then(function(result) {
      var result_obj = new vichele_management_del_supplier_result({success: result});
      output.writeMessageBegin("del_supplier", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_del_supplier_result(err);
        output.writeMessageBegin("del_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.del_supplier(args.ssid, args.supplier_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_del_supplier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("del_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_all_supplier = function(seqid, input, output) {
  var args = new vichele_management_get_all_supplier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_supplier.length === 1) {
    Q.fcall(this._handler.get_all_supplier.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new vichele_management_get_all_supplier_result({success: result});
      output.writeMessageBegin("get_all_supplier", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_all_supplier_result(err);
        output.writeMessageBegin("get_all_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_supplier(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_all_supplier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_smart_assign = function(seqid, input, output) {
  var args = new vichele_management_smart_assign_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.smart_assign.length === 2) {
    Q.fcall(this._handler.smart_assign.bind(this._handler),
      args.ssid,
      args.vichele_info
    ).then(function(result) {
      var result_obj = new vichele_management_smart_assign_result({success: result});
      output.writeMessageBegin("smart_assign", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_smart_assign_result(err);
        output.writeMessageBegin("smart_assign", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("smart_assign", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.smart_assign(args.ssid, args.vichele_info, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_smart_assign_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("smart_assign", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("smart_assign", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_max_vichele_by_supplier = function(seqid, input, output) {
  var args = new vichele_management_get_max_vichele_by_supplier_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_max_vichele_by_supplier.length === 2) {
    Q.fcall(this._handler.get_max_vichele_by_supplier.bind(this._handler),
      args.supplier,
      args.company
    ).then(function(result) {
      var result_obj = new vichele_management_get_max_vichele_by_supplier_result({success: result});
      output.writeMessageBegin("get_max_vichele_by_supplier", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_max_vichele_by_supplier_result(err);
        output.writeMessageBegin("get_max_vichele_by_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_max_vichele_by_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_max_vichele_by_supplier(args.supplier, args.company, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_max_vichele_by_supplier_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_max_vichele_by_supplier", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_max_vichele_by_supplier", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_fill_tmd = function(seqid, input, output) {
  var args = new vichele_management_fill_tmd_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fill_tmd.length === 3) {
    Q.fcall(this._handler.fill_tmd.bind(this._handler),
      args.open_id,
      args.vichele_id,
      args.tmd_no
    ).then(function(result) {
      var result_obj = new vichele_management_fill_tmd_result({success: result});
      output.writeMessageBegin("fill_tmd", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_fill_tmd_result(err);
        output.writeMessageBegin("fill_tmd", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fill_tmd", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.fill_tmd(args.open_id, args.vichele_id, args.tmd_no, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_fill_tmd_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("fill_tmd", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fill_tmd", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_fill_enter_weight = function(seqid, input, output) {
  var args = new vichele_management_fill_enter_weight_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fill_enter_weight.length === 3) {
    Q.fcall(this._handler.fill_enter_weight.bind(this._handler),
      args.open_id,
      args.vichele_id,
      args.enter_weight
    ).then(function(result) {
      var result_obj = new vichele_management_fill_enter_weight_result({success: result});
      output.writeMessageBegin("fill_enter_weight", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_fill_enter_weight_result(err);
        output.writeMessageBegin("fill_enter_weight", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fill_enter_weight", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.fill_enter_weight(args.open_id, args.vichele_id, args.enter_weight, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_fill_enter_weight_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("fill_enter_weight", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fill_enter_weight", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_fill_weight_attach = function(seqid, input, output) {
  var args = new vichele_management_fill_weight_attach_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.fill_weight_attach.length === 3) {
    Q.fcall(this._handler.fill_weight_attach.bind(this._handler),
      args.open_id,
      args.vichele_id,
      args.weight_attach
    ).then(function(result) {
      var result_obj = new vichele_management_fill_weight_attach_result({success: result});
      output.writeMessageBegin("fill_weight_attach", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_fill_weight_attach_result(err);
        output.writeMessageBegin("fill_weight_attach", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fill_weight_attach", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.fill_weight_attach(args.open_id, args.vichele_id, args.weight_attach, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_fill_weight_attach_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("fill_weight_attach", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("fill_weight_attach", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_add_exception = function(seqid, input, output) {
  var args = new vichele_management_add_exception_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_exception.length === 2) {
    Q.fcall(this._handler.add_exception.bind(this._handler),
      args.ssid,
      args.stuff_name
    ).then(function(result) {
      var result_obj = new vichele_management_add_exception_result({success: result});
      output.writeMessageBegin("add_exception", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_add_exception_result(err);
        output.writeMessageBegin("add_exception", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_exception", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.add_exception(args.ssid, args.stuff_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_add_exception_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_exception", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_exception", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_del_exception = function(seqid, input, output) {
  var args = new vichele_management_del_exception_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.del_exception.length === 2) {
    Q.fcall(this._handler.del_exception.bind(this._handler),
      args.ssid,
      args.stuff_name
    ).then(function(result) {
      var result_obj = new vichele_management_del_exception_result({success: result});
      output.writeMessageBegin("del_exception", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_del_exception_result(err);
        output.writeMessageBegin("del_exception", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_exception", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.del_exception(args.ssid, args.stuff_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_del_exception_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("del_exception", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_exception", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_all_exceptions = function(seqid, input, output) {
  var args = new vichele_management_get_all_exceptions_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_exceptions.length === 1) {
    Q.fcall(this._handler.get_all_exceptions.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new vichele_management_get_all_exceptions_result({success: result});
      output.writeMessageBegin("get_all_exceptions", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_all_exceptions_result(err);
        output.writeMessageBegin("get_all_exceptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_exceptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_exceptions(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_all_exceptions_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_exceptions", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_exceptions", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_company_brief = function(seqid, input, output) {
  var args = new vichele_management_get_company_brief_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_company_brief.length === 1) {
    Q.fcall(this._handler.get_company_brief.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new vichele_management_get_company_brief_result({success: result});
      output.writeMessageBegin("get_company_brief", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_company_brief_result(err);
        output.writeMessageBegin("get_company_brief", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_brief", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_company_brief(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_company_brief_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_company_brief", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_brief", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
vichele_managementProcessor.prototype.process_get_statistics = function(seqid, input, output) {
  var args = new vichele_management_get_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_statistics.length === 1) {
    Q.fcall(this._handler.get_statistics.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new vichele_management_get_statistics_result({success: result});
      output.writeMessageBegin("get_statistics", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new vichele_management_get_statistics_result(err);
        output.writeMessageBegin("get_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_statistics(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new vichele_management_get_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
