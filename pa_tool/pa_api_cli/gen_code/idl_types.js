//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = module.exports = {};
var gen_exp = module.exports.gen_exp = function(args) {
  Thrift.TException.call(this, "gen_exp");
  this.name = "gen_exp";
  this.msg = null;
  if (args) {
    if (args.msg !== undefined && args.msg !== null) {
      this.msg = args.msg;
    }
  }
};
Thrift.inherits(gen_exp, Thrift.TException);
gen_exp.prototype.name = 'gen_exp';
gen_exp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.msg = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

gen_exp.prototype.write = function(output) {
  output.writeStructBegin('gen_exp');
  if (this.msg !== null && this.msg !== undefined) {
    output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
    output.writeString(this.msg);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_info = module.exports.user_info = function(args) {
  this.user_id = null;
  this.name = null;
  this.logo = null;
  this.company = null;
  this.buyer = null;
  this.phone = null;
  this.groupid = null;
  if (args) {
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.logo !== undefined && args.logo !== null) {
      this.logo = args.logo;
    }
    if (args.company !== undefined && args.company !== null) {
      this.company = args.company;
    }
    if (args.buyer !== undefined && args.buyer !== null) {
      this.buyer = args.buyer;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.groupid !== undefined && args.groupid !== null) {
      this.groupid = args.groupid;
    }
  }
};
user_info.prototype = {};
user_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.logo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BOOL) {
        this.buyer = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.groupid = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_info.prototype.write = function(output) {
  output.writeStructBegin('user_info');
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 1);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.logo !== null && this.logo !== undefined) {
    output.writeFieldBegin('logo', Thrift.Type.STRING, 3);
    output.writeString(this.logo);
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 4);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  if (this.buyer !== null && this.buyer !== undefined) {
    output.writeFieldBegin('buyer', Thrift.Type.BOOL, 5);
    output.writeBool(this.buyer);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 6);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.groupid !== null && this.groupid !== undefined) {
    output.writeFieldBegin('groupid', Thrift.Type.I64, 7);
    output.writeI64(this.groupid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var driver_info = module.exports.driver_info = function(args) {
  this.name = null;
  this.phone = null;
  this.id = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
driver_info.prototype = {};
driver_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

driver_info.prototype.write = function(output) {
  output.writeStructBegin('driver_info');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 2);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_info_t = module.exports.vichele_info_t = function(args) {
  this.number = null;
  this.id = null;
  if (args) {
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
vichele_info_t.prototype = {};
vichele_info_t.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_info_t.prototype.write = function(output) {
  output.writeStructBegin('vichele_info_t');
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.STRING, 1);
    output.writeString(this.number);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_detail = module.exports.stuff_detail = function(args) {
  this.name = null;
  this.last = null;
  this.price = null;
  this.company = null;
  this.type_id = null;
  this.saling = null;
  this.company_address = null;
  this.company_contact = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.company !== undefined && args.company !== null) {
      this.company = args.company;
    }
    if (args.type_id !== undefined && args.type_id !== null) {
      this.type_id = args.type_id;
    }
    if (args.saling !== undefined && args.saling !== null) {
      this.saling = args.saling;
    }
    if (args.company_address !== undefined && args.company_address !== null) {
      this.company_address = args.company_address;
    }
    if (args.company_contact !== undefined && args.company_contact !== null) {
      this.company_contact = args.company_contact;
    }
  }
};
stuff_detail.prototype = {};
stuff_detail.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.last = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.price = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.type_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.saling = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.company_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.company_contact = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_detail.prototype.write = function(output) {
  output.writeStructBegin('stuff_detail');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.STRING, 2);
    output.writeString(this.last);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.I64, 3);
    output.writeI64(this.price);
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 4);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  if (this.type_id !== null && this.type_id !== undefined) {
    output.writeFieldBegin('type_id', Thrift.Type.I64, 5);
    output.writeI64(this.type_id);
    output.writeFieldEnd();
  }
  if (this.saling !== null && this.saling !== undefined) {
    output.writeFieldBegin('saling', Thrift.Type.BOOL, 6);
    output.writeBool(this.saling);
    output.writeFieldEnd();
  }
  if (this.company_address !== null && this.company_address !== undefined) {
    output.writeFieldBegin('company_address', Thrift.Type.STRING, 7);
    output.writeString(this.company_address);
    output.writeFieldEnd();
  }
  if (this.company_contact !== null && this.company_contact !== undefined) {
    output.writeFieldBegin('company_contact', Thrift.Type.STRING, 8);
    output.writeString(this.company_contact);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var user_apply = module.exports.user_apply = function(args) {
  this.name = null;
  this.phone = null;
  this.logo = null;
  this.apply_id = null;
  this.status = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.logo !== undefined && args.logo !== null) {
      this.logo = args.logo;
    }
    if (args.apply_id !== undefined && args.apply_id !== null) {
      this.apply_id = args.apply_id;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
user_apply.prototype = {};
user_apply.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.logo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.apply_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.status = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

user_apply.prototype.write = function(output) {
  output.writeStructBegin('user_apply');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 2);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.logo !== null && this.logo !== undefined) {
    output.writeFieldBegin('logo', Thrift.Type.STRING, 3);
    output.writeString(this.logo);
    output.writeFieldEnd();
  }
  if (this.apply_id !== null && this.apply_id !== undefined) {
    output.writeFieldBegin('apply_id', Thrift.Type.I64, 4);
    output.writeI64(this.apply_id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I64, 5);
    output.writeI64(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_address_contact_info = module.exports.company_address_contact_info = function(args) {
  this.address = null;
  this.contact = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = args.contact;
    }
  }
};
company_address_contact_info.prototype = {};
company_address_contact_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contact = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_address_contact_info.prototype.write = function(output) {
  output.writeStructBegin('company_address_contact_info');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRING, 2);
    output.writeString(this.contact);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_attachment = module.exports.company_attachment = function(args) {
  this.id = null;
  this.path = null;
  this.pic_path = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.path !== undefined && args.path !== null) {
      this.path = args.path;
    }
    if (args.pic_path !== undefined && args.pic_path !== null) {
      this.pic_path = args.pic_path;
    }
  }
};
company_attachment.prototype = {};
company_attachment.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pic_path = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_attachment.prototype.write = function(output) {
  output.writeStructBegin('company_attachment');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.path !== null && this.path !== undefined) {
    output.writeFieldBegin('path', Thrift.Type.STRING, 2);
    output.writeString(this.path);
    output.writeFieldEnd();
  }
  if (this.pic_path !== null && this.pic_path !== undefined) {
    output.writeFieldBegin('pic_path', Thrift.Type.STRING, 3);
    output.writeString(this.pic_path);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var plan_status_rule = module.exports.plan_status_rule = function(args) {
  this.name = null;
  this.author = null;
  this.timestamp = null;
  this.comment = null;
  this.index = null;
  this.prompt = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.author !== undefined && args.author !== null) {
      this.author = args.author;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.prompt !== undefined && args.prompt !== null) {
      this.prompt = args.prompt;
    }
  }
};
plan_status_rule.prototype = {};
plan_status_rule.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.author = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.prompt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

plan_status_rule.prototype.write = function(output) {
  output.writeStructBegin('plan_status_rule');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.author !== null && this.author !== undefined) {
    output.writeFieldBegin('author', Thrift.Type.STRING, 2);
    output.writeString(this.author);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 5);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  if (this.prompt !== null && this.prompt !== undefined) {
    output.writeFieldBegin('prompt', Thrift.Type.STRING, 6);
    output.writeString(this.prompt);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var common_contract = module.exports.common_contract = function(args) {
  this.a_side_company = null;
  this.b_side_company = null;
  this.start_time = null;
  this.end_time = null;
  this.number = null;
  this.id = null;
  this.status = null;
  this.customer_code = null;
  this.balance = null;
  if (args) {
    if (args.a_side_company !== undefined && args.a_side_company !== null) {
      this.a_side_company = args.a_side_company;
    }
    if (args.b_side_company !== undefined && args.b_side_company !== null) {
      this.b_side_company = args.b_side_company;
    }
    if (args.start_time !== undefined && args.start_time !== null) {
      this.start_time = args.start_time;
    }
    if (args.end_time !== undefined && args.end_time !== null) {
      this.end_time = args.end_time;
    }
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.customer_code !== undefined && args.customer_code !== null) {
      this.customer_code = args.customer_code;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
  }
};
common_contract.prototype = {};
common_contract.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.a_side_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.b_side_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.start_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.end_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.status = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.customer_code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.DOUBLE) {
        this.balance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

common_contract.prototype.write = function(output) {
  output.writeStructBegin('common_contract');
  if (this.a_side_company !== null && this.a_side_company !== undefined) {
    output.writeFieldBegin('a_side_company', Thrift.Type.STRING, 1);
    output.writeString(this.a_side_company);
    output.writeFieldEnd();
  }
  if (this.b_side_company !== null && this.b_side_company !== undefined) {
    output.writeFieldBegin('b_side_company', Thrift.Type.STRING, 2);
    output.writeString(this.b_side_company);
    output.writeFieldEnd();
  }
  if (this.start_time !== null && this.start_time !== undefined) {
    output.writeFieldBegin('start_time', Thrift.Type.STRING, 3);
    output.writeString(this.start_time);
    output.writeFieldEnd();
  }
  if (this.end_time !== null && this.end_time !== undefined) {
    output.writeFieldBegin('end_time', Thrift.Type.STRING, 4);
    output.writeString(this.end_time);
    output.writeFieldEnd();
  }
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.STRING, 5);
    output.writeString(this.number);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 6);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I64, 7);
    output.writeI64(this.status);
    output.writeFieldEnd();
  }
  if (this.customer_code !== null && this.customer_code !== undefined) {
    output.writeFieldBegin('customer_code', Thrift.Type.STRING, 8);
    output.writeString(this.customer_code);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.DOUBLE, 9);
    output.writeDouble(this.balance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var real_access_record = module.exports.real_access_record = function(args) {
  this.name = null;
  this.logo = null;
  this.phone = null;
  this.company_name = null;
  this.attachment = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.logo !== undefined && args.logo !== null) {
      this.logo = args.logo;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
    if (args.attachment !== undefined && args.attachment !== null) {
      this.attachment = args.attachment;
    }
  }
};
real_access_record.prototype = {};
real_access_record.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.logo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.attachment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

real_access_record.prototype.write = function(output) {
  output.writeStructBegin('real_access_record');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.logo !== null && this.logo !== undefined) {
    output.writeFieldBegin('logo', Thrift.Type.STRING, 2);
    output.writeString(this.logo);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 3);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 4);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  if (this.attachment !== null && this.attachment !== undefined) {
    output.writeFieldBegin('attachment', Thrift.Type.STRING, 5);
    output.writeString(this.attachment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_work_time = module.exports.company_work_time = function(args) {
  this.start_time = null;
  this.end_time = null;
  if (args) {
    if (args.start_time !== undefined && args.start_time !== null) {
      this.start_time = args.start_time;
    }
    if (args.end_time !== undefined && args.end_time !== null) {
      this.end_time = args.end_time;
    }
  }
};
company_work_time.prototype = {};
company_work_time.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.start_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.end_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_work_time.prototype.write = function(output) {
  output.writeStructBegin('company_work_time');
  if (this.start_time !== null && this.start_time !== undefined) {
    output.writeFieldBegin('start_time', Thrift.Type.I64, 1);
    output.writeI64(this.start_time);
    output.writeFieldEnd();
  }
  if (this.end_time !== null && this.end_time !== undefined) {
    output.writeFieldBegin('end_time', Thrift.Type.I64, 2);
    output.writeI64(this.end_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_positon_lat_lag = module.exports.company_positon_lat_lag = function(args) {
  this.lat = null;
  this.lag = null;
  this.distance = null;
  if (args) {
    if (args.lat !== undefined && args.lat !== null) {
      this.lat = args.lat;
    }
    if (args.lag !== undefined && args.lag !== null) {
      this.lag = args.lag;
    }
    if (args.distance !== undefined && args.distance !== null) {
      this.distance = args.distance;
    }
  }
};
company_positon_lat_lag.prototype = {};
company_positon_lat_lag.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lat = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.lag = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.distance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_positon_lat_lag.prototype.write = function(output) {
  output.writeStructBegin('company_positon_lat_lag');
  if (this.lat !== null && this.lat !== undefined) {
    output.writeFieldBegin('lat', Thrift.Type.DOUBLE, 1);
    output.writeDouble(this.lat);
    output.writeFieldEnd();
  }
  if (this.lag !== null && this.lag !== undefined) {
    output.writeFieldBegin('lag', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.lag);
    output.writeFieldEnd();
  }
  if (this.distance !== null && this.distance !== undefined) {
    output.writeFieldBegin('distance', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.distance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var third_dev_info = module.exports.third_dev_info = function(args) {
  this.key = null;
  this.ctrl_url = null;
  this.dms_url = null;
  this.token = null;
  if (args) {
    if (args.key !== undefined && args.key !== null) {
      this.key = args.key;
    }
    if (args.ctrl_url !== undefined && args.ctrl_url !== null) {
      this.ctrl_url = args.ctrl_url;
    }
    if (args.dms_url !== undefined && args.dms_url !== null) {
      this.dms_url = args.dms_url;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
third_dev_info.prototype = {};
third_dev_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.key = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ctrl_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.dms_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

third_dev_info.prototype.write = function(output) {
  output.writeStructBegin('third_dev_info');
  if (this.key !== null && this.key !== undefined) {
    output.writeFieldBegin('key', Thrift.Type.STRING, 1);
    output.writeString(this.key);
    output.writeFieldEnd();
  }
  if (this.ctrl_url !== null && this.ctrl_url !== undefined) {
    output.writeFieldBegin('ctrl_url', Thrift.Type.STRING, 2);
    output.writeString(this.ctrl_url);
    output.writeFieldEnd();
  }
  if (this.dms_url !== null && this.dms_url !== undefined) {
    output.writeFieldBegin('dms_url', Thrift.Type.STRING, 3);
    output.writeString(this.dms_url);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 4);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var plan_confirm_info = module.exports.plan_confirm_info = function(args) {
  this.timestamp = null;
  this.name = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
plan_confirm_info.prototype = {};
plan_confirm_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

plan_confirm_info.prototype.write = function(output) {
  output.writeStructBegin('plan_confirm_info');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var pay_confirm_info = module.exports.pay_confirm_info = function(args) {
  this.timestamp = null;
  this.name = null;
  if (args) {
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
pay_confirm_info.prototype = {};
pay_confirm_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pay_confirm_info.prototype.write = function(output) {
  output.writeStructBegin('pay_confirm_info');
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
    output.writeString(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_in_plan = module.exports.vichele_in_plan = function(args) {
  this.main_vichele = null;
  this.behind_vichele = null;
  this.driver_name = null;
  this.driver_phone = null;
  this.count = null;
  this.drop_address = null;
  this.use_for = null;
  this.vichele_id = null;
  this.finish = null;
  this.deliver_timestamp = null;
  this.register_timestamp = null;
  this.register_number = null;
  this.enter_location = null;
  this.p_time = null;
  this.p_weight = null;
  this.m_weight = null;
  this.driver_id = null;
  if (args) {
    if (args.main_vichele !== undefined && args.main_vichele !== null) {
      this.main_vichele = args.main_vichele;
    }
    if (args.behind_vichele !== undefined && args.behind_vichele !== null) {
      this.behind_vichele = args.behind_vichele;
    }
    if (args.driver_name !== undefined && args.driver_name !== null) {
      this.driver_name = args.driver_name;
    }
    if (args.driver_phone !== undefined && args.driver_phone !== null) {
      this.driver_phone = args.driver_phone;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.drop_address !== undefined && args.drop_address !== null) {
      this.drop_address = args.drop_address;
    }
    if (args.use_for !== undefined && args.use_for !== null) {
      this.use_for = args.use_for;
    }
    if (args.vichele_id !== undefined && args.vichele_id !== null) {
      this.vichele_id = args.vichele_id;
    }
    if (args.finish !== undefined && args.finish !== null) {
      this.finish = args.finish;
    }
    if (args.deliver_timestamp !== undefined && args.deliver_timestamp !== null) {
      this.deliver_timestamp = args.deliver_timestamp;
    }
    if (args.register_timestamp !== undefined && args.register_timestamp !== null) {
      this.register_timestamp = args.register_timestamp;
    }
    if (args.register_number !== undefined && args.register_number !== null) {
      this.register_number = args.register_number;
    }
    if (args.enter_location !== undefined && args.enter_location !== null) {
      this.enter_location = args.enter_location;
    }
    if (args.p_time !== undefined && args.p_time !== null) {
      this.p_time = args.p_time;
    }
    if (args.p_weight !== undefined && args.p_weight !== null) {
      this.p_weight = args.p_weight;
    }
    if (args.m_weight !== undefined && args.m_weight !== null) {
      this.m_weight = args.m_weight;
    }
    if (args.driver_id !== undefined && args.driver_id !== null) {
      this.driver_id = args.driver_id;
    }
  }
};
vichele_in_plan.prototype = {};
vichele_in_plan.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.main_vichele = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.behind_vichele = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.driver_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.driver_phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.drop_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.use_for = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I64) {
        this.vichele_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.finish = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.deliver_timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.register_timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.register_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.enter_location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.p_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.DOUBLE) {
        this.p_weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.DOUBLE) {
        this.m_weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.driver_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_in_plan.prototype.write = function(output) {
  output.writeStructBegin('vichele_in_plan');
  if (this.main_vichele !== null && this.main_vichele !== undefined) {
    output.writeFieldBegin('main_vichele', Thrift.Type.STRING, 1);
    output.writeString(this.main_vichele);
    output.writeFieldEnd();
  }
  if (this.behind_vichele !== null && this.behind_vichele !== undefined) {
    output.writeFieldBegin('behind_vichele', Thrift.Type.STRING, 2);
    output.writeString(this.behind_vichele);
    output.writeFieldEnd();
  }
  if (this.driver_name !== null && this.driver_name !== undefined) {
    output.writeFieldBegin('driver_name', Thrift.Type.STRING, 3);
    output.writeString(this.driver_name);
    output.writeFieldEnd();
  }
  if (this.driver_phone !== null && this.driver_phone !== undefined) {
    output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 4);
    output.writeString(this.driver_phone);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.count);
    output.writeFieldEnd();
  }
  if (this.drop_address !== null && this.drop_address !== undefined) {
    output.writeFieldBegin('drop_address', Thrift.Type.STRING, 6);
    output.writeString(this.drop_address);
    output.writeFieldEnd();
  }
  if (this.use_for !== null && this.use_for !== undefined) {
    output.writeFieldBegin('use_for', Thrift.Type.STRING, 7);
    output.writeString(this.use_for);
    output.writeFieldEnd();
  }
  if (this.vichele_id !== null && this.vichele_id !== undefined) {
    output.writeFieldBegin('vichele_id', Thrift.Type.I64, 8);
    output.writeI64(this.vichele_id);
    output.writeFieldEnd();
  }
  if (this.finish !== null && this.finish !== undefined) {
    output.writeFieldBegin('finish', Thrift.Type.BOOL, 9);
    output.writeBool(this.finish);
    output.writeFieldEnd();
  }
  if (this.deliver_timestamp !== null && this.deliver_timestamp !== undefined) {
    output.writeFieldBegin('deliver_timestamp', Thrift.Type.STRING, 10);
    output.writeString(this.deliver_timestamp);
    output.writeFieldEnd();
  }
  if (this.register_timestamp !== null && this.register_timestamp !== undefined) {
    output.writeFieldBegin('register_timestamp', Thrift.Type.STRING, 11);
    output.writeString(this.register_timestamp);
    output.writeFieldEnd();
  }
  if (this.register_number !== null && this.register_number !== undefined) {
    output.writeFieldBegin('register_number', Thrift.Type.STRING, 12);
    output.writeString(this.register_number);
    output.writeFieldEnd();
  }
  if (this.enter_location !== null && this.enter_location !== undefined) {
    output.writeFieldBegin('enter_location', Thrift.Type.STRING, 13);
    output.writeString(this.enter_location);
    output.writeFieldEnd();
  }
  if (this.p_time !== null && this.p_time !== undefined) {
    output.writeFieldBegin('p_time', Thrift.Type.STRING, 14);
    output.writeString(this.p_time);
    output.writeFieldEnd();
  }
  if (this.p_weight !== null && this.p_weight !== undefined) {
    output.writeFieldBegin('p_weight', Thrift.Type.DOUBLE, 15);
    output.writeDouble(this.p_weight);
    output.writeFieldEnd();
  }
  if (this.m_weight !== null && this.m_weight !== undefined) {
    output.writeFieldBegin('m_weight', Thrift.Type.DOUBLE, 16);
    output.writeDouble(this.m_weight);
    output.writeFieldEnd();
  }
  if (this.driver_id !== null && this.driver_id !== undefined) {
    output.writeFieldBegin('driver_id', Thrift.Type.STRING, 17);
    output.writeString(this.driver_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan = module.exports.stuff_plan = function(args) {
  this.type_id = null;
  this.count = null;
  this.vichele_info = null;
  this.plan_id = null;
  this.plan_time = null;
  this.created_time = null;
  this.name = null;
  this.price = null;
  this.status = null;
  this.proxy_company = null;
  this.created_user_name = null;
  this.buy_company = null;
  this.sale_company = null;
  this.comment = null;
  this.is_cancel = null;
  if (args) {
    if (args.type_id !== undefined && args.type_id !== null) {
      this.type_id = args.type_id;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.vichele_info !== undefined && args.vichele_info !== null) {
      this.vichele_info = Thrift.copyList(args.vichele_info, [ttypes.vichele_in_plan]);
    }
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
    if (args.plan_time !== undefined && args.plan_time !== null) {
      this.plan_time = args.plan_time;
    }
    if (args.created_time !== undefined && args.created_time !== null) {
      this.created_time = args.created_time;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.proxy_company !== undefined && args.proxy_company !== null) {
      this.proxy_company = args.proxy_company;
    }
    if (args.created_user_name !== undefined && args.created_user_name !== null) {
      this.created_user_name = args.created_user_name;
    }
    if (args.buy_company !== undefined && args.buy_company !== null) {
      this.buy_company = args.buy_company;
    }
    if (args.sale_company !== undefined && args.sale_company !== null) {
      this.sale_company = args.sale_company;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.is_cancel !== undefined && args.is_cancel !== null) {
      this.is_cancel = args.is_cancel;
    }
  }
};
stuff_plan.prototype = {};
stuff_plan.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.type_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.vichele_info = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new ttypes.vichele_in_plan();
          elem3.read(input);
          this.vichele_info.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.plan_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I64) {
        this.created_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.status = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.proxy_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.created_user_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.buy_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.STRING) {
        this.sale_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.is_cancel = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan');
  if (this.type_id !== null && this.type_id !== undefined) {
    output.writeFieldBegin('type_id', Thrift.Type.I64, 1);
    output.writeI64(this.type_id);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.count);
    output.writeFieldEnd();
  }
  if (this.vichele_info !== null && this.vichele_info !== undefined) {
    output.writeFieldBegin('vichele_info', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.vichele_info.length);
    for (var iter4 in this.vichele_info) {
      if (this.vichele_info.hasOwnProperty(iter4)) {
        iter4 = this.vichele_info[iter4];
        iter4.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 4);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  if (this.plan_time !== null && this.plan_time !== undefined) {
    output.writeFieldBegin('plan_time', Thrift.Type.STRING, 5);
    output.writeString(this.plan_time);
    output.writeFieldEnd();
  }
  if (this.created_time !== null && this.created_time !== undefined) {
    output.writeFieldBegin('created_time', Thrift.Type.I64, 6);
    output.writeI64(this.created_time);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 7);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 8);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I64, 9);
    output.writeI64(this.status);
    output.writeFieldEnd();
  }
  if (this.proxy_company !== null && this.proxy_company !== undefined) {
    output.writeFieldBegin('proxy_company', Thrift.Type.STRING, 10);
    output.writeString(this.proxy_company);
    output.writeFieldEnd();
  }
  if (this.created_user_name !== null && this.created_user_name !== undefined) {
    output.writeFieldBegin('created_user_name', Thrift.Type.STRING, 11);
    output.writeString(this.created_user_name);
    output.writeFieldEnd();
  }
  if (this.buy_company !== null && this.buy_company !== undefined) {
    output.writeFieldBegin('buy_company', Thrift.Type.STRING, 12);
    output.writeString(this.buy_company);
    output.writeFieldEnd();
  }
  if (this.sale_company !== null && this.sale_company !== undefined) {
    output.writeFieldBegin('sale_company', Thrift.Type.STRING, 13);
    output.writeString(this.sale_company);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 14);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.is_cancel !== null && this.is_cancel !== undefined) {
    output.writeFieldBegin('is_cancel', Thrift.Type.BOOL, 15);
    output.writeBool(this.is_cancel);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var plan_status = module.exports.plan_status = function(args) {
  this.plan_id = null;
  this.status = null;
  this.plan_time = null;
  this.conflict_reason = null;
  this.status_prompt = null;
  this.is_cancel = null;
  this.stuff_type = null;
  this.company = null;
  if (args) {
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.plan_time !== undefined && args.plan_time !== null) {
      this.plan_time = args.plan_time;
    }
    if (args.conflict_reason !== undefined && args.conflict_reason !== null) {
      this.conflict_reason = args.conflict_reason;
    }
    if (args.status_prompt !== undefined && args.status_prompt !== null) {
      this.status_prompt = args.status_prompt;
    }
    if (args.is_cancel !== undefined && args.is_cancel !== null) {
      this.is_cancel = args.is_cancel;
    }
    if (args.stuff_type !== undefined && args.stuff_type !== null) {
      this.stuff_type = args.stuff_type;
    }
    if (args.company !== undefined && args.company !== null) {
      this.company = args.company;
    }
  }
};
plan_status.prototype = {};
plan_status.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.status = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.plan_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.conflict_reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.status_prompt = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.is_cancel = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.stuff_type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

plan_status.prototype.write = function(output) {
  output.writeStructBegin('plan_status');
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I64, 2);
    output.writeI64(this.status);
    output.writeFieldEnd();
  }
  if (this.plan_time !== null && this.plan_time !== undefined) {
    output.writeFieldBegin('plan_time', Thrift.Type.I64, 3);
    output.writeI64(this.plan_time);
    output.writeFieldEnd();
  }
  if (this.conflict_reason !== null && this.conflict_reason !== undefined) {
    output.writeFieldBegin('conflict_reason', Thrift.Type.STRING, 4);
    output.writeString(this.conflict_reason);
    output.writeFieldEnd();
  }
  if (this.status_prompt !== null && this.status_prompt !== undefined) {
    output.writeFieldBegin('status_prompt', Thrift.Type.STRING, 5);
    output.writeString(this.status_prompt);
    output.writeFieldEnd();
  }
  if (this.is_cancel !== null && this.is_cancel !== undefined) {
    output.writeFieldBegin('is_cancel', Thrift.Type.BOOL, 6);
    output.writeBool(this.is_cancel);
    output.writeFieldEnd();
  }
  if (this.stuff_type !== null && this.stuff_type !== undefined) {
    output.writeFieldBegin('stuff_type', Thrift.Type.STRING, 7);
    output.writeString(this.stuff_type);
    output.writeFieldEnd();
  }
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 8);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var plan_number_id = module.exports.plan_number_id = function(args) {
  this.id = null;
  this.number = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.number !== undefined && args.number !== null) {
      this.number = args.number;
    }
  }
};
plan_number_id.prototype = {};
plan_number_id.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

plan_number_id.prototype.write = function(output) {
  output.writeStructBegin('plan_number_id');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.number !== null && this.number !== undefined) {
    output.writeFieldBegin('number', Thrift.Type.STRING, 2);
    output.writeString(this.number);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var deliver_info = module.exports.deliver_info = function(args) {
  this.id = null;
  this.count = null;
  this.p_weight = null;
  this.m_weight = null;
  this.p_time = null;
  this.m_time = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.p_weight !== undefined && args.p_weight !== null) {
      this.p_weight = args.p_weight;
    }
    if (args.m_weight !== undefined && args.m_weight !== null) {
      this.m_weight = args.m_weight;
    }
    if (args.p_time !== undefined && args.p_time !== null) {
      this.p_time = args.p_time;
    }
    if (args.m_time !== undefined && args.m_time !== null) {
      this.m_time = args.m_time;
    }
  }
};
deliver_info.prototype = {};
deliver_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.p_weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.DOUBLE) {
        this.m_weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.p_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.m_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

deliver_info.prototype.write = function(output) {
  output.writeStructBegin('deliver_info');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.count);
    output.writeFieldEnd();
  }
  if (this.p_weight !== null && this.p_weight !== undefined) {
    output.writeFieldBegin('p_weight', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.p_weight);
    output.writeFieldEnd();
  }
  if (this.m_weight !== null && this.m_weight !== undefined) {
    output.writeFieldBegin('m_weight', Thrift.Type.DOUBLE, 4);
    output.writeDouble(this.m_weight);
    output.writeFieldEnd();
  }
  if (this.p_time !== null && this.p_time !== undefined) {
    output.writeFieldBegin('p_time', Thrift.Type.STRING, 5);
    output.writeString(this.p_time);
    output.writeFieldEnd();
  }
  if (this.m_time !== null && this.m_time !== undefined) {
    output.writeFieldBegin('m_time', Thrift.Type.STRING, 6);
    output.writeString(this.m_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_statistics = module.exports.vichele_statistics = function(args) {
  this.company = null;
  this.main_vichele = null;
  this.behind_vichele = null;
  this.driver_name = null;
  this.driver_phone = null;
  this.delivered = null;
  this.plan_id = null;
  this.plan_order = null;
  this.vichele_id = null;
  if (args) {
    if (args.company !== undefined && args.company !== null) {
      this.company = args.company;
    }
    if (args.main_vichele !== undefined && args.main_vichele !== null) {
      this.main_vichele = args.main_vichele;
    }
    if (args.behind_vichele !== undefined && args.behind_vichele !== null) {
      this.behind_vichele = args.behind_vichele;
    }
    if (args.driver_name !== undefined && args.driver_name !== null) {
      this.driver_name = args.driver_name;
    }
    if (args.driver_phone !== undefined && args.driver_phone !== null) {
      this.driver_phone = args.driver_phone;
    }
    if (args.delivered !== undefined && args.delivered !== null) {
      this.delivered = args.delivered;
    }
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
    if (args.plan_order !== undefined && args.plan_order !== null) {
      this.plan_order = args.plan_order;
    }
    if (args.vichele_id !== undefined && args.vichele_id !== null) {
      this.vichele_id = args.vichele_id;
    }
  }
};
vichele_statistics.prototype = {};
vichele_statistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.main_vichele = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.behind_vichele = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.driver_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.driver_phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.delivered = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.plan_order = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I64) {
        this.vichele_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_statistics.prototype.write = function(output) {
  output.writeStructBegin('vichele_statistics');
  if (this.company !== null && this.company !== undefined) {
    output.writeFieldBegin('company', Thrift.Type.STRING, 1);
    output.writeString(this.company);
    output.writeFieldEnd();
  }
  if (this.main_vichele !== null && this.main_vichele !== undefined) {
    output.writeFieldBegin('main_vichele', Thrift.Type.STRING, 2);
    output.writeString(this.main_vichele);
    output.writeFieldEnd();
  }
  if (this.behind_vichele !== null && this.behind_vichele !== undefined) {
    output.writeFieldBegin('behind_vichele', Thrift.Type.STRING, 3);
    output.writeString(this.behind_vichele);
    output.writeFieldEnd();
  }
  if (this.driver_name !== null && this.driver_name !== undefined) {
    output.writeFieldBegin('driver_name', Thrift.Type.STRING, 4);
    output.writeString(this.driver_name);
    output.writeFieldEnd();
  }
  if (this.driver_phone !== null && this.driver_phone !== undefined) {
    output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 5);
    output.writeString(this.driver_phone);
    output.writeFieldEnd();
  }
  if (this.delivered !== null && this.delivered !== undefined) {
    output.writeFieldBegin('delivered', Thrift.Type.BOOL, 6);
    output.writeBool(this.delivered);
    output.writeFieldEnd();
  }
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 7);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  if (this.plan_order !== null && this.plan_order !== undefined) {
    output.writeFieldBegin('plan_order', Thrift.Type.STRING, 8);
    output.writeString(this.plan_order);
    output.writeFieldEnd();
  }
  if (this.vichele_id !== null && this.vichele_id !== undefined) {
    output.writeFieldBegin('vichele_id', Thrift.Type.I64, 9);
    output.writeI64(this.vichele_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_stuff_statistics = module.exports.vichele_stuff_statistics = function(args) {
  this.vichele = null;
  this.stuff_name = null;
  if (args) {
    if (args.vichele !== undefined && args.vichele !== null) {
      this.vichele = new ttypes.vichele_statistics(args.vichele);
    }
    if (args.stuff_name !== undefined && args.stuff_name !== null) {
      this.stuff_name = args.stuff_name;
    }
  }
};
vichele_stuff_statistics.prototype = {};
vichele_stuff_statistics.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.vichele = new ttypes.vichele_statistics();
        this.vichele.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stuff_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_stuff_statistics.prototype.write = function(output) {
  output.writeStructBegin('vichele_stuff_statistics');
  if (this.vichele !== null && this.vichele !== undefined) {
    output.writeFieldBegin('vichele', Thrift.Type.STRUCT, 1);
    this.vichele.write(output);
    output.writeFieldEnd();
  }
  if (this.stuff_name !== null && this.stuff_name !== undefined) {
    output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 2);
    output.writeString(this.stuff_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_search_result = module.exports.vichele_search_result = function(args) {
  this.plan_info = null;
  this.vichele_numbers = null;
  this.plan_time = null;
  this.status = null;
  if (args) {
    if (args.plan_info !== undefined && args.plan_info !== null) {
      this.plan_info = new ttypes.plan_number_id(args.plan_info);
    }
    if (args.vichele_numbers !== undefined && args.vichele_numbers !== null) {
      this.vichele_numbers = args.vichele_numbers;
    }
    if (args.plan_time !== undefined && args.plan_time !== null) {
      this.plan_time = args.plan_time;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
vichele_search_result.prototype = {};
vichele_search_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.plan_info = new ttypes.plan_number_id();
        this.plan_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vichele_numbers = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.plan_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.status = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_search_result.prototype.write = function(output) {
  output.writeStructBegin('vichele_search_result');
  if (this.plan_info !== null && this.plan_info !== undefined) {
    output.writeFieldBegin('plan_info', Thrift.Type.STRUCT, 1);
    this.plan_info.write(output);
    output.writeFieldEnd();
  }
  if (this.vichele_numbers !== null && this.vichele_numbers !== undefined) {
    output.writeFieldBegin('vichele_numbers', Thrift.Type.STRING, 2);
    output.writeString(this.vichele_numbers);
    output.writeFieldEnd();
  }
  if (this.plan_time !== null && this.plan_time !== undefined) {
    output.writeFieldBegin('plan_time', Thrift.Type.STRING, 3);
    output.writeString(this.plan_time);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRING, 4);
    output.writeString(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_plan_brief = module.exports.company_plan_brief = function(args) {
  this.today_plan_count = null;
  this.today_vichele_count = null;
  this.tomorrow_plan_count = null;
  this.tomorrow_vichele_count = null;
  if (args) {
    if (args.today_plan_count !== undefined && args.today_plan_count !== null) {
      this.today_plan_count = args.today_plan_count;
    }
    if (args.today_vichele_count !== undefined && args.today_vichele_count !== null) {
      this.today_vichele_count = args.today_vichele_count;
    }
    if (args.tomorrow_plan_count !== undefined && args.tomorrow_plan_count !== null) {
      this.tomorrow_plan_count = args.tomorrow_plan_count;
    }
    if (args.tomorrow_vichele_count !== undefined && args.tomorrow_vichele_count !== null) {
      this.tomorrow_vichele_count = args.tomorrow_vichele_count;
    }
  }
};
company_plan_brief.prototype = {};
company_plan_brief.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.today_plan_count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.today_vichele_count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.tomorrow_plan_count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.tomorrow_vichele_count = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_plan_brief.prototype.write = function(output) {
  output.writeStructBegin('company_plan_brief');
  if (this.today_plan_count !== null && this.today_plan_count !== undefined) {
    output.writeFieldBegin('today_plan_count', Thrift.Type.I64, 1);
    output.writeI64(this.today_plan_count);
    output.writeFieldEnd();
  }
  if (this.today_vichele_count !== null && this.today_vichele_count !== undefined) {
    output.writeFieldBegin('today_vichele_count', Thrift.Type.I64, 2);
    output.writeI64(this.today_vichele_count);
    output.writeFieldEnd();
  }
  if (this.tomorrow_plan_count !== null && this.tomorrow_plan_count !== undefined) {
    output.writeFieldBegin('tomorrow_plan_count', Thrift.Type.I64, 3);
    output.writeI64(this.tomorrow_plan_count);
    output.writeFieldEnd();
  }
  if (this.tomorrow_vichele_count !== null && this.tomorrow_vichele_count !== undefined) {
    output.writeFieldBegin('tomorrow_vichele_count', Thrift.Type.I64, 4);
    output.writeI64(this.tomorrow_vichele_count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var today_driver_info = module.exports.today_driver_info = function(args) {
  this.id = null;
  this.destination_company = null;
  this.destination_address = null;
  this.order_company = null;
  this.main_vichele = null;
  this.behind_vichele = null;
  this.stuff_name = null;
  this.register_timestamp = null;
  this.register_number = null;
  this.enter_location = null;
  this.is_registered = null;
  this.register_order = null;
  this.is_buy = null;
  this.company_for_select = null;
  this.need_tmd = null;
  this.tmd_no = null;
  this.date = null;
  this.can_enter = null;
  this.attach_url = null;
  this.count = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.destination_company !== undefined && args.destination_company !== null) {
      this.destination_company = args.destination_company;
    }
    if (args.destination_address !== undefined && args.destination_address !== null) {
      this.destination_address = args.destination_address;
    }
    if (args.order_company !== undefined && args.order_company !== null) {
      this.order_company = args.order_company;
    }
    if (args.main_vichele !== undefined && args.main_vichele !== null) {
      this.main_vichele = args.main_vichele;
    }
    if (args.behind_vichele !== undefined && args.behind_vichele !== null) {
      this.behind_vichele = args.behind_vichele;
    }
    if (args.stuff_name !== undefined && args.stuff_name !== null) {
      this.stuff_name = args.stuff_name;
    }
    if (args.register_timestamp !== undefined && args.register_timestamp !== null) {
      this.register_timestamp = args.register_timestamp;
    }
    if (args.register_number !== undefined && args.register_number !== null) {
      this.register_number = args.register_number;
    }
    if (args.enter_location !== undefined && args.enter_location !== null) {
      this.enter_location = args.enter_location;
    }
    if (args.is_registered !== undefined && args.is_registered !== null) {
      this.is_registered = args.is_registered;
    }
    if (args.register_order !== undefined && args.register_order !== null) {
      this.register_order = args.register_order;
    }
    if (args.is_buy !== undefined && args.is_buy !== null) {
      this.is_buy = args.is_buy;
    }
    if (args.company_for_select !== undefined && args.company_for_select !== null) {
      this.company_for_select = Thrift.copyList(args.company_for_select, [null]);
    }
    if (args.need_tmd !== undefined && args.need_tmd !== null) {
      this.need_tmd = args.need_tmd;
    }
    if (args.tmd_no !== undefined && args.tmd_no !== null) {
      this.tmd_no = args.tmd_no;
    }
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.can_enter !== undefined && args.can_enter !== null) {
      this.can_enter = args.can_enter;
    }
    if (args.attach_url !== undefined && args.attach_url !== null) {
      this.attach_url = args.attach_url;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
  }
};
today_driver_info.prototype = {};
today_driver_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.destination_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.destination_address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.order_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.main_vichele = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.behind_vichele = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.stuff_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.register_timestamp = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.register_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.enter_location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.BOOL) {
        this.is_registered = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.register_order = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.is_buy = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.LIST) {
        this.company_for_select = [];
        var _rtmp36 = input.readListBegin();
        var _size5 = _rtmp36.size || 0;
        for (var _i7 = 0; _i7 < _size5; ++_i7) {
          var elem8 = null;
          elem8 = input.readString();
          this.company_for_select.push(elem8);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.BOOL) {
        this.need_tmd = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.tmd_no = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.BOOL) {
        this.can_enter = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.attach_url = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.DOUBLE) {
        this.count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

today_driver_info.prototype.write = function(output) {
  output.writeStructBegin('today_driver_info');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.destination_company !== null && this.destination_company !== undefined) {
    output.writeFieldBegin('destination_company', Thrift.Type.STRING, 2);
    output.writeString(this.destination_company);
    output.writeFieldEnd();
  }
  if (this.destination_address !== null && this.destination_address !== undefined) {
    output.writeFieldBegin('destination_address', Thrift.Type.STRING, 3);
    output.writeString(this.destination_address);
    output.writeFieldEnd();
  }
  if (this.order_company !== null && this.order_company !== undefined) {
    output.writeFieldBegin('order_company', Thrift.Type.STRING, 4);
    output.writeString(this.order_company);
    output.writeFieldEnd();
  }
  if (this.main_vichele !== null && this.main_vichele !== undefined) {
    output.writeFieldBegin('main_vichele', Thrift.Type.STRING, 5);
    output.writeString(this.main_vichele);
    output.writeFieldEnd();
  }
  if (this.behind_vichele !== null && this.behind_vichele !== undefined) {
    output.writeFieldBegin('behind_vichele', Thrift.Type.STRING, 6);
    output.writeString(this.behind_vichele);
    output.writeFieldEnd();
  }
  if (this.stuff_name !== null && this.stuff_name !== undefined) {
    output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 7);
    output.writeString(this.stuff_name);
    output.writeFieldEnd();
  }
  if (this.register_timestamp !== null && this.register_timestamp !== undefined) {
    output.writeFieldBegin('register_timestamp', Thrift.Type.STRING, 8);
    output.writeString(this.register_timestamp);
    output.writeFieldEnd();
  }
  if (this.register_number !== null && this.register_number !== undefined) {
    output.writeFieldBegin('register_number', Thrift.Type.STRING, 9);
    output.writeString(this.register_number);
    output.writeFieldEnd();
  }
  if (this.enter_location !== null && this.enter_location !== undefined) {
    output.writeFieldBegin('enter_location', Thrift.Type.STRING, 10);
    output.writeString(this.enter_location);
    output.writeFieldEnd();
  }
  if (this.is_registered !== null && this.is_registered !== undefined) {
    output.writeFieldBegin('is_registered', Thrift.Type.BOOL, 11);
    output.writeBool(this.is_registered);
    output.writeFieldEnd();
  }
  if (this.register_order !== null && this.register_order !== undefined) {
    output.writeFieldBegin('register_order', Thrift.Type.STRING, 12);
    output.writeString(this.register_order);
    output.writeFieldEnd();
  }
  if (this.is_buy !== null && this.is_buy !== undefined) {
    output.writeFieldBegin('is_buy', Thrift.Type.BOOL, 13);
    output.writeBool(this.is_buy);
    output.writeFieldEnd();
  }
  if (this.company_for_select !== null && this.company_for_select !== undefined) {
    output.writeFieldBegin('company_for_select', Thrift.Type.LIST, 14);
    output.writeListBegin(Thrift.Type.STRING, this.company_for_select.length);
    for (var iter9 in this.company_for_select) {
      if (this.company_for_select.hasOwnProperty(iter9)) {
        iter9 = this.company_for_select[iter9];
        output.writeString(iter9);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.need_tmd !== null && this.need_tmd !== undefined) {
    output.writeFieldBegin('need_tmd', Thrift.Type.BOOL, 15);
    output.writeBool(this.need_tmd);
    output.writeFieldEnd();
  }
  if (this.tmd_no !== null && this.tmd_no !== undefined) {
    output.writeFieldBegin('tmd_no', Thrift.Type.STRING, 16);
    output.writeString(this.tmd_no);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 17);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.can_enter !== null && this.can_enter !== undefined) {
    output.writeFieldBegin('can_enter', Thrift.Type.BOOL, 18);
    output.writeBool(this.can_enter);
    output.writeFieldEnd();
  }
  if (this.attach_url !== null && this.attach_url !== undefined) {
    output.writeFieldBegin('attach_url', Thrift.Type.STRING, 19);
    output.writeString(this.attach_url);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.DOUBLE, 20);
    output.writeDouble(this.count);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var driver_detail_info = module.exports.driver_detail_info = function(args) {
  this.phone = null;
  this.id = null;
  if (args) {
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
driver_detail_info.prototype = {};
driver_detail_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

driver_detail_info.prototype.write = function(output) {
  output.writeStructBegin('driver_detail_info');
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 1);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 2);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var api_extra_transformation = module.exports.api_extra_transformation = function(args) {
  this.driver_name = null;
  this.driver_phone = null;
  this.driver_id = null;
  if (args) {
    if (args.driver_name !== undefined && args.driver_name !== null) {
      this.driver_name = args.driver_name;
    }
    if (args.driver_phone !== undefined && args.driver_phone !== null) {
      this.driver_phone = args.driver_phone;
    }
    if (args.driver_id !== undefined && args.driver_id !== null) {
      this.driver_id = args.driver_id;
    }
  }
};
api_extra_transformation.prototype = {};
api_extra_transformation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.driver_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.driver_phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.driver_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

api_extra_transformation.prototype.write = function(output) {
  output.writeStructBegin('api_extra_transformation');
  if (this.driver_name !== null && this.driver_name !== undefined) {
    output.writeFieldBegin('driver_name', Thrift.Type.STRING, 1);
    output.writeString(this.driver_name);
    output.writeFieldEnd();
  }
  if (this.driver_phone !== null && this.driver_phone !== undefined) {
    output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 2);
    output.writeString(this.driver_phone);
    output.writeFieldEnd();
  }
  if (this.driver_id !== null && this.driver_id !== undefined) {
    output.writeFieldBegin('driver_id', Thrift.Type.STRING, 3);
    output.writeString(this.driver_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var api_transformation_info = module.exports.api_transformation_info = function(args) {
  this.id = null;
  this.main_vichele_number = null;
  this.behind_vichele_number = null;
  this.stuff_name = null;
  this.enter_count = null;
  this.exit_count = null;
  this.company_name = null;
  this.extra_info = null;
  this.is_sale = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.main_vichele_number !== undefined && args.main_vichele_number !== null) {
      this.main_vichele_number = args.main_vichele_number;
    }
    if (args.behind_vichele_number !== undefined && args.behind_vichele_number !== null) {
      this.behind_vichele_number = args.behind_vichele_number;
    }
    if (args.stuff_name !== undefined && args.stuff_name !== null) {
      this.stuff_name = args.stuff_name;
    }
    if (args.enter_count !== undefined && args.enter_count !== null) {
      this.enter_count = args.enter_count;
    }
    if (args.exit_count !== undefined && args.exit_count !== null) {
      this.exit_count = args.exit_count;
    }
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
    if (args.extra_info !== undefined && args.extra_info !== null) {
      this.extra_info = new ttypes.api_extra_transformation(args.extra_info);
    }
    if (args.is_sale !== undefined && args.is_sale !== null) {
      this.is_sale = args.is_sale;
    }
  }
};
api_transformation_info.prototype = {};
api_transformation_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.main_vichele_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.behind_vichele_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stuff_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.DOUBLE) {
        this.enter_count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.exit_count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.extra_info = new ttypes.api_extra_transformation();
        this.extra_info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.is_sale = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

api_transformation_info.prototype.write = function(output) {
  output.writeStructBegin('api_transformation_info');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.main_vichele_number !== null && this.main_vichele_number !== undefined) {
    output.writeFieldBegin('main_vichele_number', Thrift.Type.STRING, 2);
    output.writeString(this.main_vichele_number);
    output.writeFieldEnd();
  }
  if (this.behind_vichele_number !== null && this.behind_vichele_number !== undefined) {
    output.writeFieldBegin('behind_vichele_number', Thrift.Type.STRING, 3);
    output.writeString(this.behind_vichele_number);
    output.writeFieldEnd();
  }
  if (this.stuff_name !== null && this.stuff_name !== undefined) {
    output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 4);
    output.writeString(this.stuff_name);
    output.writeFieldEnd();
  }
  if (this.enter_count !== null && this.enter_count !== undefined) {
    output.writeFieldBegin('enter_count', Thrift.Type.DOUBLE, 5);
    output.writeDouble(this.enter_count);
    output.writeFieldEnd();
  }
  if (this.exit_count !== null && this.exit_count !== undefined) {
    output.writeFieldBegin('exit_count', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.exit_count);
    output.writeFieldEnd();
  }
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 7);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  if (this.extra_info !== null && this.extra_info !== undefined) {
    output.writeFieldBegin('extra_info', Thrift.Type.STRUCT, 8);
    this.extra_info.write(output);
    output.writeFieldEnd();
  }
  if (this.is_sale !== null && this.is_sale !== undefined) {
    output.writeFieldBegin('is_sale', Thrift.Type.BOOL, 9);
    output.writeBool(this.is_sale);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var call_vehicle_req = module.exports.call_vehicle_req = function(args) {
  this.plateNo = null;
  this.driverName = null;
  this.index = null;
  this.stationName = null;
  if (args) {
    if (args.plateNo !== undefined && args.plateNo !== null) {
      this.plateNo = args.plateNo;
    }
    if (args.driverName !== undefined && args.driverName !== null) {
      this.driverName = args.driverName;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
    if (args.stationName !== undefined && args.stationName !== null) {
      this.stationName = args.stationName;
    }
  }
};
call_vehicle_req.prototype = {};
call_vehicle_req.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.plateNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.driverName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.index = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stationName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

call_vehicle_req.prototype.write = function(output) {
  output.writeStructBegin('call_vehicle_req');
  if (this.plateNo !== null && this.plateNo !== undefined) {
    output.writeFieldBegin('plateNo', Thrift.Type.STRING, 1);
    output.writeString(this.plateNo);
    output.writeFieldEnd();
  }
  if (this.driverName !== null && this.driverName !== undefined) {
    output.writeFieldBegin('driverName', Thrift.Type.STRING, 2);
    output.writeString(this.driverName);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I64, 3);
    output.writeI64(this.index);
    output.writeFieldEnd();
  }
  if (this.stationName !== null && this.stationName !== undefined) {
    output.writeFieldBegin('stationName', Thrift.Type.STRING, 4);
    output.writeString(this.stationName);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var meta_stuff_info = module.exports.meta_stuff_info = function(args) {
  this.stuffId = null;
  this.stuffName = null;
  this.weight = null;
  if (args) {
    if (args.stuffId !== undefined && args.stuffId !== null) {
      this.stuffId = args.stuffId;
    }
    if (args.stuffName !== undefined && args.stuffName !== null) {
      this.stuffName = args.stuffName;
    }
    if (args.weight !== undefined && args.weight !== null) {
      this.weight = args.weight;
    }
  }
};
meta_stuff_info.prototype = {};
meta_stuff_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.stuffId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stuffName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

meta_stuff_info.prototype.write = function(output) {
  output.writeStructBegin('meta_stuff_info');
  if (this.stuffId !== null && this.stuffId !== undefined) {
    output.writeFieldBegin('stuffId', Thrift.Type.STRING, 1);
    output.writeString(this.stuffId);
    output.writeFieldEnd();
  }
  if (this.stuffName !== null && this.stuffName !== undefined) {
    output.writeFieldBegin('stuffName', Thrift.Type.STRING, 2);
    output.writeString(this.stuffName);
    output.writeFieldEnd();
  }
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.weight);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vehicle_info_resp = module.exports.vehicle_info_resp = function(args) {
  this.id = null;
  this.plateNo = null;
  this.backPlateNo = null;
  this.stuffName = null;
  this.stuffId = null;
  this.enterWeight = null;
  this.companyName = null;
  this.driverName = null;
  this.isSale = null;
  this.price = null;
  this.customerId = null;
  this.orderNo = null;
  this.multiStuff = null;
  this.isMulti = null;
  this.createTime = null;
  this.driverPhone = null;
  this.driverId = null;
  this.supplierName = null;
  this.supplierId = null;
  this.vehicleTeamName = null;
  this.vehicleTeamId = null;
  this.tmd_no = null;
  this.attachUrl = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.plateNo !== undefined && args.plateNo !== null) {
      this.plateNo = args.plateNo;
    }
    if (args.backPlateNo !== undefined && args.backPlateNo !== null) {
      this.backPlateNo = args.backPlateNo;
    }
    if (args.stuffName !== undefined && args.stuffName !== null) {
      this.stuffName = args.stuffName;
    }
    if (args.stuffId !== undefined && args.stuffId !== null) {
      this.stuffId = args.stuffId;
    }
    if (args.enterWeight !== undefined && args.enterWeight !== null) {
      this.enterWeight = args.enterWeight;
    }
    if (args.companyName !== undefined && args.companyName !== null) {
      this.companyName = args.companyName;
    }
    if (args.driverName !== undefined && args.driverName !== null) {
      this.driverName = args.driverName;
    }
    if (args.isSale !== undefined && args.isSale !== null) {
      this.isSale = args.isSale;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
    if (args.orderNo !== undefined && args.orderNo !== null) {
      this.orderNo = args.orderNo;
    }
    if (args.multiStuff !== undefined && args.multiStuff !== null) {
      this.multiStuff = Thrift.copyList(args.multiStuff, [ttypes.meta_stuff_info]);
    }
    if (args.isMulti !== undefined && args.isMulti !== null) {
      this.isMulti = args.isMulti;
    }
    if (args.createTime !== undefined && args.createTime !== null) {
      this.createTime = args.createTime;
    }
    if (args.driverPhone !== undefined && args.driverPhone !== null) {
      this.driverPhone = args.driverPhone;
    }
    if (args.driverId !== undefined && args.driverId !== null) {
      this.driverId = args.driverId;
    }
    if (args.supplierName !== undefined && args.supplierName !== null) {
      this.supplierName = args.supplierName;
    }
    if (args.supplierId !== undefined && args.supplierId !== null) {
      this.supplierId = args.supplierId;
    }
    if (args.vehicleTeamName !== undefined && args.vehicleTeamName !== null) {
      this.vehicleTeamName = args.vehicleTeamName;
    }
    if (args.vehicleTeamId !== undefined && args.vehicleTeamId !== null) {
      this.vehicleTeamId = args.vehicleTeamId;
    }
    if (args.tmd_no !== undefined && args.tmd_no !== null) {
      this.tmd_no = args.tmd_no;
    }
    if (args.attachUrl !== undefined && args.attachUrl !== null) {
      this.attachUrl = args.attachUrl;
    }
  }
};
vehicle_info_resp.prototype = {};
vehicle_info_resp.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.plateNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.backPlateNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.stuffName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.stuffId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.enterWeight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.companyName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.driverName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.BOOL) {
        this.isSale = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.orderNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.LIST) {
        this.multiStuff = [];
        var _rtmp311 = input.readListBegin();
        var _size10 = _rtmp311.size || 0;
        for (var _i12 = 0; _i12 < _size10; ++_i12) {
          var elem13 = null;
          elem13 = new ttypes.meta_stuff_info();
          elem13.read(input);
          this.multiStuff.push(elem13);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.BOOL) {
        this.isMulti = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.createTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.driverPhone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.driverId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.supplierName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.supplierId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.vehicleTeamName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.STRING) {
        this.vehicleTeamId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.STRING) {
        this.tmd_no = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.STRING) {
        this.attachUrl = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vehicle_info_resp.prototype.write = function(output) {
  output.writeStructBegin('vehicle_info_resp');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.plateNo !== null && this.plateNo !== undefined) {
    output.writeFieldBegin('plateNo', Thrift.Type.STRING, 2);
    output.writeString(this.plateNo);
    output.writeFieldEnd();
  }
  if (this.backPlateNo !== null && this.backPlateNo !== undefined) {
    output.writeFieldBegin('backPlateNo', Thrift.Type.STRING, 3);
    output.writeString(this.backPlateNo);
    output.writeFieldEnd();
  }
  if (this.stuffName !== null && this.stuffName !== undefined) {
    output.writeFieldBegin('stuffName', Thrift.Type.STRING, 4);
    output.writeString(this.stuffName);
    output.writeFieldEnd();
  }
  if (this.stuffId !== null && this.stuffId !== undefined) {
    output.writeFieldBegin('stuffId', Thrift.Type.STRING, 5);
    output.writeString(this.stuffId);
    output.writeFieldEnd();
  }
  if (this.enterWeight !== null && this.enterWeight !== undefined) {
    output.writeFieldBegin('enterWeight', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.enterWeight);
    output.writeFieldEnd();
  }
  if (this.companyName !== null && this.companyName !== undefined) {
    output.writeFieldBegin('companyName', Thrift.Type.STRING, 7);
    output.writeString(this.companyName);
    output.writeFieldEnd();
  }
  if (this.driverName !== null && this.driverName !== undefined) {
    output.writeFieldBegin('driverName', Thrift.Type.STRING, 8);
    output.writeString(this.driverName);
    output.writeFieldEnd();
  }
  if (this.isSale !== null && this.isSale !== undefined) {
    output.writeFieldBegin('isSale', Thrift.Type.BOOL, 9);
    output.writeBool(this.isSale);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 11);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  if (this.orderNo !== null && this.orderNo !== undefined) {
    output.writeFieldBegin('orderNo', Thrift.Type.STRING, 12);
    output.writeString(this.orderNo);
    output.writeFieldEnd();
  }
  if (this.multiStuff !== null && this.multiStuff !== undefined) {
    output.writeFieldBegin('multiStuff', Thrift.Type.LIST, 13);
    output.writeListBegin(Thrift.Type.STRUCT, this.multiStuff.length);
    for (var iter14 in this.multiStuff) {
      if (this.multiStuff.hasOwnProperty(iter14)) {
        iter14 = this.multiStuff[iter14];
        iter14.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.isMulti !== null && this.isMulti !== undefined) {
    output.writeFieldBegin('isMulti', Thrift.Type.BOOL, 14);
    output.writeBool(this.isMulti);
    output.writeFieldEnd();
  }
  if (this.createTime !== null && this.createTime !== undefined) {
    output.writeFieldBegin('createTime', Thrift.Type.STRING, 15);
    output.writeString(this.createTime);
    output.writeFieldEnd();
  }
  if (this.driverPhone !== null && this.driverPhone !== undefined) {
    output.writeFieldBegin('driverPhone', Thrift.Type.STRING, 16);
    output.writeString(this.driverPhone);
    output.writeFieldEnd();
  }
  if (this.driverId !== null && this.driverId !== undefined) {
    output.writeFieldBegin('driverId', Thrift.Type.STRING, 17);
    output.writeString(this.driverId);
    output.writeFieldEnd();
  }
  if (this.supplierName !== null && this.supplierName !== undefined) {
    output.writeFieldBegin('supplierName', Thrift.Type.STRING, 18);
    output.writeString(this.supplierName);
    output.writeFieldEnd();
  }
  if (this.supplierId !== null && this.supplierId !== undefined) {
    output.writeFieldBegin('supplierId', Thrift.Type.STRING, 19);
    output.writeString(this.supplierId);
    output.writeFieldEnd();
  }
  if (this.vehicleTeamName !== null && this.vehicleTeamName !== undefined) {
    output.writeFieldBegin('vehicleTeamName', Thrift.Type.STRING, 20);
    output.writeString(this.vehicleTeamName);
    output.writeFieldEnd();
  }
  if (this.vehicleTeamId !== null && this.vehicleTeamId !== undefined) {
    output.writeFieldBegin('vehicleTeamId', Thrift.Type.STRING, 21);
    output.writeString(this.vehicleTeamId);
    output.writeFieldEnd();
  }
  if (this.tmd_no !== null && this.tmd_no !== undefined) {
    output.writeFieldBegin('tmd_no', Thrift.Type.STRING, 22);
    output.writeString(this.tmd_no);
    output.writeFieldEnd();
  }
  if (this.attachUrl !== null && this.attachUrl !== undefined) {
    output.writeFieldBegin('attachUrl', Thrift.Type.STRING, 23);
    output.writeString(this.attachUrl);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var push_weight_req = module.exports.push_weight_req = function(args) {
  this.id = null;
  this.plateNo = null;
  this.customerId = null;
  this.customerName = null;
  this.stuffName = null;
  this.pWeight = null;
  this.mWeight = null;
  this.pTime = null;
  this.mTime = null;
  this.jWeight = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.plateNo !== undefined && args.plateNo !== null) {
      this.plateNo = args.plateNo;
    }
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
    if (args.customerName !== undefined && args.customerName !== null) {
      this.customerName = args.customerName;
    }
    if (args.stuffName !== undefined && args.stuffName !== null) {
      this.stuffName = args.stuffName;
    }
    if (args.pWeight !== undefined && args.pWeight !== null) {
      this.pWeight = args.pWeight;
    }
    if (args.mWeight !== undefined && args.mWeight !== null) {
      this.mWeight = args.mWeight;
    }
    if (args.pTime !== undefined && args.pTime !== null) {
      this.pTime = args.pTime;
    }
    if (args.mTime !== undefined && args.mTime !== null) {
      this.mTime = args.mTime;
    }
    if (args.jWeight !== undefined && args.jWeight !== null) {
      this.jWeight = args.jWeight;
    }
  }
};
push_weight_req.prototype = {};
push_weight_req.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.plateNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.customerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.stuffName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.pWeight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.DOUBLE) {
        this.mWeight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.pTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.mTime = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.DOUBLE) {
        this.jWeight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

push_weight_req.prototype.write = function(output) {
  output.writeStructBegin('push_weight_req');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.plateNo !== null && this.plateNo !== undefined) {
    output.writeFieldBegin('plateNo', Thrift.Type.STRING, 2);
    output.writeString(this.plateNo);
    output.writeFieldEnd();
  }
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 3);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  if (this.customerName !== null && this.customerName !== undefined) {
    output.writeFieldBegin('customerName', Thrift.Type.STRING, 4);
    output.writeString(this.customerName);
    output.writeFieldEnd();
  }
  if (this.stuffName !== null && this.stuffName !== undefined) {
    output.writeFieldBegin('stuffName', Thrift.Type.STRING, 5);
    output.writeString(this.stuffName);
    output.writeFieldEnd();
  }
  if (this.pWeight !== null && this.pWeight !== undefined) {
    output.writeFieldBegin('pWeight', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.pWeight);
    output.writeFieldEnd();
  }
  if (this.mWeight !== null && this.mWeight !== undefined) {
    output.writeFieldBegin('mWeight', Thrift.Type.DOUBLE, 7);
    output.writeDouble(this.mWeight);
    output.writeFieldEnd();
  }
  if (this.pTime !== null && this.pTime !== undefined) {
    output.writeFieldBegin('pTime', Thrift.Type.STRING, 8);
    output.writeString(this.pTime);
    output.writeFieldEnd();
  }
  if (this.mTime !== null && this.mTime !== undefined) {
    output.writeFieldBegin('mTime', Thrift.Type.STRING, 9);
    output.writeString(this.mTime);
    output.writeFieldEnd();
  }
  if (this.jWeight !== null && this.jWeight !== undefined) {
    output.writeFieldBegin('jWeight', Thrift.Type.DOUBLE, 10);
    output.writeDouble(this.jWeight);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var push_base_req = module.exports.push_base_req = function(args) {
  this.id = null;
  this.name = null;
  this.pid = null;
  this.unit = null;
  this.type = null;
  this.code = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.pid !== undefined && args.pid !== null) {
      this.pid = args.pid;
    }
    if (args.unit !== undefined && args.unit !== null) {
      this.unit = args.unit;
    }
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
push_base_req.prototype = {};
push_base_req.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.pid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.unit = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

push_base_req.prototype.write = function(output) {
  output.writeStructBegin('push_base_req');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRING, 1);
    output.writeString(this.id);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.pid !== null && this.pid !== undefined) {
    output.writeFieldBegin('pid', Thrift.Type.STRING, 3);
    output.writeString(this.pid);
    output.writeFieldEnd();
  }
  if (this.unit !== null && this.unit !== undefined) {
    output.writeFieldBegin('unit', Thrift.Type.STRING, 4);
    output.writeString(this.unit);
    output.writeFieldEnd();
  }
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 5);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 6);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var push_balance_req = module.exports.push_balance_req = function(args) {
  this.customerId = null;
  this.customerName = null;
  this.balance = null;
  if (args) {
    if (args.customerId !== undefined && args.customerId !== null) {
      this.customerId = args.customerId;
    }
    if (args.customerName !== undefined && args.customerName !== null) {
      this.customerName = args.customerName;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = args.balance;
    }
  }
};
push_balance_req.prototype = {};
push_balance_req.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.customerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.customerName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.DOUBLE) {
        this.balance = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

push_balance_req.prototype.write = function(output) {
  output.writeStructBegin('push_balance_req');
  if (this.customerId !== null && this.customerId !== undefined) {
    output.writeFieldBegin('customerId', Thrift.Type.STRING, 1);
    output.writeString(this.customerId);
    output.writeFieldEnd();
  }
  if (this.customerName !== null && this.customerName !== undefined) {
    output.writeFieldBegin('customerName', Thrift.Type.STRING, 2);
    output.writeString(this.customerName);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.DOUBLE, 3);
    output.writeDouble(this.balance);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_stay_alone = module.exports.vichele_stay_alone = function(args) {
  this.id = null;
  this.stuff_name = null;
  this.company_name = null;
  this.main_vichele_number = null;
  this.behind_vichele_number = null;
  this.count = null;
  this.comment = null;
  this.date = null;
  this.destination = null;
  this.status = null;
  this.creator_name = null;
  this.creator_phone = null;
  this.repeated = null;
  this.driver_name = null;
  this.driver_phone = null;
  this.driver_id = null;
  this.transfor_company = null;
  this.p_time = null;
  this.m_time = null;
  this.p_weight = null;
  this.m_weight = null;
  this.j_weight = null;
  this.price = null;
  this.can_enter = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.stuff_name !== undefined && args.stuff_name !== null) {
      this.stuff_name = args.stuff_name;
    }
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
    if (args.main_vichele_number !== undefined && args.main_vichele_number !== null) {
      this.main_vichele_number = args.main_vichele_number;
    }
    if (args.behind_vichele_number !== undefined && args.behind_vichele_number !== null) {
      this.behind_vichele_number = args.behind_vichele_number;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
    if (args.date !== undefined && args.date !== null) {
      this.date = args.date;
    }
    if (args.destination !== undefined && args.destination !== null) {
      this.destination = args.destination;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
    if (args.creator_name !== undefined && args.creator_name !== null) {
      this.creator_name = args.creator_name;
    }
    if (args.creator_phone !== undefined && args.creator_phone !== null) {
      this.creator_phone = args.creator_phone;
    }
    if (args.repeated !== undefined && args.repeated !== null) {
      this.repeated = args.repeated;
    }
    if (args.driver_name !== undefined && args.driver_name !== null) {
      this.driver_name = args.driver_name;
    }
    if (args.driver_phone !== undefined && args.driver_phone !== null) {
      this.driver_phone = args.driver_phone;
    }
    if (args.driver_id !== undefined && args.driver_id !== null) {
      this.driver_id = args.driver_id;
    }
    if (args.transfor_company !== undefined && args.transfor_company !== null) {
      this.transfor_company = args.transfor_company;
    }
    if (args.p_time !== undefined && args.p_time !== null) {
      this.p_time = args.p_time;
    }
    if (args.m_time !== undefined && args.m_time !== null) {
      this.m_time = args.m_time;
    }
    if (args.p_weight !== undefined && args.p_weight !== null) {
      this.p_weight = args.p_weight;
    }
    if (args.m_weight !== undefined && args.m_weight !== null) {
      this.m_weight = args.m_weight;
    }
    if (args.j_weight !== undefined && args.j_weight !== null) {
      this.j_weight = args.j_weight;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.can_enter !== undefined && args.can_enter !== null) {
      this.can_enter = args.can_enter;
    }
  }
};
vichele_stay_alone.prototype = {};
vichele_stay_alone.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.stuff_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.main_vichele_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.behind_vichele_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.DOUBLE) {
        this.count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRING) {
        this.date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRING) {
        this.destination = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.status = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.STRING) {
        this.creator_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.STRING) {
        this.creator_phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.BOOL) {
        this.repeated = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.STRING) {
        this.driver_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.STRING) {
        this.driver_phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.driver_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.STRING) {
        this.transfor_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.STRING) {
        this.p_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.STRING) {
        this.m_time = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.DOUBLE) {
        this.p_weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 21:
      if (ftype == Thrift.Type.DOUBLE) {
        this.m_weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 22:
      if (ftype == Thrift.Type.DOUBLE) {
        this.j_weight = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 23:
      if (ftype == Thrift.Type.DOUBLE) {
        this.price = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 24:
      if (ftype == Thrift.Type.BOOL) {
        this.can_enter = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_stay_alone.prototype.write = function(output) {
  output.writeStructBegin('vichele_stay_alone');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.stuff_name !== null && this.stuff_name !== undefined) {
    output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 2);
    output.writeString(this.stuff_name);
    output.writeFieldEnd();
  }
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 3);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  if (this.main_vichele_number !== null && this.main_vichele_number !== undefined) {
    output.writeFieldBegin('main_vichele_number', Thrift.Type.STRING, 4);
    output.writeString(this.main_vichele_number);
    output.writeFieldEnd();
  }
  if (this.behind_vichele_number !== null && this.behind_vichele_number !== undefined) {
    output.writeFieldBegin('behind_vichele_number', Thrift.Type.STRING, 5);
    output.writeString(this.behind_vichele_number);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.DOUBLE, 6);
    output.writeDouble(this.count);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 7);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  if (this.date !== null && this.date !== undefined) {
    output.writeFieldBegin('date', Thrift.Type.STRING, 8);
    output.writeString(this.date);
    output.writeFieldEnd();
  }
  if (this.destination !== null && this.destination !== undefined) {
    output.writeFieldBegin('destination', Thrift.Type.STRING, 9);
    output.writeString(this.destination);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I64, 10);
    output.writeI64(this.status);
    output.writeFieldEnd();
  }
  if (this.creator_name !== null && this.creator_name !== undefined) {
    output.writeFieldBegin('creator_name', Thrift.Type.STRING, 11);
    output.writeString(this.creator_name);
    output.writeFieldEnd();
  }
  if (this.creator_phone !== null && this.creator_phone !== undefined) {
    output.writeFieldBegin('creator_phone', Thrift.Type.STRING, 12);
    output.writeString(this.creator_phone);
    output.writeFieldEnd();
  }
  if (this.repeated !== null && this.repeated !== undefined) {
    output.writeFieldBegin('repeated', Thrift.Type.BOOL, 13);
    output.writeBool(this.repeated);
    output.writeFieldEnd();
  }
  if (this.driver_name !== null && this.driver_name !== undefined) {
    output.writeFieldBegin('driver_name', Thrift.Type.STRING, 14);
    output.writeString(this.driver_name);
    output.writeFieldEnd();
  }
  if (this.driver_phone !== null && this.driver_phone !== undefined) {
    output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 15);
    output.writeString(this.driver_phone);
    output.writeFieldEnd();
  }
  if (this.driver_id !== null && this.driver_id !== undefined) {
    output.writeFieldBegin('driver_id', Thrift.Type.STRING, 16);
    output.writeString(this.driver_id);
    output.writeFieldEnd();
  }
  if (this.transfor_company !== null && this.transfor_company !== undefined) {
    output.writeFieldBegin('transfor_company', Thrift.Type.STRING, 17);
    output.writeString(this.transfor_company);
    output.writeFieldEnd();
  }
  if (this.p_time !== null && this.p_time !== undefined) {
    output.writeFieldBegin('p_time', Thrift.Type.STRING, 18);
    output.writeString(this.p_time);
    output.writeFieldEnd();
  }
  if (this.m_time !== null && this.m_time !== undefined) {
    output.writeFieldBegin('m_time', Thrift.Type.STRING, 19);
    output.writeString(this.m_time);
    output.writeFieldEnd();
  }
  if (this.p_weight !== null && this.p_weight !== undefined) {
    output.writeFieldBegin('p_weight', Thrift.Type.DOUBLE, 20);
    output.writeDouble(this.p_weight);
    output.writeFieldEnd();
  }
  if (this.m_weight !== null && this.m_weight !== undefined) {
    output.writeFieldBegin('m_weight', Thrift.Type.DOUBLE, 21);
    output.writeDouble(this.m_weight);
    output.writeFieldEnd();
  }
  if (this.j_weight !== null && this.j_weight !== undefined) {
    output.writeFieldBegin('j_weight', Thrift.Type.DOUBLE, 22);
    output.writeDouble(this.j_weight);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.DOUBLE, 23);
    output.writeDouble(this.price);
    output.writeFieldEnd();
  }
  if (this.can_enter !== null && this.can_enter !== undefined) {
    output.writeFieldBegin('can_enter', Thrift.Type.BOOL, 24);
    output.writeBool(this.can_enter);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var silent_user_info = module.exports.silent_user_info = function(args) {
  this.name = null;
  this.phone = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
  }
};
silent_user_info.prototype = {};
silent_user_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

silent_user_info.prototype.write = function(output) {
  output.writeStructBegin('silent_user_info');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 2);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_team_member = module.exports.vichele_team_member = function(args) {
  this.main_vichele_number = null;
  this.behind_vichele_number = null;
  this.driver_name = null;
  this.driver_phone = null;
  this.driver_id = null;
  if (args) {
    if (args.main_vichele_number !== undefined && args.main_vichele_number !== null) {
      this.main_vichele_number = args.main_vichele_number;
    }
    if (args.behind_vichele_number !== undefined && args.behind_vichele_number !== null) {
      this.behind_vichele_number = args.behind_vichele_number;
    }
    if (args.driver_name !== undefined && args.driver_name !== null) {
      this.driver_name = args.driver_name;
    }
    if (args.driver_phone !== undefined && args.driver_phone !== null) {
      this.driver_phone = args.driver_phone;
    }
    if (args.driver_id !== undefined && args.driver_id !== null) {
      this.driver_id = args.driver_id;
    }
  }
};
vichele_team_member.prototype = {};
vichele_team_member.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.main_vichele_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.behind_vichele_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.driver_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.driver_phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.driver_id = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_team_member.prototype.write = function(output) {
  output.writeStructBegin('vichele_team_member');
  if (this.main_vichele_number !== null && this.main_vichele_number !== undefined) {
    output.writeFieldBegin('main_vichele_number', Thrift.Type.STRING, 1);
    output.writeString(this.main_vichele_number);
    output.writeFieldEnd();
  }
  if (this.behind_vichele_number !== null && this.behind_vichele_number !== undefined) {
    output.writeFieldBegin('behind_vichele_number', Thrift.Type.STRING, 2);
    output.writeString(this.behind_vichele_number);
    output.writeFieldEnd();
  }
  if (this.driver_name !== null && this.driver_name !== undefined) {
    output.writeFieldBegin('driver_name', Thrift.Type.STRING, 3);
    output.writeString(this.driver_name);
    output.writeFieldEnd();
  }
  if (this.driver_phone !== null && this.driver_phone !== undefined) {
    output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 4);
    output.writeString(this.driver_phone);
    output.writeFieldEnd();
  }
  if (this.driver_id !== null && this.driver_id !== undefined) {
    output.writeFieldBegin('driver_id', Thrift.Type.STRING, 5);
    output.writeString(this.driver_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var vichele_team = module.exports.vichele_team = function(args) {
  this.members = null;
  this.name = null;
  this.id = null;
  if (args) {
    if (args.members !== undefined && args.members !== null) {
      this.members = Thrift.copyList(args.members, [ttypes.vichele_team_member]);
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
vichele_team.prototype = {};
vichele_team.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.LIST) {
        this.members = [];
        var _rtmp316 = input.readListBegin();
        var _size15 = _rtmp316.size || 0;
        for (var _i17 = 0; _i17 < _size15; ++_i17) {
          var elem18 = null;
          elem18 = new ttypes.vichele_team_member();
          elem18.read(input);
          this.members.push(elem18);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

vichele_team.prototype.write = function(output) {
  output.writeStructBegin('vichele_team');
  if (this.members !== null && this.members !== undefined) {
    output.writeFieldBegin('members', Thrift.Type.LIST, 1);
    output.writeListBegin(Thrift.Type.STRUCT, this.members.length);
    for (var iter19 in this.members) {
      if (this.members.hasOwnProperty(iter19)) {
        iter19 = this.members[iter19];
        iter19.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 3);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var supplier_basic_info = module.exports.supplier_basic_info = function(args) {
  this.name = null;
  this.reserves = null;
  this.max_vichele = null;
  this.id = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.reserves !== undefined && args.reserves !== null) {
      this.reserves = args.reserves;
    }
    if (args.max_vichele !== undefined && args.max_vichele !== null) {
      this.max_vichele = args.max_vichele;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
supplier_basic_info.prototype = {};
supplier_basic_info.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.reserves = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.max_vichele = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

supplier_basic_info.prototype.write = function(output) {
  output.writeStructBegin('supplier_basic_info');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.reserves !== null && this.reserves !== undefined) {
    output.writeFieldBegin('reserves', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.reserves);
    output.writeFieldEnd();
  }
  if (this.max_vichele !== null && this.max_vichele !== undefined) {
    output.writeFieldBegin('max_vichele', Thrift.Type.I64, 3);
    output.writeI64(this.max_vichele);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 4);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

