//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./idl_types');
//HELPER FUNCTIONS AND STRUCTURES

var stuff_plan_management_create_plan_args = function(args) {
  this.plan = null;
  this.ssid = null;
  this.proxy_company = null;
  if (args) {
    if (args.plan !== undefined && args.plan !== null) {
      this.plan = new ttypes.stuff_plan(args.plan);
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.proxy_company !== undefined && args.proxy_company !== null) {
      this.proxy_company = args.proxy_company;
    }
  }
};
stuff_plan_management_create_plan_args.prototype = {};
stuff_plan_management_create_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.plan = new ttypes.stuff_plan();
        this.plan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.proxy_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_create_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_create_plan_args');
  if (this.plan !== null && this.plan !== undefined) {
    output.writeFieldBegin('plan', Thrift.Type.STRUCT, 1);
    this.plan.write(output);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.proxy_company !== null && this.proxy_company !== undefined) {
    output.writeFieldBegin('proxy_company', Thrift.Type.STRING, 3);
    output.writeString(this.proxy_company);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_create_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_create_plan_result.prototype = {};
stuff_plan_management_create_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_create_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_create_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_created_plan_args = function(args) {
  this.ssid = null;
  this.anchor = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.anchor !== undefined && args.anchor !== null) {
      this.anchor = args.anchor;
    }
  }
};
stuff_plan_management_get_created_plan_args.prototype = {};
stuff_plan_management_get_created_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.anchor = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_created_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_created_plan_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.anchor !== null && this.anchor !== undefined) {
    output.writeFieldBegin('anchor', Thrift.Type.I64, 2);
    output.writeI64(this.anchor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_created_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.plan_status]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_created_plan_result.prototype = {};
stuff_plan_management_get_created_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = new ttypes.plan_status();
          elem58.read(input);
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_created_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_created_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter59 in this.success) {
      if (this.success.hasOwnProperty(iter59)) {
        iter59 = this.success[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_company_plan_args = function(args) {
  this.ssid = null;
  this.anchor = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.anchor !== undefined && args.anchor !== null) {
      this.anchor = args.anchor;
    }
  }
};
stuff_plan_management_get_company_plan_args.prototype = {};
stuff_plan_management_get_company_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.anchor = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_company_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_company_plan_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.anchor !== null && this.anchor !== undefined) {
    output.writeFieldBegin('anchor', Thrift.Type.I64, 2);
    output.writeI64(this.anchor);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_company_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.plan_status]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_company_plan_result.prototype = {};
stuff_plan_management_get_company_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = new ttypes.plan_status();
          elem63.read(input);
          this.success.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_company_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_company_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter64 in this.success) {
      if (this.success.hasOwnProperty(iter64)) {
        iter64 = this.success[iter64];
        iter64.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_plan_args = function(args) {
  this.plan_id = null;
  if (args) {
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
  }
};
stuff_plan_management_get_plan_args.prototype = {};
stuff_plan_management_get_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_plan_args');
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.stuff_plan(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_plan_result.prototype = {};
stuff_plan_management_get_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.stuff_plan();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_update_plan_args = function(args) {
  this.plan = null;
  this.ssid = null;
  if (args) {
    if (args.plan !== undefined && args.plan !== null) {
      this.plan = new ttypes.stuff_plan(args.plan);
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
stuff_plan_management_update_plan_args.prototype = {};
stuff_plan_management_update_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.plan = new ttypes.stuff_plan();
        this.plan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_update_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_update_plan_args');
  if (this.plan !== null && this.plan !== undefined) {
    output.writeFieldBegin('plan', Thrift.Type.STRUCT, 1);
    this.plan.write(output);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_update_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_update_plan_result.prototype = {};
stuff_plan_management_update_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_update_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_update_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_confirm_plan_args = function(args) {
  this.plan_id = null;
  this.ssid = null;
  this.comment = null;
  if (args) {
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
stuff_plan_management_confirm_plan_args.prototype = {};
stuff_plan_management_confirm_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_confirm_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_confirm_plan_args');
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_confirm_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_confirm_plan_result.prototype = {};
stuff_plan_management_confirm_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_confirm_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_confirm_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_confirm_pay_args = function(args) {
  this.plan_id = null;
  this.ssid = null;
  this.comment = null;
  if (args) {
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.comment !== undefined && args.comment !== null) {
      this.comment = args.comment;
    }
  }
};
stuff_plan_management_confirm_pay_args.prototype = {};
stuff_plan_management_confirm_pay_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.comment = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_confirm_pay_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_confirm_pay_args');
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.comment !== null && this.comment !== undefined) {
    output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
    output.writeString(this.comment);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_confirm_pay_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_confirm_pay_result.prototype = {};
stuff_plan_management_confirm_pay_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_confirm_pay_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_confirm_pay_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_confirm_deliver_args = function(args) {
  this.plan_id = null;
  this.ssid = null;
  this.deliver_infos = null;
  this.reason = null;
  if (args) {
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.deliver_infos !== undefined && args.deliver_infos !== null) {
      this.deliver_infos = Thrift.copyList(args.deliver_infos, [ttypes.deliver_info]);
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
stuff_plan_management_confirm_deliver_args.prototype = {};
stuff_plan_management_confirm_deliver_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.deliver_infos = [];
        var _rtmp366 = input.readListBegin();
        var _size65 = _rtmp366.size || 0;
        for (var _i67 = 0; _i67 < _size65; ++_i67) {
          var elem68 = null;
          elem68 = new ttypes.deliver_info();
          elem68.read(input);
          this.deliver_infos.push(elem68);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_confirm_deliver_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_confirm_deliver_args');
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.deliver_infos !== null && this.deliver_infos !== undefined) {
    output.writeFieldBegin('deliver_infos', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.deliver_infos.length);
    for (var iter69 in this.deliver_infos) {
      if (this.deliver_infos.hasOwnProperty(iter69)) {
        iter69 = this.deliver_infos[iter69];
        iter69.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 4);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_confirm_deliver_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_confirm_deliver_result.prototype = {};
stuff_plan_management_confirm_deliver_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_confirm_deliver_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_confirm_deliver_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_export_plan_args = function(args) {
  this.ssid = null;
  this.plan_ids = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.plan_ids !== undefined && args.plan_ids !== null) {
      this.plan_ids = Thrift.copyList(args.plan_ids, [null]);
    }
  }
};
stuff_plan_management_export_plan_args.prototype = {};
stuff_plan_management_export_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.plan_ids = [];
        var _rtmp371 = input.readListBegin();
        var _size70 = _rtmp371.size || 0;
        for (var _i72 = 0; _i72 < _size70; ++_i72) {
          var elem73 = null;
          elem73 = input.readI64();
          this.plan_ids.push(elem73);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_export_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_export_plan_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.plan_ids !== null && this.plan_ids !== undefined) {
    output.writeFieldBegin('plan_ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.plan_ids.length);
    for (var iter74 in this.plan_ids) {
      if (this.plan_ids.hasOwnProperty(iter74)) {
        iter74 = this.plan_ids[iter74];
        output.writeI64(iter74);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_export_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_export_plan_result.prototype = {};
stuff_plan_management_export_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_export_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_export_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_except_close_args = function(args) {
  this.plan_id = null;
  this.ssid = null;
  this.reason = null;
  if (args) {
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
  }
};
stuff_plan_management_except_close_args.prototype = {};
stuff_plan_management_except_close_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_except_close_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_except_close_args');
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_except_close_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_except_close_result.prototype = {};
stuff_plan_management_except_close_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_except_close_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_except_close_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_verify_plan_args = function(args) {
  this.plan = null;
  this.ssid = null;
  if (args) {
    if (args.plan !== undefined && args.plan !== null) {
      this.plan = new ttypes.stuff_plan(args.plan);
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
stuff_plan_management_verify_plan_args.prototype = {};
stuff_plan_management_verify_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.plan = new ttypes.stuff_plan();
        this.plan.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_verify_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_verify_plan_args');
  if (this.plan !== null && this.plan !== undefined) {
    output.writeFieldBegin('plan', Thrift.Type.STRUCT, 1);
    this.plan.write(output);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_verify_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_verify_plan_result.prototype = {};
stuff_plan_management_verify_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_verify_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_verify_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_send_file_via_email_args = function(args) {
  this.ssid = null;
  this.filepath = null;
  this.email = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.filepath !== undefined && args.filepath !== null) {
      this.filepath = args.filepath;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
  }
};
stuff_plan_management_send_file_via_email_args.prototype = {};
stuff_plan_management_send_file_via_email_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.filepath = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_send_file_via_email_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_send_file_via_email_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.filepath !== null && this.filepath !== undefined) {
    output.writeFieldBegin('filepath', Thrift.Type.STRING, 2);
    output.writeString(this.filepath);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 3);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_send_file_via_email_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_send_file_via_email_result.prototype = {};
stuff_plan_management_send_file_via_email_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_send_file_via_email_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_send_file_via_email_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_reject_plan_args = function(args) {
  this.plan_id = null;
  this.ssid = null;
  this.reject_reason = null;
  if (args) {
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.reject_reason !== undefined && args.reject_reason !== null) {
      this.reject_reason = args.reject_reason;
    }
  }
};
stuff_plan_management_reject_plan_args.prototype = {};
stuff_plan_management_reject_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reject_reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_reject_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_reject_plan_args');
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.reject_reason !== null && this.reject_reason !== undefined) {
    output.writeFieldBegin('reject_reason', Thrift.Type.STRING, 3);
    output.writeString(this.reject_reason);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_reject_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_reject_plan_result.prototype = {};
stuff_plan_management_reject_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_reject_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_reject_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_search_plan_by_driver_phone_args = function(args) {
  this.phone = null;
  if (args) {
    if (args.phone !== undefined && args.phone !== null) {
      this.phone = args.phone;
    }
  }
};
stuff_plan_management_search_plan_by_driver_phone_args.prototype = {};
stuff_plan_management_search_plan_by_driver_phone_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.phone = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_search_plan_by_driver_phone_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_search_plan_by_driver_phone_args');
  if (this.phone !== null && this.phone !== undefined) {
    output.writeFieldBegin('phone', Thrift.Type.STRING, 1);
    output.writeString(this.phone);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_search_plan_by_driver_phone_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.plan_number_id]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_search_plan_by_driver_phone_result.prototype = {};
stuff_plan_management_search_plan_by_driver_phone_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp376 = input.readListBegin();
        var _size75 = _rtmp376.size || 0;
        for (var _i77 = 0; _i77 < _size75; ++_i77) {
          var elem78 = null;
          elem78 = new ttypes.plan_number_id();
          elem78.read(input);
          this.success.push(elem78);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_search_plan_by_driver_phone_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_search_plan_by_driver_phone_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter79 in this.success) {
      if (this.success.hasOwnProperty(iter79)) {
        iter79 = this.success[iter79];
        iter79.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_status_rule_args = function(args) {
  this.plan_id = null;
  if (args) {
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
  }
};
stuff_plan_management_get_status_rule_args.prototype = {};
stuff_plan_management_get_status_rule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_status_rule_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_status_rule_args');
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_status_rule_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.plan_status_rule]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_status_rule_result.prototype = {};
stuff_plan_management_get_status_rule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp381 = input.readListBegin();
        var _size80 = _rtmp381.size || 0;
        for (var _i82 = 0; _i82 < _size80; ++_i82) {
          var elem83 = null;
          elem83 = new ttypes.plan_status_rule();
          elem83.read(input);
          this.success.push(elem83);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_status_rule_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_status_rule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter84 in this.success) {
      if (this.success.hasOwnProperty(iter84)) {
        iter84 = this.success[iter84];
        iter84.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_change_rule_args = function(args) {
  this.ssid = null;
  this.plan_id = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
  }
};
stuff_plan_management_get_change_rule_args.prototype = {};
stuff_plan_management_get_change_rule_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_change_rule_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_change_rule_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 2);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_change_rule_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_change_rule_result.prototype = {};
stuff_plan_management_get_change_rule_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp386 = input.readListBegin();
        var _size85 = _rtmp386.size || 0;
        for (var _i87 = 0; _i87 < _size85; ++_i87) {
          var elem88 = null;
          elem88 = input.readBool();
          this.success.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_change_rule_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_change_rule_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.BOOL, this.success.length);
    for (var iter89 in this.success) {
      if (this.success.hasOwnProperty(iter89)) {
        iter89 = this.success[iter89];
        output.writeBool(iter89);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_clean_unclose_plan_args = function(args) {
};
stuff_plan_management_clean_unclose_plan_args.prototype = {};
stuff_plan_management_clean_unclose_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_clean_unclose_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_clean_unclose_plan_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_clean_unclose_plan_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_clean_unclose_plan_result.prototype = {};
stuff_plan_management_clean_unclose_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_clean_unclose_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_clean_unclose_plan_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_today_statistics_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
stuff_plan_management_get_today_statistics_args.prototype = {};
stuff_plan_management_get_today_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_today_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_today_statistics_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_today_statistics_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.vichele_statistics]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_today_statistics_result.prototype = {};
stuff_plan_management_get_today_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp391 = input.readListBegin();
        var _size90 = _rtmp391.size || 0;
        for (var _i92 = 0; _i92 < _size90; ++_i92) {
          var elem93 = null;
          elem93 = new ttypes.vichele_statistics();
          elem93.read(input);
          this.success.push(elem93);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_today_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_today_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter94 in this.success) {
      if (this.success.hasOwnProperty(iter94)) {
        iter94 = this.success[iter94];
        iter94.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_plan_created_by_user_args = function(args) {
  this.ssid = null;
  this.plan_id = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
  }
};
stuff_plan_management_plan_created_by_user_args.prototype = {};
stuff_plan_management_plan_created_by_user_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_plan_created_by_user_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_plan_created_by_user_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 2);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_plan_created_by_user_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_plan_created_by_user_result.prototype = {};
stuff_plan_management_plan_created_by_user_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_plan_created_by_user_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_plan_created_by_user_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_export_plan_by_plan_date_args = function(args) {
  this.ssid = null;
  this.plan_date = null;
  this.create_date = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.plan_date !== undefined && args.plan_date !== null) {
      this.plan_date = args.plan_date;
    }
    if (args.create_date !== undefined && args.create_date !== null) {
      this.create_date = args.create_date;
    }
  }
};
stuff_plan_management_export_plan_by_plan_date_args.prototype = {};
stuff_plan_management_export_plan_by_plan_date_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.plan_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.create_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_export_plan_by_plan_date_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_export_plan_by_plan_date_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.plan_date !== null && this.plan_date !== undefined) {
    output.writeFieldBegin('plan_date', Thrift.Type.STRING, 2);
    output.writeString(this.plan_date);
    output.writeFieldEnd();
  }
  if (this.create_date !== null && this.create_date !== undefined) {
    output.writeFieldBegin('create_date', Thrift.Type.STRING, 3);
    output.writeString(this.create_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_export_plan_by_plan_date_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_export_plan_by_plan_date_result.prototype = {};
stuff_plan_management_export_plan_by_plan_date_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_export_plan_by_plan_date_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_export_plan_by_plan_date_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_export_plan_by_create_date_args = function(args) {
  this.ssid = null;
  this.begin_date = null;
  this.end_date = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.begin_date !== undefined && args.begin_date !== null) {
      this.begin_date = args.begin_date;
    }
    if (args.end_date !== undefined && args.end_date !== null) {
      this.end_date = args.end_date;
    }
  }
};
stuff_plan_management_export_plan_by_create_date_args.prototype = {};
stuff_plan_management_export_plan_by_create_date_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.begin_date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.end_date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_export_plan_by_create_date_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_export_plan_by_create_date_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.begin_date !== null && this.begin_date !== undefined) {
    output.writeFieldBegin('begin_date', Thrift.Type.I64, 2);
    output.writeI64(this.begin_date);
    output.writeFieldEnd();
  }
  if (this.end_date !== null && this.end_date !== undefined) {
    output.writeFieldBegin('end_date', Thrift.Type.I64, 3);
    output.writeI64(this.end_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_export_plan_by_create_date_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_export_plan_by_create_date_result.prototype = {};
stuff_plan_management_export_plan_by_create_date_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_export_plan_by_create_date_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_export_plan_by_create_date_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_search_plan_by_vichele_number_args = function(args) {
  this.ssid = null;
  this.vichele_number = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.vichele_number !== undefined && args.vichele_number !== null) {
      this.vichele_number = args.vichele_number;
    }
  }
};
stuff_plan_management_search_plan_by_vichele_number_args.prototype = {};
stuff_plan_management_search_plan_by_vichele_number_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.vichele_number = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_search_plan_by_vichele_number_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_search_plan_by_vichele_number_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.vichele_number !== null && this.vichele_number !== undefined) {
    output.writeFieldBegin('vichele_number', Thrift.Type.STRING, 2);
    output.writeString(this.vichele_number);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_search_plan_by_vichele_number_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.vichele_search_result]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_search_plan_by_vichele_number_result.prototype = {};
stuff_plan_management_search_plan_by_vichele_number_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp396 = input.readListBegin();
        var _size95 = _rtmp396.size || 0;
        for (var _i97 = 0; _i97 < _size95; ++_i97) {
          var elem98 = null;
          elem98 = new ttypes.vichele_search_result();
          elem98.read(input);
          this.success.push(elem98);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_search_plan_by_vichele_number_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_search_plan_by_vichele_number_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter99 in this.success) {
      if (this.success.hasOwnProperty(iter99)) {
        iter99 = this.success[iter99];
        iter99.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_tomorrow_statistics_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
stuff_plan_management_get_tomorrow_statistics_args.prototype = {};
stuff_plan_management_get_tomorrow_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_tomorrow_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_tomorrow_statistics_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_tomorrow_statistics_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.vichele_statistics]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_tomorrow_statistics_result.prototype = {};
stuff_plan_management_get_tomorrow_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3101 = input.readListBegin();
        var _size100 = _rtmp3101.size || 0;
        for (var _i102 = 0; _i102 < _size100; ++_i102) {
          var elem103 = null;
          elem103 = new ttypes.vichele_statistics();
          elem103.read(input);
          this.success.push(elem103);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_tomorrow_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_tomorrow_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter104 in this.success) {
      if (this.success.hasOwnProperty(iter104)) {
        iter104 = this.success[iter104];
        iter104.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_company_brief_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
stuff_plan_management_get_company_brief_args.prototype = {};
stuff_plan_management_get_company_brief_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_company_brief_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_company_brief_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_company_brief_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.company_plan_brief(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_company_brief_result.prototype = {};
stuff_plan_management_get_company_brief_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.company_plan_brief();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_company_brief_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_company_brief_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_push_user_pay_args = function(args) {
  this.ssid = null;
  this.plan_id = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.plan_id !== undefined && args.plan_id !== null) {
      this.plan_id = args.plan_id;
    }
  }
};
stuff_plan_management_push_user_pay_args.prototype = {};
stuff_plan_management_push_user_pay_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.plan_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_push_user_pay_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_push_user_pay_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.plan_id !== null && this.plan_id !== undefined) {
    output.writeFieldBegin('plan_id', Thrift.Type.I64, 2);
    output.writeI64(this.plan_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_push_user_pay_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_push_user_pay_result.prototype = {};
stuff_plan_management_push_user_pay_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_push_user_pay_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_push_user_pay_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_today_transformation_args = function(args) {
  this.company_name = null;
  if (args) {
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
  }
};
stuff_plan_management_get_today_transformation_args.prototype = {};
stuff_plan_management_get_today_transformation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_today_transformation_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_today_transformation_args');
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 1);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_today_transformation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.vichele_stuff_statistics]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_today_transformation_result.prototype = {};
stuff_plan_management_get_today_transformation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3106 = input.readListBegin();
        var _size105 = _rtmp3106.size || 0;
        for (var _i107 = 0; _i107 < _size105; ++_i107) {
          var elem108 = null;
          elem108 = new ttypes.vichele_stuff_statistics();
          elem108.read(input);
          this.success.push(elem108);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_today_transformation_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_today_transformation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter109 in this.success) {
      if (this.success.hasOwnProperty(iter109)) {
        iter109 = this.success[iter109];
        iter109.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_count_by_status_args = function(args) {
  this.ssid = null;
  this.status = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.status !== undefined && args.status !== null) {
      this.status = args.status;
    }
  }
};
stuff_plan_management_get_count_by_status_args.prototype = {};
stuff_plan_management_get_count_by_status_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.status = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_count_by_status_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_count_by_status_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I64, 2);
    output.writeI64(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_get_count_by_status_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_get_count_by_status_result.prototype = {};
stuff_plan_management_get_count_by_status_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_get_count_by_status_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_get_count_by_status_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_cancel_vichele_from_plan_args = function(args) {
  this.ssid = null;
  this.ids = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.ids !== undefined && args.ids !== null) {
      this.ids = Thrift.copyList(args.ids, [null]);
    }
  }
};
stuff_plan_management_cancel_vichele_from_plan_args.prototype = {};
stuff_plan_management_cancel_vichele_from_plan_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        this.ids = [];
        var _rtmp3111 = input.readListBegin();
        var _size110 = _rtmp3111.size || 0;
        for (var _i112 = 0; _i112 < _size110; ++_i112) {
          var elem113 = null;
          elem113 = input.readI64();
          this.ids.push(elem113);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_cancel_vichele_from_plan_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_cancel_vichele_from_plan_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.ids !== null && this.ids !== undefined) {
    output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.I64, this.ids.length);
    for (var iter114 in this.ids) {
      if (this.ids.hasOwnProperty(iter114)) {
        iter114 = this.ids[iter114];
        output.writeI64(iter114);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_management_cancel_vichele_from_plan_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_plan_management_cancel_vichele_from_plan_result.prototype = {};
stuff_plan_management_cancel_vichele_from_plan_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_plan_management_cancel_vichele_from_plan_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_plan_management_cancel_vichele_from_plan_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_plan_managementClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
stuff_plan_managementClient.prototype = {};
stuff_plan_managementClient.prototype.seqid = function() { return this._seqid; };
stuff_plan_managementClient.prototype.new_seqid = function() { return this._seqid += 1; };

stuff_plan_managementClient.prototype.create_plan = function(plan, ssid, proxy_company, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_create_plan(plan, ssid, proxy_company);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_create_plan(plan, ssid, proxy_company);
  }
};

stuff_plan_managementClient.prototype.send_create_plan = function(plan, ssid, proxy_company) {
  var output = new this.pClass(this.output);
  var params = {
    plan: plan,
    ssid: ssid,
    proxy_company: proxy_company
  };
  var args = new stuff_plan_management_create_plan_args(params);
  try {
    output.writeMessageBegin('create_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_create_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_create_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('create_plan failed: unknown result');
};

stuff_plan_managementClient.prototype.get_created_plan = function(ssid, anchor, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_created_plan(ssid, anchor);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_created_plan(ssid, anchor);
  }
};

stuff_plan_managementClient.prototype.send_get_created_plan = function(ssid, anchor) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    anchor: anchor
  };
  var args = new stuff_plan_management_get_created_plan_args(params);
  try {
    output.writeMessageBegin('get_created_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_created_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_created_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_created_plan failed: unknown result');
};

stuff_plan_managementClient.prototype.get_company_plan = function(ssid, anchor, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_company_plan(ssid, anchor);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_company_plan(ssid, anchor);
  }
};

stuff_plan_managementClient.prototype.send_get_company_plan = function(ssid, anchor) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    anchor: anchor
  };
  var args = new stuff_plan_management_get_company_plan_args(params);
  try {
    output.writeMessageBegin('get_company_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_company_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_company_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_company_plan failed: unknown result');
};

stuff_plan_managementClient.prototype.get_plan = function(plan_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_plan(plan_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_plan(plan_id);
  }
};

stuff_plan_managementClient.prototype.send_get_plan = function(plan_id) {
  var output = new this.pClass(this.output);
  var params = {
    plan_id: plan_id
  };
  var args = new stuff_plan_management_get_plan_args(params);
  try {
    output.writeMessageBegin('get_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_plan failed: unknown result');
};

stuff_plan_managementClient.prototype.update_plan = function(plan, ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_plan(plan, ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_plan(plan, ssid);
  }
};

stuff_plan_managementClient.prototype.send_update_plan = function(plan, ssid) {
  var output = new this.pClass(this.output);
  var params = {
    plan: plan,
    ssid: ssid
  };
  var args = new stuff_plan_management_update_plan_args(params);
  try {
    output.writeMessageBegin('update_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_update_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_update_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_plan failed: unknown result');
};

stuff_plan_managementClient.prototype.confirm_plan = function(plan_id, ssid, comment, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_confirm_plan(plan_id, ssid, comment);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_confirm_plan(plan_id, ssid, comment);
  }
};

stuff_plan_managementClient.prototype.send_confirm_plan = function(plan_id, ssid, comment) {
  var output = new this.pClass(this.output);
  var params = {
    plan_id: plan_id,
    ssid: ssid,
    comment: comment
  };
  var args = new stuff_plan_management_confirm_plan_args(params);
  try {
    output.writeMessageBegin('confirm_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_confirm_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_confirm_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('confirm_plan failed: unknown result');
};

stuff_plan_managementClient.prototype.confirm_pay = function(plan_id, ssid, comment, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_confirm_pay(plan_id, ssid, comment);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_confirm_pay(plan_id, ssid, comment);
  }
};

stuff_plan_managementClient.prototype.send_confirm_pay = function(plan_id, ssid, comment) {
  var output = new this.pClass(this.output);
  var params = {
    plan_id: plan_id,
    ssid: ssid,
    comment: comment
  };
  var args = new stuff_plan_management_confirm_pay_args(params);
  try {
    output.writeMessageBegin('confirm_pay', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_confirm_pay = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_confirm_pay_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('confirm_pay failed: unknown result');
};

stuff_plan_managementClient.prototype.confirm_deliver = function(plan_id, ssid, deliver_infos, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_confirm_deliver(plan_id, ssid, deliver_infos, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_confirm_deliver(plan_id, ssid, deliver_infos, reason);
  }
};

stuff_plan_managementClient.prototype.send_confirm_deliver = function(plan_id, ssid, deliver_infos, reason) {
  var output = new this.pClass(this.output);
  var params = {
    plan_id: plan_id,
    ssid: ssid,
    deliver_infos: deliver_infos,
    reason: reason
  };
  var args = new stuff_plan_management_confirm_deliver_args(params);
  try {
    output.writeMessageBegin('confirm_deliver', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_confirm_deliver = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_confirm_deliver_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('confirm_deliver failed: unknown result');
};

stuff_plan_managementClient.prototype.export_plan = function(ssid, plan_ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_export_plan(ssid, plan_ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_export_plan(ssid, plan_ids);
  }
};

stuff_plan_managementClient.prototype.send_export_plan = function(ssid, plan_ids) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    plan_ids: plan_ids
  };
  var args = new stuff_plan_management_export_plan_args(params);
  try {
    output.writeMessageBegin('export_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_export_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_export_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('export_plan failed: unknown result');
};

stuff_plan_managementClient.prototype.except_close = function(plan_id, ssid, reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_except_close(plan_id, ssid, reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_except_close(plan_id, ssid, reason);
  }
};

stuff_plan_managementClient.prototype.send_except_close = function(plan_id, ssid, reason) {
  var output = new this.pClass(this.output);
  var params = {
    plan_id: plan_id,
    ssid: ssid,
    reason: reason
  };
  var args = new stuff_plan_management_except_close_args(params);
  try {
    output.writeMessageBegin('except_close', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_except_close = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_except_close_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('except_close failed: unknown result');
};

stuff_plan_managementClient.prototype.verify_plan = function(plan, ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verify_plan(plan, ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verify_plan(plan, ssid);
  }
};

stuff_plan_managementClient.prototype.send_verify_plan = function(plan, ssid) {
  var output = new this.pClass(this.output);
  var params = {
    plan: plan,
    ssid: ssid
  };
  var args = new stuff_plan_management_verify_plan_args(params);
  try {
    output.writeMessageBegin('verify_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_verify_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_verify_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verify_plan failed: unknown result');
};

stuff_plan_managementClient.prototype.send_file_via_email = function(ssid, filepath, email, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_send_file_via_email(ssid, filepath, email);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_send_file_via_email(ssid, filepath, email);
  }
};

stuff_plan_managementClient.prototype.send_send_file_via_email = function(ssid, filepath, email) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    filepath: filepath,
    email: email
  };
  var args = new stuff_plan_management_send_file_via_email_args(params);
  try {
    output.writeMessageBegin('send_file_via_email', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_send_file_via_email = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_send_file_via_email_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('send_file_via_email failed: unknown result');
};

stuff_plan_managementClient.prototype.reject_plan = function(plan_id, ssid, reject_reason, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_reject_plan(plan_id, ssid, reject_reason);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_reject_plan(plan_id, ssid, reject_reason);
  }
};

stuff_plan_managementClient.prototype.send_reject_plan = function(plan_id, ssid, reject_reason) {
  var output = new this.pClass(this.output);
  var params = {
    plan_id: plan_id,
    ssid: ssid,
    reject_reason: reject_reason
  };
  var args = new stuff_plan_management_reject_plan_args(params);
  try {
    output.writeMessageBegin('reject_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_reject_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_reject_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('reject_plan failed: unknown result');
};

stuff_plan_managementClient.prototype.search_plan_by_driver_phone = function(phone, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_search_plan_by_driver_phone(phone);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_search_plan_by_driver_phone(phone);
  }
};

stuff_plan_managementClient.prototype.send_search_plan_by_driver_phone = function(phone) {
  var output = new this.pClass(this.output);
  var params = {
    phone: phone
  };
  var args = new stuff_plan_management_search_plan_by_driver_phone_args(params);
  try {
    output.writeMessageBegin('search_plan_by_driver_phone', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_search_plan_by_driver_phone = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_search_plan_by_driver_phone_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('search_plan_by_driver_phone failed: unknown result');
};

stuff_plan_managementClient.prototype.get_status_rule = function(plan_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_status_rule(plan_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_status_rule(plan_id);
  }
};

stuff_plan_managementClient.prototype.send_get_status_rule = function(plan_id) {
  var output = new this.pClass(this.output);
  var params = {
    plan_id: plan_id
  };
  var args = new stuff_plan_management_get_status_rule_args(params);
  try {
    output.writeMessageBegin('get_status_rule', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_status_rule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_status_rule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_status_rule failed: unknown result');
};

stuff_plan_managementClient.prototype.get_change_rule = function(ssid, plan_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_change_rule(ssid, plan_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_change_rule(ssid, plan_id);
  }
};

stuff_plan_managementClient.prototype.send_get_change_rule = function(ssid, plan_id) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    plan_id: plan_id
  };
  var args = new stuff_plan_management_get_change_rule_args(params);
  try {
    output.writeMessageBegin('get_change_rule', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_change_rule = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_change_rule_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_change_rule failed: unknown result');
};

stuff_plan_managementClient.prototype.clean_unclose_plan = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clean_unclose_plan();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clean_unclose_plan();
  }
};

stuff_plan_managementClient.prototype.send_clean_unclose_plan = function() {
  var output = new this.pClass(this.output);
  var args = new stuff_plan_management_clean_unclose_plan_args();
  try {
    output.writeMessageBegin('clean_unclose_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_clean_unclose_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_clean_unclose_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

stuff_plan_managementClient.prototype.get_today_statistics = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_today_statistics(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_today_statistics(ssid);
  }
};

stuff_plan_managementClient.prototype.send_get_today_statistics = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new stuff_plan_management_get_today_statistics_args(params);
  try {
    output.writeMessageBegin('get_today_statistics', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_today_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_today_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_today_statistics failed: unknown result');
};

stuff_plan_managementClient.prototype.plan_created_by_user = function(ssid, plan_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_plan_created_by_user(ssid, plan_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_plan_created_by_user(ssid, plan_id);
  }
};

stuff_plan_managementClient.prototype.send_plan_created_by_user = function(ssid, plan_id) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    plan_id: plan_id
  };
  var args = new stuff_plan_management_plan_created_by_user_args(params);
  try {
    output.writeMessageBegin('plan_created_by_user', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_plan_created_by_user = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_plan_created_by_user_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('plan_created_by_user failed: unknown result');
};

stuff_plan_managementClient.prototype.export_plan_by_plan_date = function(ssid, plan_date, create_date, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_export_plan_by_plan_date(ssid, plan_date, create_date);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_export_plan_by_plan_date(ssid, plan_date, create_date);
  }
};

stuff_plan_managementClient.prototype.send_export_plan_by_plan_date = function(ssid, plan_date, create_date) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    plan_date: plan_date,
    create_date: create_date
  };
  var args = new stuff_plan_management_export_plan_by_plan_date_args(params);
  try {
    output.writeMessageBegin('export_plan_by_plan_date', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_export_plan_by_plan_date = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_export_plan_by_plan_date_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('export_plan_by_plan_date failed: unknown result');
};

stuff_plan_managementClient.prototype.export_plan_by_create_date = function(ssid, begin_date, end_date, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_export_plan_by_create_date(ssid, begin_date, end_date);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_export_plan_by_create_date(ssid, begin_date, end_date);
  }
};

stuff_plan_managementClient.prototype.send_export_plan_by_create_date = function(ssid, begin_date, end_date) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    begin_date: begin_date,
    end_date: end_date
  };
  var args = new stuff_plan_management_export_plan_by_create_date_args(params);
  try {
    output.writeMessageBegin('export_plan_by_create_date', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_export_plan_by_create_date = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_export_plan_by_create_date_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('export_plan_by_create_date failed: unknown result');
};

stuff_plan_managementClient.prototype.search_plan_by_vichele_number = function(ssid, vichele_number, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_search_plan_by_vichele_number(ssid, vichele_number);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_search_plan_by_vichele_number(ssid, vichele_number);
  }
};

stuff_plan_managementClient.prototype.send_search_plan_by_vichele_number = function(ssid, vichele_number) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    vichele_number: vichele_number
  };
  var args = new stuff_plan_management_search_plan_by_vichele_number_args(params);
  try {
    output.writeMessageBegin('search_plan_by_vichele_number', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_search_plan_by_vichele_number = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_search_plan_by_vichele_number_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('search_plan_by_vichele_number failed: unknown result');
};

stuff_plan_managementClient.prototype.get_tomorrow_statistics = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_tomorrow_statistics(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_tomorrow_statistics(ssid);
  }
};

stuff_plan_managementClient.prototype.send_get_tomorrow_statistics = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new stuff_plan_management_get_tomorrow_statistics_args(params);
  try {
    output.writeMessageBegin('get_tomorrow_statistics', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_tomorrow_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_tomorrow_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_tomorrow_statistics failed: unknown result');
};

stuff_plan_managementClient.prototype.get_company_brief = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_company_brief(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_company_brief(ssid);
  }
};

stuff_plan_managementClient.prototype.send_get_company_brief = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new stuff_plan_management_get_company_brief_args(params);
  try {
    output.writeMessageBegin('get_company_brief', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_company_brief = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_company_brief_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_company_brief failed: unknown result');
};

stuff_plan_managementClient.prototype.push_user_pay = function(ssid, plan_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_push_user_pay(ssid, plan_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_push_user_pay(ssid, plan_id);
  }
};

stuff_plan_managementClient.prototype.send_push_user_pay = function(ssid, plan_id) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    plan_id: plan_id
  };
  var args = new stuff_plan_management_push_user_pay_args(params);
  try {
    output.writeMessageBegin('push_user_pay', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_push_user_pay = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_push_user_pay_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('push_user_pay failed: unknown result');
};

stuff_plan_managementClient.prototype.get_today_transformation = function(company_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_today_transformation(company_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_today_transformation(company_name);
  }
};

stuff_plan_managementClient.prototype.send_get_today_transformation = function(company_name) {
  var output = new this.pClass(this.output);
  var params = {
    company_name: company_name
  };
  var args = new stuff_plan_management_get_today_transformation_args(params);
  try {
    output.writeMessageBegin('get_today_transformation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_today_transformation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_today_transformation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_today_transformation failed: unknown result');
};

stuff_plan_managementClient.prototype.get_count_by_status = function(ssid, status, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_count_by_status(ssid, status);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_count_by_status(ssid, status);
  }
};

stuff_plan_managementClient.prototype.send_get_count_by_status = function(ssid, status) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    status: status
  };
  var args = new stuff_plan_management_get_count_by_status_args(params);
  try {
    output.writeMessageBegin('get_count_by_status', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_get_count_by_status = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_get_count_by_status_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_count_by_status failed: unknown result');
};

stuff_plan_managementClient.prototype.cancel_vichele_from_plan = function(ssid, ids, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_cancel_vichele_from_plan(ssid, ids);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_cancel_vichele_from_plan(ssid, ids);
  }
};

stuff_plan_managementClient.prototype.send_cancel_vichele_from_plan = function(ssid, ids) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    ids: ids
  };
  var args = new stuff_plan_management_cancel_vichele_from_plan_args(params);
  try {
    output.writeMessageBegin('cancel_vichele_from_plan', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_plan_managementClient.prototype.recv_cancel_vichele_from_plan = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_plan_management_cancel_vichele_from_plan_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('cancel_vichele_from_plan failed: unknown result');
};
var stuff_plan_managementProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
stuff_plan_managementProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
stuff_plan_managementProcessor.prototype.process_create_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_create_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.create_plan.length === 3) {
    Q.fcall(this._handler.create_plan.bind(this._handler),
      args.plan,
      args.ssid,
      args.proxy_company
    ).then(function(result) {
      var result_obj = new stuff_plan_management_create_plan_result({success: result});
      output.writeMessageBegin("create_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_create_plan_result(err);
        output.writeMessageBegin("create_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.create_plan(args.plan, args.ssid, args.proxy_company, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_create_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("create_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("create_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_created_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_get_created_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_created_plan.length === 2) {
    Q.fcall(this._handler.get_created_plan.bind(this._handler),
      args.ssid,
      args.anchor
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_created_plan_result({success: result});
      output.writeMessageBegin("get_created_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_created_plan_result(err);
        output.writeMessageBegin("get_created_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_created_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_created_plan(args.ssid, args.anchor, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_created_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_created_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_created_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_company_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_get_company_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_company_plan.length === 2) {
    Q.fcall(this._handler.get_company_plan.bind(this._handler),
      args.ssid,
      args.anchor
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_company_plan_result({success: result});
      output.writeMessageBegin("get_company_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_company_plan_result(err);
        output.writeMessageBegin("get_company_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_company_plan(args.ssid, args.anchor, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_company_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_company_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_get_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_plan.length === 1) {
    Q.fcall(this._handler.get_plan.bind(this._handler),
      args.plan_id
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_plan_result({success: result});
      output.writeMessageBegin("get_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_plan_result(err);
        output.writeMessageBegin("get_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_plan(args.plan_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_update_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_update_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_plan.length === 2) {
    Q.fcall(this._handler.update_plan.bind(this._handler),
      args.plan,
      args.ssid
    ).then(function(result) {
      var result_obj = new stuff_plan_management_update_plan_result({success: result});
      output.writeMessageBegin("update_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_update_plan_result(err);
        output.writeMessageBegin("update_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.update_plan(args.plan, args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_update_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_confirm_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_confirm_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.confirm_plan.length === 3) {
    Q.fcall(this._handler.confirm_plan.bind(this._handler),
      args.plan_id,
      args.ssid,
      args.comment
    ).then(function(result) {
      var result_obj = new stuff_plan_management_confirm_plan_result({success: result});
      output.writeMessageBegin("confirm_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_confirm_plan_result(err);
        output.writeMessageBegin("confirm_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirm_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.confirm_plan(args.plan_id, args.ssid, args.comment, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_confirm_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("confirm_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirm_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_confirm_pay = function(seqid, input, output) {
  var args = new stuff_plan_management_confirm_pay_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.confirm_pay.length === 3) {
    Q.fcall(this._handler.confirm_pay.bind(this._handler),
      args.plan_id,
      args.ssid,
      args.comment
    ).then(function(result) {
      var result_obj = new stuff_plan_management_confirm_pay_result({success: result});
      output.writeMessageBegin("confirm_pay", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_confirm_pay_result(err);
        output.writeMessageBegin("confirm_pay", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirm_pay", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.confirm_pay(args.plan_id, args.ssid, args.comment, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_confirm_pay_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("confirm_pay", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirm_pay", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_confirm_deliver = function(seqid, input, output) {
  var args = new stuff_plan_management_confirm_deliver_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.confirm_deliver.length === 4) {
    Q.fcall(this._handler.confirm_deliver.bind(this._handler),
      args.plan_id,
      args.ssid,
      args.deliver_infos,
      args.reason
    ).then(function(result) {
      var result_obj = new stuff_plan_management_confirm_deliver_result({success: result});
      output.writeMessageBegin("confirm_deliver", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_confirm_deliver_result(err);
        output.writeMessageBegin("confirm_deliver", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirm_deliver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.confirm_deliver(args.plan_id, args.ssid, args.deliver_infos, args.reason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_confirm_deliver_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("confirm_deliver", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("confirm_deliver", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_export_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_export_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.export_plan.length === 2) {
    Q.fcall(this._handler.export_plan.bind(this._handler),
      args.ssid,
      args.plan_ids
    ).then(function(result) {
      var result_obj = new stuff_plan_management_export_plan_result({success: result});
      output.writeMessageBegin("export_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_export_plan_result(err);
        output.writeMessageBegin("export_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("export_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.export_plan(args.ssid, args.plan_ids, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_export_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("export_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("export_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_except_close = function(seqid, input, output) {
  var args = new stuff_plan_management_except_close_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.except_close.length === 3) {
    Q.fcall(this._handler.except_close.bind(this._handler),
      args.plan_id,
      args.ssid,
      args.reason
    ).then(function(result) {
      var result_obj = new stuff_plan_management_except_close_result({success: result});
      output.writeMessageBegin("except_close", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_except_close_result(err);
        output.writeMessageBegin("except_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("except_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.except_close(args.plan_id, args.ssid, args.reason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_except_close_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("except_close", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("except_close", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_verify_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_verify_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verify_plan.length === 2) {
    Q.fcall(this._handler.verify_plan.bind(this._handler),
      args.plan,
      args.ssid
    ).then(function(result) {
      var result_obj = new stuff_plan_management_verify_plan_result({success: result});
      output.writeMessageBegin("verify_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_verify_plan_result(err);
        output.writeMessageBegin("verify_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verify_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.verify_plan(args.plan, args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_verify_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verify_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verify_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_send_file_via_email = function(seqid, input, output) {
  var args = new stuff_plan_management_send_file_via_email_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.send_file_via_email.length === 3) {
    Q.fcall(this._handler.send_file_via_email.bind(this._handler),
      args.ssid,
      args.filepath,
      args.email
    ).then(function(result) {
      var result_obj = new stuff_plan_management_send_file_via_email_result({success: result});
      output.writeMessageBegin("send_file_via_email", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_send_file_via_email_result(err);
        output.writeMessageBegin("send_file_via_email", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("send_file_via_email", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.send_file_via_email(args.ssid, args.filepath, args.email, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_send_file_via_email_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("send_file_via_email", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("send_file_via_email", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_reject_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_reject_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.reject_plan.length === 3) {
    Q.fcall(this._handler.reject_plan.bind(this._handler),
      args.plan_id,
      args.ssid,
      args.reject_reason
    ).then(function(result) {
      var result_obj = new stuff_plan_management_reject_plan_result({success: result});
      output.writeMessageBegin("reject_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_reject_plan_result(err);
        output.writeMessageBegin("reject_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reject_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.reject_plan(args.plan_id, args.ssid, args.reject_reason, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_reject_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("reject_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("reject_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_search_plan_by_driver_phone = function(seqid, input, output) {
  var args = new stuff_plan_management_search_plan_by_driver_phone_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.search_plan_by_driver_phone.length === 1) {
    Q.fcall(this._handler.search_plan_by_driver_phone.bind(this._handler),
      args.phone
    ).then(function(result) {
      var result_obj = new stuff_plan_management_search_plan_by_driver_phone_result({success: result});
      output.writeMessageBegin("search_plan_by_driver_phone", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_search_plan_by_driver_phone_result(err);
        output.writeMessageBegin("search_plan_by_driver_phone", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("search_plan_by_driver_phone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.search_plan_by_driver_phone(args.phone, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_search_plan_by_driver_phone_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("search_plan_by_driver_phone", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("search_plan_by_driver_phone", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_status_rule = function(seqid, input, output) {
  var args = new stuff_plan_management_get_status_rule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_status_rule.length === 1) {
    Q.fcall(this._handler.get_status_rule.bind(this._handler),
      args.plan_id
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_status_rule_result({success: result});
      output.writeMessageBegin("get_status_rule", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_status_rule_result(err);
        output.writeMessageBegin("get_status_rule", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_status_rule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_status_rule(args.plan_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_status_rule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_status_rule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_status_rule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_change_rule = function(seqid, input, output) {
  var args = new stuff_plan_management_get_change_rule_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_change_rule.length === 2) {
    Q.fcall(this._handler.get_change_rule.bind(this._handler),
      args.ssid,
      args.plan_id
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_change_rule_result({success: result});
      output.writeMessageBegin("get_change_rule", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_change_rule_result(err);
        output.writeMessageBegin("get_change_rule", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_change_rule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_change_rule(args.ssid, args.plan_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_change_rule_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_change_rule", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_change_rule", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_clean_unclose_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_clean_unclose_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clean_unclose_plan.length === 0) {
    Q.fcall(this._handler.clean_unclose_plan.bind(this._handler)
    ).then(function(result) {
      var result_obj = new stuff_plan_management_clean_unclose_plan_result({success: result});
      output.writeMessageBegin("clean_unclose_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_clean_unclose_plan_result(err);
        output.writeMessageBegin("clean_unclose_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clean_unclose_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.clean_unclose_plan(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_clean_unclose_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clean_unclose_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clean_unclose_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_today_statistics = function(seqid, input, output) {
  var args = new stuff_plan_management_get_today_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_today_statistics.length === 1) {
    Q.fcall(this._handler.get_today_statistics.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_today_statistics_result({success: result});
      output.writeMessageBegin("get_today_statistics", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_today_statistics_result(err);
        output.writeMessageBegin("get_today_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_today_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_today_statistics(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_today_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_today_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_today_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_plan_created_by_user = function(seqid, input, output) {
  var args = new stuff_plan_management_plan_created_by_user_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.plan_created_by_user.length === 2) {
    Q.fcall(this._handler.plan_created_by_user.bind(this._handler),
      args.ssid,
      args.plan_id
    ).then(function(result) {
      var result_obj = new stuff_plan_management_plan_created_by_user_result({success: result});
      output.writeMessageBegin("plan_created_by_user", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_plan_created_by_user_result(err);
        output.writeMessageBegin("plan_created_by_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("plan_created_by_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.plan_created_by_user(args.ssid, args.plan_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_plan_created_by_user_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("plan_created_by_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("plan_created_by_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_export_plan_by_plan_date = function(seqid, input, output) {
  var args = new stuff_plan_management_export_plan_by_plan_date_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.export_plan_by_plan_date.length === 3) {
    Q.fcall(this._handler.export_plan_by_plan_date.bind(this._handler),
      args.ssid,
      args.plan_date,
      args.create_date
    ).then(function(result) {
      var result_obj = new stuff_plan_management_export_plan_by_plan_date_result({success: result});
      output.writeMessageBegin("export_plan_by_plan_date", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_export_plan_by_plan_date_result(err);
        output.writeMessageBegin("export_plan_by_plan_date", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("export_plan_by_plan_date", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.export_plan_by_plan_date(args.ssid, args.plan_date, args.create_date, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_export_plan_by_plan_date_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("export_plan_by_plan_date", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("export_plan_by_plan_date", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_export_plan_by_create_date = function(seqid, input, output) {
  var args = new stuff_plan_management_export_plan_by_create_date_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.export_plan_by_create_date.length === 3) {
    Q.fcall(this._handler.export_plan_by_create_date.bind(this._handler),
      args.ssid,
      args.begin_date,
      args.end_date
    ).then(function(result) {
      var result_obj = new stuff_plan_management_export_plan_by_create_date_result({success: result});
      output.writeMessageBegin("export_plan_by_create_date", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_export_plan_by_create_date_result(err);
        output.writeMessageBegin("export_plan_by_create_date", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("export_plan_by_create_date", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.export_plan_by_create_date(args.ssid, args.begin_date, args.end_date, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_export_plan_by_create_date_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("export_plan_by_create_date", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("export_plan_by_create_date", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_search_plan_by_vichele_number = function(seqid, input, output) {
  var args = new stuff_plan_management_search_plan_by_vichele_number_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.search_plan_by_vichele_number.length === 2) {
    Q.fcall(this._handler.search_plan_by_vichele_number.bind(this._handler),
      args.ssid,
      args.vichele_number
    ).then(function(result) {
      var result_obj = new stuff_plan_management_search_plan_by_vichele_number_result({success: result});
      output.writeMessageBegin("search_plan_by_vichele_number", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_search_plan_by_vichele_number_result(err);
        output.writeMessageBegin("search_plan_by_vichele_number", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("search_plan_by_vichele_number", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.search_plan_by_vichele_number(args.ssid, args.vichele_number, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_search_plan_by_vichele_number_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("search_plan_by_vichele_number", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("search_plan_by_vichele_number", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_tomorrow_statistics = function(seqid, input, output) {
  var args = new stuff_plan_management_get_tomorrow_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_tomorrow_statistics.length === 1) {
    Q.fcall(this._handler.get_tomorrow_statistics.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_tomorrow_statistics_result({success: result});
      output.writeMessageBegin("get_tomorrow_statistics", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_tomorrow_statistics_result(err);
        output.writeMessageBegin("get_tomorrow_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tomorrow_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_tomorrow_statistics(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_tomorrow_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_tomorrow_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_tomorrow_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_company_brief = function(seqid, input, output) {
  var args = new stuff_plan_management_get_company_brief_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_company_brief.length === 1) {
    Q.fcall(this._handler.get_company_brief.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_company_brief_result({success: result});
      output.writeMessageBegin("get_company_brief", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_company_brief_result(err);
        output.writeMessageBegin("get_company_brief", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_brief", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_company_brief(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_company_brief_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_company_brief", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_brief", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_push_user_pay = function(seqid, input, output) {
  var args = new stuff_plan_management_push_user_pay_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.push_user_pay.length === 2) {
    Q.fcall(this._handler.push_user_pay.bind(this._handler),
      args.ssid,
      args.plan_id
    ).then(function(result) {
      var result_obj = new stuff_plan_management_push_user_pay_result({success: result});
      output.writeMessageBegin("push_user_pay", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_push_user_pay_result(err);
        output.writeMessageBegin("push_user_pay", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("push_user_pay", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.push_user_pay(args.ssid, args.plan_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_push_user_pay_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("push_user_pay", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("push_user_pay", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_today_transformation = function(seqid, input, output) {
  var args = new stuff_plan_management_get_today_transformation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_today_transformation.length === 1) {
    Q.fcall(this._handler.get_today_transformation.bind(this._handler),
      args.company_name
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_today_transformation_result({success: result});
      output.writeMessageBegin("get_today_transformation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_today_transformation_result(err);
        output.writeMessageBegin("get_today_transformation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_today_transformation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_today_transformation(args.company_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_today_transformation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_today_transformation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_today_transformation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_get_count_by_status = function(seqid, input, output) {
  var args = new stuff_plan_management_get_count_by_status_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_count_by_status.length === 2) {
    Q.fcall(this._handler.get_count_by_status.bind(this._handler),
      args.ssid,
      args.status
    ).then(function(result) {
      var result_obj = new stuff_plan_management_get_count_by_status_result({success: result});
      output.writeMessageBegin("get_count_by_status", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_get_count_by_status_result(err);
        output.writeMessageBegin("get_count_by_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_count_by_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_count_by_status(args.ssid, args.status, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_get_count_by_status_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_count_by_status", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_count_by_status", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_plan_managementProcessor.prototype.process_cancel_vichele_from_plan = function(seqid, input, output) {
  var args = new stuff_plan_management_cancel_vichele_from_plan_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.cancel_vichele_from_plan.length === 2) {
    Q.fcall(this._handler.cancel_vichele_from_plan.bind(this._handler),
      args.ssid,
      args.ids
    ).then(function(result) {
      var result_obj = new stuff_plan_management_cancel_vichele_from_plan_result({success: result});
      output.writeMessageBegin("cancel_vichele_from_plan", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_plan_management_cancel_vichele_from_plan_result(err);
        output.writeMessageBegin("cancel_vichele_from_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_vichele_from_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.cancel_vichele_from_plan(args.ssid, args.ids, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_plan_management_cancel_vichele_from_plan_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("cancel_vichele_from_plan", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("cancel_vichele_from_plan", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
