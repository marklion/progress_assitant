/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef stuff_plan_management_H
#define stuff_plan_management_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "idl_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class stuff_plan_managementIf {
 public:
  virtual ~stuff_plan_managementIf() {}
  virtual int64_t create_plan(const stuff_plan& plan, const std::string& ssid, const std::string& proxy_company) = 0;
  virtual void get_created_plan(std::vector<plan_status> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name) = 0;
  virtual void get_company_plan(std::vector<plan_status> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name) = 0;
  virtual void get_plan(stuff_plan& _return, const int64_t plan_id) = 0;
  virtual bool update_plan(const stuff_plan& plan, const std::string& ssid) = 0;
  virtual bool confirm_plan(const int64_t plan_id, const std::string& ssid, const std::string& comment) = 0;
  virtual bool confirm_pay(const int64_t plan_id, const std::string& ssid, const std::string& comment) = 0;
  virtual bool confirm_deliver(const int64_t plan_id, const std::string& ssid, const std::vector<deliver_info> & deliver_infos, const std::string& reason) = 0;
  virtual void export_plan(std::string& _return, const std::string& ssid, const std::vector<int64_t> & plan_ids) = 0;
  virtual bool except_close(const int64_t plan_id, const std::string& ssid, const std::string& reason) = 0;
  virtual void verify_plan(std::string& _return, const stuff_plan& plan, const std::string& ssid) = 0;
  virtual bool send_file_via_email(const std::string& ssid, const std::string& filepath, const std::string& email) = 0;
  virtual bool reject_plan(const int64_t plan_id, const std::string& ssid, const std::string& reject_reason) = 0;
  virtual void search_plan_by_driver_phone(std::vector<plan_number_id> & _return, const std::string& phone) = 0;
  virtual void get_status_rule(std::vector<plan_status_rule> & _return, const int64_t plan_id) = 0;
  virtual void get_change_rule(std::vector<bool> & _return, const std::string& ssid, const int64_t plan_id) = 0;
  virtual void clean_unclose_plan() = 0;
  virtual void get_today_statistics(std::vector<vichele_statistics> & _return, const std::string& ssid) = 0;
  virtual bool plan_created_by_user(const std::string& ssid, const int64_t plan_id) = 0;
  virtual void export_plan_by_plan_date(std::string& _return, const std::string& ssid, const std::string& plan_date, const std::string& create_date) = 0;
  virtual void export_plan_by_create_date(std::string& _return, const std::string& ssid, const int64_t begin_date, const int64_t end_date) = 0;
  virtual void search_plan_by_vichele_number(std::vector<vichele_search_result> & _return, const std::string& ssid, const std::string& vichele_number) = 0;
  virtual void get_tomorrow_statistics(std::vector<vichele_statistics> & _return, const std::string& ssid) = 0;
  virtual void get_company_brief(company_plan_brief& _return, const std::string& ssid) = 0;
  virtual bool push_user_pay(const std::string& ssid, const int64_t plan_id) = 0;
  virtual int64_t get_count_by_status(const std::string& ssid, const int64_t status) = 0;
  virtual bool cancel_vichele_from_plan(const std::string& ssid, const std::vector<int64_t> & ids) = 0;
  virtual void driver_silent_login(std::string& _return, const std::string& code) = 0;
  virtual bool driver_silent_send_sms(const std::string& driver_phone) = 0;
  virtual void driver_silent_register(std::string& _return, const std::string& code, const std::string& driver_id, const std::string& driver_phone, const std::string& verify_code) = 0;
  virtual void driver_silent_unregister(const std::string& silent_id) = 0;
  virtual bool verify_driver_silent_login(const std::string& silent_id) = 0;
  virtual void get_today_driver_info(std::vector<today_driver_info> & _return, const std::string& silent_id) = 0;
  virtual void get_driver_info(driver_detail_info& _return, const std::string& silent_id) = 0;
  virtual bool register_vichele(const std::string& silent_id, const int64_t vichele_id) = 0;
  virtual bool unregister_vichele(const std::string& silent_id, const int64_t vichele_id) = 0;
  virtual bool multi_confirm_plan(const std::string& ssid, const std::vector<int64_t> & plan_ids) = 0;
  virtual bool change_driver(const std::string& ssid, const int64_t vichele_id, const std::string& driver_name, const std::string& driver_phone) = 0;
  virtual bool change_plan_price(const std::string& ssid, const std::vector<int64_t> & plan_id, const double new_price) = 0;
};

class stuff_plan_managementIfFactory {
 public:
  typedef stuff_plan_managementIf Handler;

  virtual ~stuff_plan_managementIfFactory() {}

  virtual stuff_plan_managementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(stuff_plan_managementIf* /* handler */) = 0;
};

class stuff_plan_managementIfSingletonFactory : virtual public stuff_plan_managementIfFactory {
 public:
  stuff_plan_managementIfSingletonFactory(const ::std::shared_ptr<stuff_plan_managementIf>& iface) : iface_(iface) {}
  virtual ~stuff_plan_managementIfSingletonFactory() {}

  virtual stuff_plan_managementIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(stuff_plan_managementIf* /* handler */) {}

 protected:
  ::std::shared_ptr<stuff_plan_managementIf> iface_;
};

class stuff_plan_managementNull : virtual public stuff_plan_managementIf {
 public:
  virtual ~stuff_plan_managementNull() {}
  int64_t create_plan(const stuff_plan& /* plan */, const std::string& /* ssid */, const std::string& /* proxy_company */) {
    int64_t _return = 0;
    return _return;
  }
  void get_created_plan(std::vector<plan_status> & /* _return */, const std::string& /* ssid */, const int64_t /* anchor */, const int64_t /* status */, const std::string& /* stuff_name */, const std::string& /* company_name */) {
    return;
  }
  void get_company_plan(std::vector<plan_status> & /* _return */, const std::string& /* ssid */, const int64_t /* anchor */, const int64_t /* status */, const std::string& /* stuff_name */, const std::string& /* company_name */) {
    return;
  }
  void get_plan(stuff_plan& /* _return */, const int64_t /* plan_id */) {
    return;
  }
  bool update_plan(const stuff_plan& /* plan */, const std::string& /* ssid */) {
    bool _return = false;
    return _return;
  }
  bool confirm_plan(const int64_t /* plan_id */, const std::string& /* ssid */, const std::string& /* comment */) {
    bool _return = false;
    return _return;
  }
  bool confirm_pay(const int64_t /* plan_id */, const std::string& /* ssid */, const std::string& /* comment */) {
    bool _return = false;
    return _return;
  }
  bool confirm_deliver(const int64_t /* plan_id */, const std::string& /* ssid */, const std::vector<deliver_info> & /* deliver_infos */, const std::string& /* reason */) {
    bool _return = false;
    return _return;
  }
  void export_plan(std::string& /* _return */, const std::string& /* ssid */, const std::vector<int64_t> & /* plan_ids */) {
    return;
  }
  bool except_close(const int64_t /* plan_id */, const std::string& /* ssid */, const std::string& /* reason */) {
    bool _return = false;
    return _return;
  }
  void verify_plan(std::string& /* _return */, const stuff_plan& /* plan */, const std::string& /* ssid */) {
    return;
  }
  bool send_file_via_email(const std::string& /* ssid */, const std::string& /* filepath */, const std::string& /* email */) {
    bool _return = false;
    return _return;
  }
  bool reject_plan(const int64_t /* plan_id */, const std::string& /* ssid */, const std::string& /* reject_reason */) {
    bool _return = false;
    return _return;
  }
  void search_plan_by_driver_phone(std::vector<plan_number_id> & /* _return */, const std::string& /* phone */) {
    return;
  }
  void get_status_rule(std::vector<plan_status_rule> & /* _return */, const int64_t /* plan_id */) {
    return;
  }
  void get_change_rule(std::vector<bool> & /* _return */, const std::string& /* ssid */, const int64_t /* plan_id */) {
    return;
  }
  void clean_unclose_plan() {
    return;
  }
  void get_today_statistics(std::vector<vichele_statistics> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  bool plan_created_by_user(const std::string& /* ssid */, const int64_t /* plan_id */) {
    bool _return = false;
    return _return;
  }
  void export_plan_by_plan_date(std::string& /* _return */, const std::string& /* ssid */, const std::string& /* plan_date */, const std::string& /* create_date */) {
    return;
  }
  void export_plan_by_create_date(std::string& /* _return */, const std::string& /* ssid */, const int64_t /* begin_date */, const int64_t /* end_date */) {
    return;
  }
  void search_plan_by_vichele_number(std::vector<vichele_search_result> & /* _return */, const std::string& /* ssid */, const std::string& /* vichele_number */) {
    return;
  }
  void get_tomorrow_statistics(std::vector<vichele_statistics> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  void get_company_brief(company_plan_brief& /* _return */, const std::string& /* ssid */) {
    return;
  }
  bool push_user_pay(const std::string& /* ssid */, const int64_t /* plan_id */) {
    bool _return = false;
    return _return;
  }
  int64_t get_count_by_status(const std::string& /* ssid */, const int64_t /* status */) {
    int64_t _return = 0;
    return _return;
  }
  bool cancel_vichele_from_plan(const std::string& /* ssid */, const std::vector<int64_t> & /* ids */) {
    bool _return = false;
    return _return;
  }
  void driver_silent_login(std::string& /* _return */, const std::string& /* code */) {
    return;
  }
  bool driver_silent_send_sms(const std::string& /* driver_phone */) {
    bool _return = false;
    return _return;
  }
  void driver_silent_register(std::string& /* _return */, const std::string& /* code */, const std::string& /* driver_id */, const std::string& /* driver_phone */, const std::string& /* verify_code */) {
    return;
  }
  void driver_silent_unregister(const std::string& /* silent_id */) {
    return;
  }
  bool verify_driver_silent_login(const std::string& /* silent_id */) {
    bool _return = false;
    return _return;
  }
  void get_today_driver_info(std::vector<today_driver_info> & /* _return */, const std::string& /* silent_id */) {
    return;
  }
  void get_driver_info(driver_detail_info& /* _return */, const std::string& /* silent_id */) {
    return;
  }
  bool register_vichele(const std::string& /* silent_id */, const int64_t /* vichele_id */) {
    bool _return = false;
    return _return;
  }
  bool unregister_vichele(const std::string& /* silent_id */, const int64_t /* vichele_id */) {
    bool _return = false;
    return _return;
  }
  bool multi_confirm_plan(const std::string& /* ssid */, const std::vector<int64_t> & /* plan_ids */) {
    bool _return = false;
    return _return;
  }
  bool change_driver(const std::string& /* ssid */, const int64_t /* vichele_id */, const std::string& /* driver_name */, const std::string& /* driver_phone */) {
    bool _return = false;
    return _return;
  }
  bool change_plan_price(const std::string& /* ssid */, const std::vector<int64_t> & /* plan_id */, const double /* new_price */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _stuff_plan_management_create_plan_args__isset {
  _stuff_plan_management_create_plan_args__isset() : plan(false), ssid(false), proxy_company(false) {}
  bool plan :1;
  bool ssid :1;
  bool proxy_company :1;
} _stuff_plan_management_create_plan_args__isset;

class stuff_plan_management_create_plan_args {
 public:

  stuff_plan_management_create_plan_args(const stuff_plan_management_create_plan_args&);
  stuff_plan_management_create_plan_args& operator=(const stuff_plan_management_create_plan_args&);
  stuff_plan_management_create_plan_args() : ssid(), proxy_company() {
  }

  virtual ~stuff_plan_management_create_plan_args() noexcept;
  stuff_plan plan;
  std::string ssid;
  std::string proxy_company;

  _stuff_plan_management_create_plan_args__isset __isset;

  void __set_plan(const stuff_plan& val);

  void __set_ssid(const std::string& val);

  void __set_proxy_company(const std::string& val);

  bool operator == (const stuff_plan_management_create_plan_args & rhs) const
  {
    if (!(plan == rhs.plan))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    if (!(proxy_company == rhs.proxy_company))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_create_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_create_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_create_plan_pargs {
 public:


  virtual ~stuff_plan_management_create_plan_pargs() noexcept;
  const stuff_plan* plan;
  const std::string* ssid;
  const std::string* proxy_company;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_create_plan_result__isset {
  _stuff_plan_management_create_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_create_plan_result__isset;

class stuff_plan_management_create_plan_result {
 public:

  stuff_plan_management_create_plan_result(const stuff_plan_management_create_plan_result&);
  stuff_plan_management_create_plan_result& operator=(const stuff_plan_management_create_plan_result&);
  stuff_plan_management_create_plan_result() : success(0) {
  }

  virtual ~stuff_plan_management_create_plan_result() noexcept;
  int64_t success;
  gen_exp e;

  _stuff_plan_management_create_plan_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_create_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_create_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_create_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_create_plan_presult__isset {
  _stuff_plan_management_create_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_create_plan_presult__isset;

class stuff_plan_management_create_plan_presult {
 public:


  virtual ~stuff_plan_management_create_plan_presult() noexcept;
  int64_t* success;
  gen_exp e;

  _stuff_plan_management_create_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_created_plan_args__isset {
  _stuff_plan_management_get_created_plan_args__isset() : ssid(false), anchor(false), status(false), stuff_name(false), company_name(false) {}
  bool ssid :1;
  bool anchor :1;
  bool status :1;
  bool stuff_name :1;
  bool company_name :1;
} _stuff_plan_management_get_created_plan_args__isset;

class stuff_plan_management_get_created_plan_args {
 public:

  stuff_plan_management_get_created_plan_args(const stuff_plan_management_get_created_plan_args&);
  stuff_plan_management_get_created_plan_args& operator=(const stuff_plan_management_get_created_plan_args&);
  stuff_plan_management_get_created_plan_args() : ssid(), anchor(0), status(0), stuff_name(), company_name() {
  }

  virtual ~stuff_plan_management_get_created_plan_args() noexcept;
  std::string ssid;
  int64_t anchor;
  int64_t status;
  std::string stuff_name;
  std::string company_name;

  _stuff_plan_management_get_created_plan_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_anchor(const int64_t val);

  void __set_status(const int64_t val);

  void __set_stuff_name(const std::string& val);

  void __set_company_name(const std::string& val);

  bool operator == (const stuff_plan_management_get_created_plan_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(anchor == rhs.anchor))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(stuff_name == rhs.stuff_name))
      return false;
    if (!(company_name == rhs.company_name))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_created_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_created_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_created_plan_pargs {
 public:


  virtual ~stuff_plan_management_get_created_plan_pargs() noexcept;
  const std::string* ssid;
  const int64_t* anchor;
  const int64_t* status;
  const std::string* stuff_name;
  const std::string* company_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_created_plan_result__isset {
  _stuff_plan_management_get_created_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_created_plan_result__isset;

class stuff_plan_management_get_created_plan_result {
 public:

  stuff_plan_management_get_created_plan_result(const stuff_plan_management_get_created_plan_result&);
  stuff_plan_management_get_created_plan_result& operator=(const stuff_plan_management_get_created_plan_result&);
  stuff_plan_management_get_created_plan_result() {
  }

  virtual ~stuff_plan_management_get_created_plan_result() noexcept;
  std::vector<plan_status>  success;
  gen_exp e;

  _stuff_plan_management_get_created_plan_result__isset __isset;

  void __set_success(const std::vector<plan_status> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_created_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_created_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_created_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_created_plan_presult__isset {
  _stuff_plan_management_get_created_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_created_plan_presult__isset;

class stuff_plan_management_get_created_plan_presult {
 public:


  virtual ~stuff_plan_management_get_created_plan_presult() noexcept;
  std::vector<plan_status> * success;
  gen_exp e;

  _stuff_plan_management_get_created_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_company_plan_args__isset {
  _stuff_plan_management_get_company_plan_args__isset() : ssid(false), anchor(false), status(false), stuff_name(false), company_name(false) {}
  bool ssid :1;
  bool anchor :1;
  bool status :1;
  bool stuff_name :1;
  bool company_name :1;
} _stuff_plan_management_get_company_plan_args__isset;

class stuff_plan_management_get_company_plan_args {
 public:

  stuff_plan_management_get_company_plan_args(const stuff_plan_management_get_company_plan_args&);
  stuff_plan_management_get_company_plan_args& operator=(const stuff_plan_management_get_company_plan_args&);
  stuff_plan_management_get_company_plan_args() : ssid(), anchor(0), status(0), stuff_name(), company_name() {
  }

  virtual ~stuff_plan_management_get_company_plan_args() noexcept;
  std::string ssid;
  int64_t anchor;
  int64_t status;
  std::string stuff_name;
  std::string company_name;

  _stuff_plan_management_get_company_plan_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_anchor(const int64_t val);

  void __set_status(const int64_t val);

  void __set_stuff_name(const std::string& val);

  void __set_company_name(const std::string& val);

  bool operator == (const stuff_plan_management_get_company_plan_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(anchor == rhs.anchor))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(stuff_name == rhs.stuff_name))
      return false;
    if (!(company_name == rhs.company_name))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_company_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_company_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_company_plan_pargs {
 public:


  virtual ~stuff_plan_management_get_company_plan_pargs() noexcept;
  const std::string* ssid;
  const int64_t* anchor;
  const int64_t* status;
  const std::string* stuff_name;
  const std::string* company_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_company_plan_result__isset {
  _stuff_plan_management_get_company_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_company_plan_result__isset;

class stuff_plan_management_get_company_plan_result {
 public:

  stuff_plan_management_get_company_plan_result(const stuff_plan_management_get_company_plan_result&);
  stuff_plan_management_get_company_plan_result& operator=(const stuff_plan_management_get_company_plan_result&);
  stuff_plan_management_get_company_plan_result() {
  }

  virtual ~stuff_plan_management_get_company_plan_result() noexcept;
  std::vector<plan_status>  success;
  gen_exp e;

  _stuff_plan_management_get_company_plan_result__isset __isset;

  void __set_success(const std::vector<plan_status> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_company_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_company_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_company_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_company_plan_presult__isset {
  _stuff_plan_management_get_company_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_company_plan_presult__isset;

class stuff_plan_management_get_company_plan_presult {
 public:


  virtual ~stuff_plan_management_get_company_plan_presult() noexcept;
  std::vector<plan_status> * success;
  gen_exp e;

  _stuff_plan_management_get_company_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_plan_args__isset {
  _stuff_plan_management_get_plan_args__isset() : plan_id(false) {}
  bool plan_id :1;
} _stuff_plan_management_get_plan_args__isset;

class stuff_plan_management_get_plan_args {
 public:

  stuff_plan_management_get_plan_args(const stuff_plan_management_get_plan_args&);
  stuff_plan_management_get_plan_args& operator=(const stuff_plan_management_get_plan_args&);
  stuff_plan_management_get_plan_args() : plan_id(0) {
  }

  virtual ~stuff_plan_management_get_plan_args() noexcept;
  int64_t plan_id;

  _stuff_plan_management_get_plan_args__isset __isset;

  void __set_plan_id(const int64_t val);

  bool operator == (const stuff_plan_management_get_plan_args & rhs) const
  {
    if (!(plan_id == rhs.plan_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_plan_pargs {
 public:


  virtual ~stuff_plan_management_get_plan_pargs() noexcept;
  const int64_t* plan_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_plan_result__isset {
  _stuff_plan_management_get_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_plan_result__isset;

class stuff_plan_management_get_plan_result {
 public:

  stuff_plan_management_get_plan_result(const stuff_plan_management_get_plan_result&);
  stuff_plan_management_get_plan_result& operator=(const stuff_plan_management_get_plan_result&);
  stuff_plan_management_get_plan_result() {
  }

  virtual ~stuff_plan_management_get_plan_result() noexcept;
  stuff_plan success;
  gen_exp e;

  _stuff_plan_management_get_plan_result__isset __isset;

  void __set_success(const stuff_plan& val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_plan_presult__isset {
  _stuff_plan_management_get_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_plan_presult__isset;

class stuff_plan_management_get_plan_presult {
 public:


  virtual ~stuff_plan_management_get_plan_presult() noexcept;
  stuff_plan* success;
  gen_exp e;

  _stuff_plan_management_get_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_update_plan_args__isset {
  _stuff_plan_management_update_plan_args__isset() : plan(false), ssid(false) {}
  bool plan :1;
  bool ssid :1;
} _stuff_plan_management_update_plan_args__isset;

class stuff_plan_management_update_plan_args {
 public:

  stuff_plan_management_update_plan_args(const stuff_plan_management_update_plan_args&);
  stuff_plan_management_update_plan_args& operator=(const stuff_plan_management_update_plan_args&);
  stuff_plan_management_update_plan_args() : ssid() {
  }

  virtual ~stuff_plan_management_update_plan_args() noexcept;
  stuff_plan plan;
  std::string ssid;

  _stuff_plan_management_update_plan_args__isset __isset;

  void __set_plan(const stuff_plan& val);

  void __set_ssid(const std::string& val);

  bool operator == (const stuff_plan_management_update_plan_args & rhs) const
  {
    if (!(plan == rhs.plan))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_update_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_update_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_update_plan_pargs {
 public:


  virtual ~stuff_plan_management_update_plan_pargs() noexcept;
  const stuff_plan* plan;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_update_plan_result__isset {
  _stuff_plan_management_update_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_update_plan_result__isset;

class stuff_plan_management_update_plan_result {
 public:

  stuff_plan_management_update_plan_result(const stuff_plan_management_update_plan_result&);
  stuff_plan_management_update_plan_result& operator=(const stuff_plan_management_update_plan_result&);
  stuff_plan_management_update_plan_result() : success(0) {
  }

  virtual ~stuff_plan_management_update_plan_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_update_plan_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_update_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_update_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_update_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_update_plan_presult__isset {
  _stuff_plan_management_update_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_update_plan_presult__isset;

class stuff_plan_management_update_plan_presult {
 public:


  virtual ~stuff_plan_management_update_plan_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_update_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_confirm_plan_args__isset {
  _stuff_plan_management_confirm_plan_args__isset() : plan_id(false), ssid(false), comment(false) {}
  bool plan_id :1;
  bool ssid :1;
  bool comment :1;
} _stuff_plan_management_confirm_plan_args__isset;

class stuff_plan_management_confirm_plan_args {
 public:

  stuff_plan_management_confirm_plan_args(const stuff_plan_management_confirm_plan_args&);
  stuff_plan_management_confirm_plan_args& operator=(const stuff_plan_management_confirm_plan_args&);
  stuff_plan_management_confirm_plan_args() : plan_id(0), ssid(), comment() {
  }

  virtual ~stuff_plan_management_confirm_plan_args() noexcept;
  int64_t plan_id;
  std::string ssid;
  std::string comment;

  _stuff_plan_management_confirm_plan_args__isset __isset;

  void __set_plan_id(const int64_t val);

  void __set_ssid(const std::string& val);

  void __set_comment(const std::string& val);

  bool operator == (const stuff_plan_management_confirm_plan_args & rhs) const
  {
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_confirm_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_confirm_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_confirm_plan_pargs {
 public:


  virtual ~stuff_plan_management_confirm_plan_pargs() noexcept;
  const int64_t* plan_id;
  const std::string* ssid;
  const std::string* comment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_confirm_plan_result__isset {
  _stuff_plan_management_confirm_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_confirm_plan_result__isset;

class stuff_plan_management_confirm_plan_result {
 public:

  stuff_plan_management_confirm_plan_result(const stuff_plan_management_confirm_plan_result&);
  stuff_plan_management_confirm_plan_result& operator=(const stuff_plan_management_confirm_plan_result&);
  stuff_plan_management_confirm_plan_result() : success(0) {
  }

  virtual ~stuff_plan_management_confirm_plan_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_confirm_plan_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_confirm_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_confirm_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_confirm_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_confirm_plan_presult__isset {
  _stuff_plan_management_confirm_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_confirm_plan_presult__isset;

class stuff_plan_management_confirm_plan_presult {
 public:


  virtual ~stuff_plan_management_confirm_plan_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_confirm_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_confirm_pay_args__isset {
  _stuff_plan_management_confirm_pay_args__isset() : plan_id(false), ssid(false), comment(false) {}
  bool plan_id :1;
  bool ssid :1;
  bool comment :1;
} _stuff_plan_management_confirm_pay_args__isset;

class stuff_plan_management_confirm_pay_args {
 public:

  stuff_plan_management_confirm_pay_args(const stuff_plan_management_confirm_pay_args&);
  stuff_plan_management_confirm_pay_args& operator=(const stuff_plan_management_confirm_pay_args&);
  stuff_plan_management_confirm_pay_args() : plan_id(0), ssid(), comment() {
  }

  virtual ~stuff_plan_management_confirm_pay_args() noexcept;
  int64_t plan_id;
  std::string ssid;
  std::string comment;

  _stuff_plan_management_confirm_pay_args__isset __isset;

  void __set_plan_id(const int64_t val);

  void __set_ssid(const std::string& val);

  void __set_comment(const std::string& val);

  bool operator == (const stuff_plan_management_confirm_pay_args & rhs) const
  {
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    if (!(comment == rhs.comment))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_confirm_pay_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_confirm_pay_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_confirm_pay_pargs {
 public:


  virtual ~stuff_plan_management_confirm_pay_pargs() noexcept;
  const int64_t* plan_id;
  const std::string* ssid;
  const std::string* comment;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_confirm_pay_result__isset {
  _stuff_plan_management_confirm_pay_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_confirm_pay_result__isset;

class stuff_plan_management_confirm_pay_result {
 public:

  stuff_plan_management_confirm_pay_result(const stuff_plan_management_confirm_pay_result&);
  stuff_plan_management_confirm_pay_result& operator=(const stuff_plan_management_confirm_pay_result&);
  stuff_plan_management_confirm_pay_result() : success(0) {
  }

  virtual ~stuff_plan_management_confirm_pay_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_confirm_pay_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_confirm_pay_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_confirm_pay_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_confirm_pay_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_confirm_pay_presult__isset {
  _stuff_plan_management_confirm_pay_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_confirm_pay_presult__isset;

class stuff_plan_management_confirm_pay_presult {
 public:


  virtual ~stuff_plan_management_confirm_pay_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_confirm_pay_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_confirm_deliver_args__isset {
  _stuff_plan_management_confirm_deliver_args__isset() : plan_id(false), ssid(false), deliver_infos(false), reason(false) {}
  bool plan_id :1;
  bool ssid :1;
  bool deliver_infos :1;
  bool reason :1;
} _stuff_plan_management_confirm_deliver_args__isset;

class stuff_plan_management_confirm_deliver_args {
 public:

  stuff_plan_management_confirm_deliver_args(const stuff_plan_management_confirm_deliver_args&);
  stuff_plan_management_confirm_deliver_args& operator=(const stuff_plan_management_confirm_deliver_args&);
  stuff_plan_management_confirm_deliver_args() : plan_id(0), ssid(), reason() {
  }

  virtual ~stuff_plan_management_confirm_deliver_args() noexcept;
  int64_t plan_id;
  std::string ssid;
  std::vector<deliver_info>  deliver_infos;
  std::string reason;

  _stuff_plan_management_confirm_deliver_args__isset __isset;

  void __set_plan_id(const int64_t val);

  void __set_ssid(const std::string& val);

  void __set_deliver_infos(const std::vector<deliver_info> & val);

  void __set_reason(const std::string& val);

  bool operator == (const stuff_plan_management_confirm_deliver_args & rhs) const
  {
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    if (!(deliver_infos == rhs.deliver_infos))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_confirm_deliver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_confirm_deliver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_confirm_deliver_pargs {
 public:


  virtual ~stuff_plan_management_confirm_deliver_pargs() noexcept;
  const int64_t* plan_id;
  const std::string* ssid;
  const std::vector<deliver_info> * deliver_infos;
  const std::string* reason;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_confirm_deliver_result__isset {
  _stuff_plan_management_confirm_deliver_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_confirm_deliver_result__isset;

class stuff_plan_management_confirm_deliver_result {
 public:

  stuff_plan_management_confirm_deliver_result(const stuff_plan_management_confirm_deliver_result&);
  stuff_plan_management_confirm_deliver_result& operator=(const stuff_plan_management_confirm_deliver_result&);
  stuff_plan_management_confirm_deliver_result() : success(0) {
  }

  virtual ~stuff_plan_management_confirm_deliver_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_confirm_deliver_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_confirm_deliver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_confirm_deliver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_confirm_deliver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_confirm_deliver_presult__isset {
  _stuff_plan_management_confirm_deliver_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_confirm_deliver_presult__isset;

class stuff_plan_management_confirm_deliver_presult {
 public:


  virtual ~stuff_plan_management_confirm_deliver_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_confirm_deliver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_export_plan_args__isset {
  _stuff_plan_management_export_plan_args__isset() : ssid(false), plan_ids(false) {}
  bool ssid :1;
  bool plan_ids :1;
} _stuff_plan_management_export_plan_args__isset;

class stuff_plan_management_export_plan_args {
 public:

  stuff_plan_management_export_plan_args(const stuff_plan_management_export_plan_args&);
  stuff_plan_management_export_plan_args& operator=(const stuff_plan_management_export_plan_args&);
  stuff_plan_management_export_plan_args() : ssid() {
  }

  virtual ~stuff_plan_management_export_plan_args() noexcept;
  std::string ssid;
  std::vector<int64_t>  plan_ids;

  _stuff_plan_management_export_plan_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_plan_ids(const std::vector<int64_t> & val);

  bool operator == (const stuff_plan_management_export_plan_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(plan_ids == rhs.plan_ids))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_export_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_export_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_export_plan_pargs {
 public:


  virtual ~stuff_plan_management_export_plan_pargs() noexcept;
  const std::string* ssid;
  const std::vector<int64_t> * plan_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_export_plan_result__isset {
  _stuff_plan_management_export_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_export_plan_result__isset;

class stuff_plan_management_export_plan_result {
 public:

  stuff_plan_management_export_plan_result(const stuff_plan_management_export_plan_result&);
  stuff_plan_management_export_plan_result& operator=(const stuff_plan_management_export_plan_result&);
  stuff_plan_management_export_plan_result() : success() {
  }

  virtual ~stuff_plan_management_export_plan_result() noexcept;
  std::string success;
  gen_exp e;

  _stuff_plan_management_export_plan_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_export_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_export_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_export_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_export_plan_presult__isset {
  _stuff_plan_management_export_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_export_plan_presult__isset;

class stuff_plan_management_export_plan_presult {
 public:


  virtual ~stuff_plan_management_export_plan_presult() noexcept;
  std::string* success;
  gen_exp e;

  _stuff_plan_management_export_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_except_close_args__isset {
  _stuff_plan_management_except_close_args__isset() : plan_id(false), ssid(false), reason(false) {}
  bool plan_id :1;
  bool ssid :1;
  bool reason :1;
} _stuff_plan_management_except_close_args__isset;

class stuff_plan_management_except_close_args {
 public:

  stuff_plan_management_except_close_args(const stuff_plan_management_except_close_args&);
  stuff_plan_management_except_close_args& operator=(const stuff_plan_management_except_close_args&);
  stuff_plan_management_except_close_args() : plan_id(0), ssid(), reason() {
  }

  virtual ~stuff_plan_management_except_close_args() noexcept;
  int64_t plan_id;
  std::string ssid;
  std::string reason;

  _stuff_plan_management_except_close_args__isset __isset;

  void __set_plan_id(const int64_t val);

  void __set_ssid(const std::string& val);

  void __set_reason(const std::string& val);

  bool operator == (const stuff_plan_management_except_close_args & rhs) const
  {
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    if (!(reason == rhs.reason))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_except_close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_except_close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_except_close_pargs {
 public:


  virtual ~stuff_plan_management_except_close_pargs() noexcept;
  const int64_t* plan_id;
  const std::string* ssid;
  const std::string* reason;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_except_close_result__isset {
  _stuff_plan_management_except_close_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_except_close_result__isset;

class stuff_plan_management_except_close_result {
 public:

  stuff_plan_management_except_close_result(const stuff_plan_management_except_close_result&);
  stuff_plan_management_except_close_result& operator=(const stuff_plan_management_except_close_result&);
  stuff_plan_management_except_close_result() : success(0) {
  }

  virtual ~stuff_plan_management_except_close_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_except_close_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_except_close_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_except_close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_except_close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_except_close_presult__isset {
  _stuff_plan_management_except_close_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_except_close_presult__isset;

class stuff_plan_management_except_close_presult {
 public:


  virtual ~stuff_plan_management_except_close_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_except_close_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_verify_plan_args__isset {
  _stuff_plan_management_verify_plan_args__isset() : plan(false), ssid(false) {}
  bool plan :1;
  bool ssid :1;
} _stuff_plan_management_verify_plan_args__isset;

class stuff_plan_management_verify_plan_args {
 public:

  stuff_plan_management_verify_plan_args(const stuff_plan_management_verify_plan_args&);
  stuff_plan_management_verify_plan_args& operator=(const stuff_plan_management_verify_plan_args&);
  stuff_plan_management_verify_plan_args() : ssid() {
  }

  virtual ~stuff_plan_management_verify_plan_args() noexcept;
  stuff_plan plan;
  std::string ssid;

  _stuff_plan_management_verify_plan_args__isset __isset;

  void __set_plan(const stuff_plan& val);

  void __set_ssid(const std::string& val);

  bool operator == (const stuff_plan_management_verify_plan_args & rhs) const
  {
    if (!(plan == rhs.plan))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_verify_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_verify_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_verify_plan_pargs {
 public:


  virtual ~stuff_plan_management_verify_plan_pargs() noexcept;
  const stuff_plan* plan;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_verify_plan_result__isset {
  _stuff_plan_management_verify_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_verify_plan_result__isset;

class stuff_plan_management_verify_plan_result {
 public:

  stuff_plan_management_verify_plan_result(const stuff_plan_management_verify_plan_result&);
  stuff_plan_management_verify_plan_result& operator=(const stuff_plan_management_verify_plan_result&);
  stuff_plan_management_verify_plan_result() : success() {
  }

  virtual ~stuff_plan_management_verify_plan_result() noexcept;
  std::string success;
  gen_exp e;

  _stuff_plan_management_verify_plan_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_verify_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_verify_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_verify_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_verify_plan_presult__isset {
  _stuff_plan_management_verify_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_verify_plan_presult__isset;

class stuff_plan_management_verify_plan_presult {
 public:


  virtual ~stuff_plan_management_verify_plan_presult() noexcept;
  std::string* success;
  gen_exp e;

  _stuff_plan_management_verify_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_send_file_via_email_args__isset {
  _stuff_plan_management_send_file_via_email_args__isset() : ssid(false), filepath(false), email(false) {}
  bool ssid :1;
  bool filepath :1;
  bool email :1;
} _stuff_plan_management_send_file_via_email_args__isset;

class stuff_plan_management_send_file_via_email_args {
 public:

  stuff_plan_management_send_file_via_email_args(const stuff_plan_management_send_file_via_email_args&);
  stuff_plan_management_send_file_via_email_args& operator=(const stuff_plan_management_send_file_via_email_args&);
  stuff_plan_management_send_file_via_email_args() : ssid(), filepath(), email() {
  }

  virtual ~stuff_plan_management_send_file_via_email_args() noexcept;
  std::string ssid;
  std::string filepath;
  std::string email;

  _stuff_plan_management_send_file_via_email_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_filepath(const std::string& val);

  void __set_email(const std::string& val);

  bool operator == (const stuff_plan_management_send_file_via_email_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(filepath == rhs.filepath))
      return false;
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_send_file_via_email_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_send_file_via_email_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_send_file_via_email_pargs {
 public:


  virtual ~stuff_plan_management_send_file_via_email_pargs() noexcept;
  const std::string* ssid;
  const std::string* filepath;
  const std::string* email;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_send_file_via_email_result__isset {
  _stuff_plan_management_send_file_via_email_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_send_file_via_email_result__isset;

class stuff_plan_management_send_file_via_email_result {
 public:

  stuff_plan_management_send_file_via_email_result(const stuff_plan_management_send_file_via_email_result&);
  stuff_plan_management_send_file_via_email_result& operator=(const stuff_plan_management_send_file_via_email_result&);
  stuff_plan_management_send_file_via_email_result() : success(0) {
  }

  virtual ~stuff_plan_management_send_file_via_email_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_send_file_via_email_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_send_file_via_email_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_send_file_via_email_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_send_file_via_email_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_send_file_via_email_presult__isset {
  _stuff_plan_management_send_file_via_email_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_send_file_via_email_presult__isset;

class stuff_plan_management_send_file_via_email_presult {
 public:


  virtual ~stuff_plan_management_send_file_via_email_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_send_file_via_email_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_reject_plan_args__isset {
  _stuff_plan_management_reject_plan_args__isset() : plan_id(false), ssid(false), reject_reason(false) {}
  bool plan_id :1;
  bool ssid :1;
  bool reject_reason :1;
} _stuff_plan_management_reject_plan_args__isset;

class stuff_plan_management_reject_plan_args {
 public:

  stuff_plan_management_reject_plan_args(const stuff_plan_management_reject_plan_args&);
  stuff_plan_management_reject_plan_args& operator=(const stuff_plan_management_reject_plan_args&);
  stuff_plan_management_reject_plan_args() : plan_id(0), ssid(), reject_reason() {
  }

  virtual ~stuff_plan_management_reject_plan_args() noexcept;
  int64_t plan_id;
  std::string ssid;
  std::string reject_reason;

  _stuff_plan_management_reject_plan_args__isset __isset;

  void __set_plan_id(const int64_t val);

  void __set_ssid(const std::string& val);

  void __set_reject_reason(const std::string& val);

  bool operator == (const stuff_plan_management_reject_plan_args & rhs) const
  {
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    if (!(reject_reason == rhs.reject_reason))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_reject_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_reject_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_reject_plan_pargs {
 public:


  virtual ~stuff_plan_management_reject_plan_pargs() noexcept;
  const int64_t* plan_id;
  const std::string* ssid;
  const std::string* reject_reason;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_reject_plan_result__isset {
  _stuff_plan_management_reject_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_reject_plan_result__isset;

class stuff_plan_management_reject_plan_result {
 public:

  stuff_plan_management_reject_plan_result(const stuff_plan_management_reject_plan_result&);
  stuff_plan_management_reject_plan_result& operator=(const stuff_plan_management_reject_plan_result&);
  stuff_plan_management_reject_plan_result() : success(0) {
  }

  virtual ~stuff_plan_management_reject_plan_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_reject_plan_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_reject_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_reject_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_reject_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_reject_plan_presult__isset {
  _stuff_plan_management_reject_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_reject_plan_presult__isset;

class stuff_plan_management_reject_plan_presult {
 public:


  virtual ~stuff_plan_management_reject_plan_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_reject_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_search_plan_by_driver_phone_args__isset {
  _stuff_plan_management_search_plan_by_driver_phone_args__isset() : phone(false) {}
  bool phone :1;
} _stuff_plan_management_search_plan_by_driver_phone_args__isset;

class stuff_plan_management_search_plan_by_driver_phone_args {
 public:

  stuff_plan_management_search_plan_by_driver_phone_args(const stuff_plan_management_search_plan_by_driver_phone_args&);
  stuff_plan_management_search_plan_by_driver_phone_args& operator=(const stuff_plan_management_search_plan_by_driver_phone_args&);
  stuff_plan_management_search_plan_by_driver_phone_args() : phone() {
  }

  virtual ~stuff_plan_management_search_plan_by_driver_phone_args() noexcept;
  std::string phone;

  _stuff_plan_management_search_plan_by_driver_phone_args__isset __isset;

  void __set_phone(const std::string& val);

  bool operator == (const stuff_plan_management_search_plan_by_driver_phone_args & rhs) const
  {
    if (!(phone == rhs.phone))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_search_plan_by_driver_phone_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_search_plan_by_driver_phone_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_search_plan_by_driver_phone_pargs {
 public:


  virtual ~stuff_plan_management_search_plan_by_driver_phone_pargs() noexcept;
  const std::string* phone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_search_plan_by_driver_phone_result__isset {
  _stuff_plan_management_search_plan_by_driver_phone_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_search_plan_by_driver_phone_result__isset;

class stuff_plan_management_search_plan_by_driver_phone_result {
 public:

  stuff_plan_management_search_plan_by_driver_phone_result(const stuff_plan_management_search_plan_by_driver_phone_result&);
  stuff_plan_management_search_plan_by_driver_phone_result& operator=(const stuff_plan_management_search_plan_by_driver_phone_result&);
  stuff_plan_management_search_plan_by_driver_phone_result() {
  }

  virtual ~stuff_plan_management_search_plan_by_driver_phone_result() noexcept;
  std::vector<plan_number_id>  success;
  gen_exp e;

  _stuff_plan_management_search_plan_by_driver_phone_result__isset __isset;

  void __set_success(const std::vector<plan_number_id> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_search_plan_by_driver_phone_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_search_plan_by_driver_phone_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_search_plan_by_driver_phone_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_search_plan_by_driver_phone_presult__isset {
  _stuff_plan_management_search_plan_by_driver_phone_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_search_plan_by_driver_phone_presult__isset;

class stuff_plan_management_search_plan_by_driver_phone_presult {
 public:


  virtual ~stuff_plan_management_search_plan_by_driver_phone_presult() noexcept;
  std::vector<plan_number_id> * success;
  gen_exp e;

  _stuff_plan_management_search_plan_by_driver_phone_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_status_rule_args__isset {
  _stuff_plan_management_get_status_rule_args__isset() : plan_id(false) {}
  bool plan_id :1;
} _stuff_plan_management_get_status_rule_args__isset;

class stuff_plan_management_get_status_rule_args {
 public:

  stuff_plan_management_get_status_rule_args(const stuff_plan_management_get_status_rule_args&);
  stuff_plan_management_get_status_rule_args& operator=(const stuff_plan_management_get_status_rule_args&);
  stuff_plan_management_get_status_rule_args() : plan_id(0) {
  }

  virtual ~stuff_plan_management_get_status_rule_args() noexcept;
  int64_t plan_id;

  _stuff_plan_management_get_status_rule_args__isset __isset;

  void __set_plan_id(const int64_t val);

  bool operator == (const stuff_plan_management_get_status_rule_args & rhs) const
  {
    if (!(plan_id == rhs.plan_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_status_rule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_status_rule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_status_rule_pargs {
 public:


  virtual ~stuff_plan_management_get_status_rule_pargs() noexcept;
  const int64_t* plan_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_status_rule_result__isset {
  _stuff_plan_management_get_status_rule_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_status_rule_result__isset;

class stuff_plan_management_get_status_rule_result {
 public:

  stuff_plan_management_get_status_rule_result(const stuff_plan_management_get_status_rule_result&);
  stuff_plan_management_get_status_rule_result& operator=(const stuff_plan_management_get_status_rule_result&);
  stuff_plan_management_get_status_rule_result() {
  }

  virtual ~stuff_plan_management_get_status_rule_result() noexcept;
  std::vector<plan_status_rule>  success;
  gen_exp e;

  _stuff_plan_management_get_status_rule_result__isset __isset;

  void __set_success(const std::vector<plan_status_rule> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_status_rule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_status_rule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_status_rule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_status_rule_presult__isset {
  _stuff_plan_management_get_status_rule_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_status_rule_presult__isset;

class stuff_plan_management_get_status_rule_presult {
 public:


  virtual ~stuff_plan_management_get_status_rule_presult() noexcept;
  std::vector<plan_status_rule> * success;
  gen_exp e;

  _stuff_plan_management_get_status_rule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_change_rule_args__isset {
  _stuff_plan_management_get_change_rule_args__isset() : ssid(false), plan_id(false) {}
  bool ssid :1;
  bool plan_id :1;
} _stuff_plan_management_get_change_rule_args__isset;

class stuff_plan_management_get_change_rule_args {
 public:

  stuff_plan_management_get_change_rule_args(const stuff_plan_management_get_change_rule_args&);
  stuff_plan_management_get_change_rule_args& operator=(const stuff_plan_management_get_change_rule_args&);
  stuff_plan_management_get_change_rule_args() : ssid(), plan_id(0) {
  }

  virtual ~stuff_plan_management_get_change_rule_args() noexcept;
  std::string ssid;
  int64_t plan_id;

  _stuff_plan_management_get_change_rule_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_plan_id(const int64_t val);

  bool operator == (const stuff_plan_management_get_change_rule_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(plan_id == rhs.plan_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_change_rule_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_change_rule_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_change_rule_pargs {
 public:


  virtual ~stuff_plan_management_get_change_rule_pargs() noexcept;
  const std::string* ssid;
  const int64_t* plan_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_change_rule_result__isset {
  _stuff_plan_management_get_change_rule_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_change_rule_result__isset;

class stuff_plan_management_get_change_rule_result {
 public:

  stuff_plan_management_get_change_rule_result(const stuff_plan_management_get_change_rule_result&);
  stuff_plan_management_get_change_rule_result& operator=(const stuff_plan_management_get_change_rule_result&);
  stuff_plan_management_get_change_rule_result() {
  }

  virtual ~stuff_plan_management_get_change_rule_result() noexcept;
  std::vector<bool>  success;
  gen_exp e;

  _stuff_plan_management_get_change_rule_result__isset __isset;

  void __set_success(const std::vector<bool> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_change_rule_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_change_rule_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_change_rule_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_change_rule_presult__isset {
  _stuff_plan_management_get_change_rule_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_change_rule_presult__isset;

class stuff_plan_management_get_change_rule_presult {
 public:


  virtual ~stuff_plan_management_get_change_rule_presult() noexcept;
  std::vector<bool> * success;
  gen_exp e;

  _stuff_plan_management_get_change_rule_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class stuff_plan_management_clean_unclose_plan_args {
 public:

  stuff_plan_management_clean_unclose_plan_args(const stuff_plan_management_clean_unclose_plan_args&);
  stuff_plan_management_clean_unclose_plan_args& operator=(const stuff_plan_management_clean_unclose_plan_args&);
  stuff_plan_management_clean_unclose_plan_args() {
  }

  virtual ~stuff_plan_management_clean_unclose_plan_args() noexcept;

  bool operator == (const stuff_plan_management_clean_unclose_plan_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const stuff_plan_management_clean_unclose_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_clean_unclose_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_clean_unclose_plan_pargs {
 public:


  virtual ~stuff_plan_management_clean_unclose_plan_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_clean_unclose_plan_result__isset {
  _stuff_plan_management_clean_unclose_plan_result__isset() : e(false) {}
  bool e :1;
} _stuff_plan_management_clean_unclose_plan_result__isset;

class stuff_plan_management_clean_unclose_plan_result {
 public:

  stuff_plan_management_clean_unclose_plan_result(const stuff_plan_management_clean_unclose_plan_result&);
  stuff_plan_management_clean_unclose_plan_result& operator=(const stuff_plan_management_clean_unclose_plan_result&);
  stuff_plan_management_clean_unclose_plan_result() {
  }

  virtual ~stuff_plan_management_clean_unclose_plan_result() noexcept;
  gen_exp e;

  _stuff_plan_management_clean_unclose_plan_result__isset __isset;

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_clean_unclose_plan_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_clean_unclose_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_clean_unclose_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_clean_unclose_plan_presult__isset {
  _stuff_plan_management_clean_unclose_plan_presult__isset() : e(false) {}
  bool e :1;
} _stuff_plan_management_clean_unclose_plan_presult__isset;

class stuff_plan_management_clean_unclose_plan_presult {
 public:


  virtual ~stuff_plan_management_clean_unclose_plan_presult() noexcept;
  gen_exp e;

  _stuff_plan_management_clean_unclose_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_today_statistics_args__isset {
  _stuff_plan_management_get_today_statistics_args__isset() : ssid(false) {}
  bool ssid :1;
} _stuff_plan_management_get_today_statistics_args__isset;

class stuff_plan_management_get_today_statistics_args {
 public:

  stuff_plan_management_get_today_statistics_args(const stuff_plan_management_get_today_statistics_args&);
  stuff_plan_management_get_today_statistics_args& operator=(const stuff_plan_management_get_today_statistics_args&);
  stuff_plan_management_get_today_statistics_args() : ssid() {
  }

  virtual ~stuff_plan_management_get_today_statistics_args() noexcept;
  std::string ssid;

  _stuff_plan_management_get_today_statistics_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const stuff_plan_management_get_today_statistics_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_today_statistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_today_statistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_today_statistics_pargs {
 public:


  virtual ~stuff_plan_management_get_today_statistics_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_today_statistics_result__isset {
  _stuff_plan_management_get_today_statistics_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_today_statistics_result__isset;

class stuff_plan_management_get_today_statistics_result {
 public:

  stuff_plan_management_get_today_statistics_result(const stuff_plan_management_get_today_statistics_result&);
  stuff_plan_management_get_today_statistics_result& operator=(const stuff_plan_management_get_today_statistics_result&);
  stuff_plan_management_get_today_statistics_result() {
  }

  virtual ~stuff_plan_management_get_today_statistics_result() noexcept;
  std::vector<vichele_statistics>  success;
  gen_exp e;

  _stuff_plan_management_get_today_statistics_result__isset __isset;

  void __set_success(const std::vector<vichele_statistics> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_today_statistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_today_statistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_today_statistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_today_statistics_presult__isset {
  _stuff_plan_management_get_today_statistics_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_today_statistics_presult__isset;

class stuff_plan_management_get_today_statistics_presult {
 public:


  virtual ~stuff_plan_management_get_today_statistics_presult() noexcept;
  std::vector<vichele_statistics> * success;
  gen_exp e;

  _stuff_plan_management_get_today_statistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_plan_created_by_user_args__isset {
  _stuff_plan_management_plan_created_by_user_args__isset() : ssid(false), plan_id(false) {}
  bool ssid :1;
  bool plan_id :1;
} _stuff_plan_management_plan_created_by_user_args__isset;

class stuff_plan_management_plan_created_by_user_args {
 public:

  stuff_plan_management_plan_created_by_user_args(const stuff_plan_management_plan_created_by_user_args&);
  stuff_plan_management_plan_created_by_user_args& operator=(const stuff_plan_management_plan_created_by_user_args&);
  stuff_plan_management_plan_created_by_user_args() : ssid(), plan_id(0) {
  }

  virtual ~stuff_plan_management_plan_created_by_user_args() noexcept;
  std::string ssid;
  int64_t plan_id;

  _stuff_plan_management_plan_created_by_user_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_plan_id(const int64_t val);

  bool operator == (const stuff_plan_management_plan_created_by_user_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(plan_id == rhs.plan_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_plan_created_by_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_plan_created_by_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_plan_created_by_user_pargs {
 public:


  virtual ~stuff_plan_management_plan_created_by_user_pargs() noexcept;
  const std::string* ssid;
  const int64_t* plan_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_plan_created_by_user_result__isset {
  _stuff_plan_management_plan_created_by_user_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_plan_created_by_user_result__isset;

class stuff_plan_management_plan_created_by_user_result {
 public:

  stuff_plan_management_plan_created_by_user_result(const stuff_plan_management_plan_created_by_user_result&);
  stuff_plan_management_plan_created_by_user_result& operator=(const stuff_plan_management_plan_created_by_user_result&);
  stuff_plan_management_plan_created_by_user_result() : success(0) {
  }

  virtual ~stuff_plan_management_plan_created_by_user_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_plan_created_by_user_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_plan_created_by_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_plan_created_by_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_plan_created_by_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_plan_created_by_user_presult__isset {
  _stuff_plan_management_plan_created_by_user_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_plan_created_by_user_presult__isset;

class stuff_plan_management_plan_created_by_user_presult {
 public:


  virtual ~stuff_plan_management_plan_created_by_user_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_plan_created_by_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_export_plan_by_plan_date_args__isset {
  _stuff_plan_management_export_plan_by_plan_date_args__isset() : ssid(false), plan_date(false), create_date(false) {}
  bool ssid :1;
  bool plan_date :1;
  bool create_date :1;
} _stuff_plan_management_export_plan_by_plan_date_args__isset;

class stuff_plan_management_export_plan_by_plan_date_args {
 public:

  stuff_plan_management_export_plan_by_plan_date_args(const stuff_plan_management_export_plan_by_plan_date_args&);
  stuff_plan_management_export_plan_by_plan_date_args& operator=(const stuff_plan_management_export_plan_by_plan_date_args&);
  stuff_plan_management_export_plan_by_plan_date_args() : ssid(), plan_date(), create_date() {
  }

  virtual ~stuff_plan_management_export_plan_by_plan_date_args() noexcept;
  std::string ssid;
  std::string plan_date;
  std::string create_date;

  _stuff_plan_management_export_plan_by_plan_date_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_plan_date(const std::string& val);

  void __set_create_date(const std::string& val);

  bool operator == (const stuff_plan_management_export_plan_by_plan_date_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(plan_date == rhs.plan_date))
      return false;
    if (!(create_date == rhs.create_date))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_export_plan_by_plan_date_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_export_plan_by_plan_date_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_export_plan_by_plan_date_pargs {
 public:


  virtual ~stuff_plan_management_export_plan_by_plan_date_pargs() noexcept;
  const std::string* ssid;
  const std::string* plan_date;
  const std::string* create_date;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_export_plan_by_plan_date_result__isset {
  _stuff_plan_management_export_plan_by_plan_date_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_export_plan_by_plan_date_result__isset;

class stuff_plan_management_export_plan_by_plan_date_result {
 public:

  stuff_plan_management_export_plan_by_plan_date_result(const stuff_plan_management_export_plan_by_plan_date_result&);
  stuff_plan_management_export_plan_by_plan_date_result& operator=(const stuff_plan_management_export_plan_by_plan_date_result&);
  stuff_plan_management_export_plan_by_plan_date_result() : success() {
  }

  virtual ~stuff_plan_management_export_plan_by_plan_date_result() noexcept;
  std::string success;
  gen_exp e;

  _stuff_plan_management_export_plan_by_plan_date_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_export_plan_by_plan_date_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_export_plan_by_plan_date_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_export_plan_by_plan_date_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_export_plan_by_plan_date_presult__isset {
  _stuff_plan_management_export_plan_by_plan_date_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_export_plan_by_plan_date_presult__isset;

class stuff_plan_management_export_plan_by_plan_date_presult {
 public:


  virtual ~stuff_plan_management_export_plan_by_plan_date_presult() noexcept;
  std::string* success;
  gen_exp e;

  _stuff_plan_management_export_plan_by_plan_date_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_export_plan_by_create_date_args__isset {
  _stuff_plan_management_export_plan_by_create_date_args__isset() : ssid(false), begin_date(false), end_date(false) {}
  bool ssid :1;
  bool begin_date :1;
  bool end_date :1;
} _stuff_plan_management_export_plan_by_create_date_args__isset;

class stuff_plan_management_export_plan_by_create_date_args {
 public:

  stuff_plan_management_export_plan_by_create_date_args(const stuff_plan_management_export_plan_by_create_date_args&);
  stuff_plan_management_export_plan_by_create_date_args& operator=(const stuff_plan_management_export_plan_by_create_date_args&);
  stuff_plan_management_export_plan_by_create_date_args() : ssid(), begin_date(0), end_date(0) {
  }

  virtual ~stuff_plan_management_export_plan_by_create_date_args() noexcept;
  std::string ssid;
  int64_t begin_date;
  int64_t end_date;

  _stuff_plan_management_export_plan_by_create_date_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_begin_date(const int64_t val);

  void __set_end_date(const int64_t val);

  bool operator == (const stuff_plan_management_export_plan_by_create_date_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(begin_date == rhs.begin_date))
      return false;
    if (!(end_date == rhs.end_date))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_export_plan_by_create_date_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_export_plan_by_create_date_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_export_plan_by_create_date_pargs {
 public:


  virtual ~stuff_plan_management_export_plan_by_create_date_pargs() noexcept;
  const std::string* ssid;
  const int64_t* begin_date;
  const int64_t* end_date;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_export_plan_by_create_date_result__isset {
  _stuff_plan_management_export_plan_by_create_date_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_export_plan_by_create_date_result__isset;

class stuff_plan_management_export_plan_by_create_date_result {
 public:

  stuff_plan_management_export_plan_by_create_date_result(const stuff_plan_management_export_plan_by_create_date_result&);
  stuff_plan_management_export_plan_by_create_date_result& operator=(const stuff_plan_management_export_plan_by_create_date_result&);
  stuff_plan_management_export_plan_by_create_date_result() : success() {
  }

  virtual ~stuff_plan_management_export_plan_by_create_date_result() noexcept;
  std::string success;
  gen_exp e;

  _stuff_plan_management_export_plan_by_create_date_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_export_plan_by_create_date_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_export_plan_by_create_date_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_export_plan_by_create_date_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_export_plan_by_create_date_presult__isset {
  _stuff_plan_management_export_plan_by_create_date_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_export_plan_by_create_date_presult__isset;

class stuff_plan_management_export_plan_by_create_date_presult {
 public:


  virtual ~stuff_plan_management_export_plan_by_create_date_presult() noexcept;
  std::string* success;
  gen_exp e;

  _stuff_plan_management_export_plan_by_create_date_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_search_plan_by_vichele_number_args__isset {
  _stuff_plan_management_search_plan_by_vichele_number_args__isset() : ssid(false), vichele_number(false) {}
  bool ssid :1;
  bool vichele_number :1;
} _stuff_plan_management_search_plan_by_vichele_number_args__isset;

class stuff_plan_management_search_plan_by_vichele_number_args {
 public:

  stuff_plan_management_search_plan_by_vichele_number_args(const stuff_plan_management_search_plan_by_vichele_number_args&);
  stuff_plan_management_search_plan_by_vichele_number_args& operator=(const stuff_plan_management_search_plan_by_vichele_number_args&);
  stuff_plan_management_search_plan_by_vichele_number_args() : ssid(), vichele_number() {
  }

  virtual ~stuff_plan_management_search_plan_by_vichele_number_args() noexcept;
  std::string ssid;
  std::string vichele_number;

  _stuff_plan_management_search_plan_by_vichele_number_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_vichele_number(const std::string& val);

  bool operator == (const stuff_plan_management_search_plan_by_vichele_number_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(vichele_number == rhs.vichele_number))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_search_plan_by_vichele_number_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_search_plan_by_vichele_number_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_search_plan_by_vichele_number_pargs {
 public:


  virtual ~stuff_plan_management_search_plan_by_vichele_number_pargs() noexcept;
  const std::string* ssid;
  const std::string* vichele_number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_search_plan_by_vichele_number_result__isset {
  _stuff_plan_management_search_plan_by_vichele_number_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_search_plan_by_vichele_number_result__isset;

class stuff_plan_management_search_plan_by_vichele_number_result {
 public:

  stuff_plan_management_search_plan_by_vichele_number_result(const stuff_plan_management_search_plan_by_vichele_number_result&);
  stuff_plan_management_search_plan_by_vichele_number_result& operator=(const stuff_plan_management_search_plan_by_vichele_number_result&);
  stuff_plan_management_search_plan_by_vichele_number_result() {
  }

  virtual ~stuff_plan_management_search_plan_by_vichele_number_result() noexcept;
  std::vector<vichele_search_result>  success;
  gen_exp e;

  _stuff_plan_management_search_plan_by_vichele_number_result__isset __isset;

  void __set_success(const std::vector<vichele_search_result> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_search_plan_by_vichele_number_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_search_plan_by_vichele_number_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_search_plan_by_vichele_number_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_search_plan_by_vichele_number_presult__isset {
  _stuff_plan_management_search_plan_by_vichele_number_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_search_plan_by_vichele_number_presult__isset;

class stuff_plan_management_search_plan_by_vichele_number_presult {
 public:


  virtual ~stuff_plan_management_search_plan_by_vichele_number_presult() noexcept;
  std::vector<vichele_search_result> * success;
  gen_exp e;

  _stuff_plan_management_search_plan_by_vichele_number_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_tomorrow_statistics_args__isset {
  _stuff_plan_management_get_tomorrow_statistics_args__isset() : ssid(false) {}
  bool ssid :1;
} _stuff_plan_management_get_tomorrow_statistics_args__isset;

class stuff_plan_management_get_tomorrow_statistics_args {
 public:

  stuff_plan_management_get_tomorrow_statistics_args(const stuff_plan_management_get_tomorrow_statistics_args&);
  stuff_plan_management_get_tomorrow_statistics_args& operator=(const stuff_plan_management_get_tomorrow_statistics_args&);
  stuff_plan_management_get_tomorrow_statistics_args() : ssid() {
  }

  virtual ~stuff_plan_management_get_tomorrow_statistics_args() noexcept;
  std::string ssid;

  _stuff_plan_management_get_tomorrow_statistics_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const stuff_plan_management_get_tomorrow_statistics_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_tomorrow_statistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_tomorrow_statistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_tomorrow_statistics_pargs {
 public:


  virtual ~stuff_plan_management_get_tomorrow_statistics_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_tomorrow_statistics_result__isset {
  _stuff_plan_management_get_tomorrow_statistics_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_tomorrow_statistics_result__isset;

class stuff_plan_management_get_tomorrow_statistics_result {
 public:

  stuff_plan_management_get_tomorrow_statistics_result(const stuff_plan_management_get_tomorrow_statistics_result&);
  stuff_plan_management_get_tomorrow_statistics_result& operator=(const stuff_plan_management_get_tomorrow_statistics_result&);
  stuff_plan_management_get_tomorrow_statistics_result() {
  }

  virtual ~stuff_plan_management_get_tomorrow_statistics_result() noexcept;
  std::vector<vichele_statistics>  success;
  gen_exp e;

  _stuff_plan_management_get_tomorrow_statistics_result__isset __isset;

  void __set_success(const std::vector<vichele_statistics> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_tomorrow_statistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_tomorrow_statistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_tomorrow_statistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_tomorrow_statistics_presult__isset {
  _stuff_plan_management_get_tomorrow_statistics_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_tomorrow_statistics_presult__isset;

class stuff_plan_management_get_tomorrow_statistics_presult {
 public:


  virtual ~stuff_plan_management_get_tomorrow_statistics_presult() noexcept;
  std::vector<vichele_statistics> * success;
  gen_exp e;

  _stuff_plan_management_get_tomorrow_statistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_company_brief_args__isset {
  _stuff_plan_management_get_company_brief_args__isset() : ssid(false) {}
  bool ssid :1;
} _stuff_plan_management_get_company_brief_args__isset;

class stuff_plan_management_get_company_brief_args {
 public:

  stuff_plan_management_get_company_brief_args(const stuff_plan_management_get_company_brief_args&);
  stuff_plan_management_get_company_brief_args& operator=(const stuff_plan_management_get_company_brief_args&);
  stuff_plan_management_get_company_brief_args() : ssid() {
  }

  virtual ~stuff_plan_management_get_company_brief_args() noexcept;
  std::string ssid;

  _stuff_plan_management_get_company_brief_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const stuff_plan_management_get_company_brief_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_company_brief_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_company_brief_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_company_brief_pargs {
 public:


  virtual ~stuff_plan_management_get_company_brief_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_company_brief_result__isset {
  _stuff_plan_management_get_company_brief_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_company_brief_result__isset;

class stuff_plan_management_get_company_brief_result {
 public:

  stuff_plan_management_get_company_brief_result(const stuff_plan_management_get_company_brief_result&);
  stuff_plan_management_get_company_brief_result& operator=(const stuff_plan_management_get_company_brief_result&);
  stuff_plan_management_get_company_brief_result() {
  }

  virtual ~stuff_plan_management_get_company_brief_result() noexcept;
  company_plan_brief success;
  gen_exp e;

  _stuff_plan_management_get_company_brief_result__isset __isset;

  void __set_success(const company_plan_brief& val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_company_brief_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_company_brief_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_company_brief_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_company_brief_presult__isset {
  _stuff_plan_management_get_company_brief_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_company_brief_presult__isset;

class stuff_plan_management_get_company_brief_presult {
 public:


  virtual ~stuff_plan_management_get_company_brief_presult() noexcept;
  company_plan_brief* success;
  gen_exp e;

  _stuff_plan_management_get_company_brief_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_push_user_pay_args__isset {
  _stuff_plan_management_push_user_pay_args__isset() : ssid(false), plan_id(false) {}
  bool ssid :1;
  bool plan_id :1;
} _stuff_plan_management_push_user_pay_args__isset;

class stuff_plan_management_push_user_pay_args {
 public:

  stuff_plan_management_push_user_pay_args(const stuff_plan_management_push_user_pay_args&);
  stuff_plan_management_push_user_pay_args& operator=(const stuff_plan_management_push_user_pay_args&);
  stuff_plan_management_push_user_pay_args() : ssid(), plan_id(0) {
  }

  virtual ~stuff_plan_management_push_user_pay_args() noexcept;
  std::string ssid;
  int64_t plan_id;

  _stuff_plan_management_push_user_pay_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_plan_id(const int64_t val);

  bool operator == (const stuff_plan_management_push_user_pay_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(plan_id == rhs.plan_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_push_user_pay_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_push_user_pay_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_push_user_pay_pargs {
 public:


  virtual ~stuff_plan_management_push_user_pay_pargs() noexcept;
  const std::string* ssid;
  const int64_t* plan_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_push_user_pay_result__isset {
  _stuff_plan_management_push_user_pay_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_push_user_pay_result__isset;

class stuff_plan_management_push_user_pay_result {
 public:

  stuff_plan_management_push_user_pay_result(const stuff_plan_management_push_user_pay_result&);
  stuff_plan_management_push_user_pay_result& operator=(const stuff_plan_management_push_user_pay_result&);
  stuff_plan_management_push_user_pay_result() : success(0) {
  }

  virtual ~stuff_plan_management_push_user_pay_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_push_user_pay_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_push_user_pay_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_push_user_pay_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_push_user_pay_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_push_user_pay_presult__isset {
  _stuff_plan_management_push_user_pay_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_push_user_pay_presult__isset;

class stuff_plan_management_push_user_pay_presult {
 public:


  virtual ~stuff_plan_management_push_user_pay_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_push_user_pay_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_count_by_status_args__isset {
  _stuff_plan_management_get_count_by_status_args__isset() : ssid(false), status(false) {}
  bool ssid :1;
  bool status :1;
} _stuff_plan_management_get_count_by_status_args__isset;

class stuff_plan_management_get_count_by_status_args {
 public:

  stuff_plan_management_get_count_by_status_args(const stuff_plan_management_get_count_by_status_args&);
  stuff_plan_management_get_count_by_status_args& operator=(const stuff_plan_management_get_count_by_status_args&);
  stuff_plan_management_get_count_by_status_args() : ssid(), status(0) {
  }

  virtual ~stuff_plan_management_get_count_by_status_args() noexcept;
  std::string ssid;
  int64_t status;

  _stuff_plan_management_get_count_by_status_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_status(const int64_t val);

  bool operator == (const stuff_plan_management_get_count_by_status_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_count_by_status_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_count_by_status_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_count_by_status_pargs {
 public:


  virtual ~stuff_plan_management_get_count_by_status_pargs() noexcept;
  const std::string* ssid;
  const int64_t* status;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_count_by_status_result__isset {
  _stuff_plan_management_get_count_by_status_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_count_by_status_result__isset;

class stuff_plan_management_get_count_by_status_result {
 public:

  stuff_plan_management_get_count_by_status_result(const stuff_plan_management_get_count_by_status_result&);
  stuff_plan_management_get_count_by_status_result& operator=(const stuff_plan_management_get_count_by_status_result&);
  stuff_plan_management_get_count_by_status_result() : success(0) {
  }

  virtual ~stuff_plan_management_get_count_by_status_result() noexcept;
  int64_t success;
  gen_exp e;

  _stuff_plan_management_get_count_by_status_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_count_by_status_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_count_by_status_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_count_by_status_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_count_by_status_presult__isset {
  _stuff_plan_management_get_count_by_status_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_count_by_status_presult__isset;

class stuff_plan_management_get_count_by_status_presult {
 public:


  virtual ~stuff_plan_management_get_count_by_status_presult() noexcept;
  int64_t* success;
  gen_exp e;

  _stuff_plan_management_get_count_by_status_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_cancel_vichele_from_plan_args__isset {
  _stuff_plan_management_cancel_vichele_from_plan_args__isset() : ssid(false), ids(false) {}
  bool ssid :1;
  bool ids :1;
} _stuff_plan_management_cancel_vichele_from_plan_args__isset;

class stuff_plan_management_cancel_vichele_from_plan_args {
 public:

  stuff_plan_management_cancel_vichele_from_plan_args(const stuff_plan_management_cancel_vichele_from_plan_args&);
  stuff_plan_management_cancel_vichele_from_plan_args& operator=(const stuff_plan_management_cancel_vichele_from_plan_args&);
  stuff_plan_management_cancel_vichele_from_plan_args() : ssid() {
  }

  virtual ~stuff_plan_management_cancel_vichele_from_plan_args() noexcept;
  std::string ssid;
  std::vector<int64_t>  ids;

  _stuff_plan_management_cancel_vichele_from_plan_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_ids(const std::vector<int64_t> & val);

  bool operator == (const stuff_plan_management_cancel_vichele_from_plan_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(ids == rhs.ids))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_cancel_vichele_from_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_cancel_vichele_from_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_cancel_vichele_from_plan_pargs {
 public:


  virtual ~stuff_plan_management_cancel_vichele_from_plan_pargs() noexcept;
  const std::string* ssid;
  const std::vector<int64_t> * ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_cancel_vichele_from_plan_result__isset {
  _stuff_plan_management_cancel_vichele_from_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_cancel_vichele_from_plan_result__isset;

class stuff_plan_management_cancel_vichele_from_plan_result {
 public:

  stuff_plan_management_cancel_vichele_from_plan_result(const stuff_plan_management_cancel_vichele_from_plan_result&);
  stuff_plan_management_cancel_vichele_from_plan_result& operator=(const stuff_plan_management_cancel_vichele_from_plan_result&);
  stuff_plan_management_cancel_vichele_from_plan_result() : success(0) {
  }

  virtual ~stuff_plan_management_cancel_vichele_from_plan_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_cancel_vichele_from_plan_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_cancel_vichele_from_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_cancel_vichele_from_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_cancel_vichele_from_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_cancel_vichele_from_plan_presult__isset {
  _stuff_plan_management_cancel_vichele_from_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_cancel_vichele_from_plan_presult__isset;

class stuff_plan_management_cancel_vichele_from_plan_presult {
 public:


  virtual ~stuff_plan_management_cancel_vichele_from_plan_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_cancel_vichele_from_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_driver_silent_login_args__isset {
  _stuff_plan_management_driver_silent_login_args__isset() : code(false) {}
  bool code :1;
} _stuff_plan_management_driver_silent_login_args__isset;

class stuff_plan_management_driver_silent_login_args {
 public:

  stuff_plan_management_driver_silent_login_args(const stuff_plan_management_driver_silent_login_args&);
  stuff_plan_management_driver_silent_login_args& operator=(const stuff_plan_management_driver_silent_login_args&);
  stuff_plan_management_driver_silent_login_args() : code() {
  }

  virtual ~stuff_plan_management_driver_silent_login_args() noexcept;
  std::string code;

  _stuff_plan_management_driver_silent_login_args__isset __isset;

  void __set_code(const std::string& val);

  bool operator == (const stuff_plan_management_driver_silent_login_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_driver_silent_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_driver_silent_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_driver_silent_login_pargs {
 public:


  virtual ~stuff_plan_management_driver_silent_login_pargs() noexcept;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_driver_silent_login_result__isset {
  _stuff_plan_management_driver_silent_login_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_driver_silent_login_result__isset;

class stuff_plan_management_driver_silent_login_result {
 public:

  stuff_plan_management_driver_silent_login_result(const stuff_plan_management_driver_silent_login_result&);
  stuff_plan_management_driver_silent_login_result& operator=(const stuff_plan_management_driver_silent_login_result&);
  stuff_plan_management_driver_silent_login_result() : success() {
  }

  virtual ~stuff_plan_management_driver_silent_login_result() noexcept;
  std::string success;
  gen_exp e;

  _stuff_plan_management_driver_silent_login_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_driver_silent_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_driver_silent_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_driver_silent_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_driver_silent_login_presult__isset {
  _stuff_plan_management_driver_silent_login_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_driver_silent_login_presult__isset;

class stuff_plan_management_driver_silent_login_presult {
 public:


  virtual ~stuff_plan_management_driver_silent_login_presult() noexcept;
  std::string* success;
  gen_exp e;

  _stuff_plan_management_driver_silent_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_driver_silent_send_sms_args__isset {
  _stuff_plan_management_driver_silent_send_sms_args__isset() : driver_phone(false) {}
  bool driver_phone :1;
} _stuff_plan_management_driver_silent_send_sms_args__isset;

class stuff_plan_management_driver_silent_send_sms_args {
 public:

  stuff_plan_management_driver_silent_send_sms_args(const stuff_plan_management_driver_silent_send_sms_args&);
  stuff_plan_management_driver_silent_send_sms_args& operator=(const stuff_plan_management_driver_silent_send_sms_args&);
  stuff_plan_management_driver_silent_send_sms_args() : driver_phone() {
  }

  virtual ~stuff_plan_management_driver_silent_send_sms_args() noexcept;
  std::string driver_phone;

  _stuff_plan_management_driver_silent_send_sms_args__isset __isset;

  void __set_driver_phone(const std::string& val);

  bool operator == (const stuff_plan_management_driver_silent_send_sms_args & rhs) const
  {
    if (!(driver_phone == rhs.driver_phone))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_driver_silent_send_sms_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_driver_silent_send_sms_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_driver_silent_send_sms_pargs {
 public:


  virtual ~stuff_plan_management_driver_silent_send_sms_pargs() noexcept;
  const std::string* driver_phone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_driver_silent_send_sms_result__isset {
  _stuff_plan_management_driver_silent_send_sms_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_driver_silent_send_sms_result__isset;

class stuff_plan_management_driver_silent_send_sms_result {
 public:

  stuff_plan_management_driver_silent_send_sms_result(const stuff_plan_management_driver_silent_send_sms_result&);
  stuff_plan_management_driver_silent_send_sms_result& operator=(const stuff_plan_management_driver_silent_send_sms_result&);
  stuff_plan_management_driver_silent_send_sms_result() : success(0) {
  }

  virtual ~stuff_plan_management_driver_silent_send_sms_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_driver_silent_send_sms_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_driver_silent_send_sms_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_driver_silent_send_sms_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_driver_silent_send_sms_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_driver_silent_send_sms_presult__isset {
  _stuff_plan_management_driver_silent_send_sms_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_driver_silent_send_sms_presult__isset;

class stuff_plan_management_driver_silent_send_sms_presult {
 public:


  virtual ~stuff_plan_management_driver_silent_send_sms_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_driver_silent_send_sms_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_driver_silent_register_args__isset {
  _stuff_plan_management_driver_silent_register_args__isset() : code(false), driver_id(false), driver_phone(false), verify_code(false) {}
  bool code :1;
  bool driver_id :1;
  bool driver_phone :1;
  bool verify_code :1;
} _stuff_plan_management_driver_silent_register_args__isset;

class stuff_plan_management_driver_silent_register_args {
 public:

  stuff_plan_management_driver_silent_register_args(const stuff_plan_management_driver_silent_register_args&);
  stuff_plan_management_driver_silent_register_args& operator=(const stuff_plan_management_driver_silent_register_args&);
  stuff_plan_management_driver_silent_register_args() : code(), driver_id(), driver_phone(), verify_code() {
  }

  virtual ~stuff_plan_management_driver_silent_register_args() noexcept;
  std::string code;
  std::string driver_id;
  std::string driver_phone;
  std::string verify_code;

  _stuff_plan_management_driver_silent_register_args__isset __isset;

  void __set_code(const std::string& val);

  void __set_driver_id(const std::string& val);

  void __set_driver_phone(const std::string& val);

  void __set_verify_code(const std::string& val);

  bool operator == (const stuff_plan_management_driver_silent_register_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    if (!(driver_id == rhs.driver_id))
      return false;
    if (!(driver_phone == rhs.driver_phone))
      return false;
    if (!(verify_code == rhs.verify_code))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_driver_silent_register_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_driver_silent_register_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_driver_silent_register_pargs {
 public:


  virtual ~stuff_plan_management_driver_silent_register_pargs() noexcept;
  const std::string* code;
  const std::string* driver_id;
  const std::string* driver_phone;
  const std::string* verify_code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_driver_silent_register_result__isset {
  _stuff_plan_management_driver_silent_register_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_driver_silent_register_result__isset;

class stuff_plan_management_driver_silent_register_result {
 public:

  stuff_plan_management_driver_silent_register_result(const stuff_plan_management_driver_silent_register_result&);
  stuff_plan_management_driver_silent_register_result& operator=(const stuff_plan_management_driver_silent_register_result&);
  stuff_plan_management_driver_silent_register_result() : success() {
  }

  virtual ~stuff_plan_management_driver_silent_register_result() noexcept;
  std::string success;
  gen_exp e;

  _stuff_plan_management_driver_silent_register_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_driver_silent_register_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_driver_silent_register_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_driver_silent_register_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_driver_silent_register_presult__isset {
  _stuff_plan_management_driver_silent_register_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_driver_silent_register_presult__isset;

class stuff_plan_management_driver_silent_register_presult {
 public:


  virtual ~stuff_plan_management_driver_silent_register_presult() noexcept;
  std::string* success;
  gen_exp e;

  _stuff_plan_management_driver_silent_register_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_driver_silent_unregister_args__isset {
  _stuff_plan_management_driver_silent_unregister_args__isset() : silent_id(false) {}
  bool silent_id :1;
} _stuff_plan_management_driver_silent_unregister_args__isset;

class stuff_plan_management_driver_silent_unregister_args {
 public:

  stuff_plan_management_driver_silent_unregister_args(const stuff_plan_management_driver_silent_unregister_args&);
  stuff_plan_management_driver_silent_unregister_args& operator=(const stuff_plan_management_driver_silent_unregister_args&);
  stuff_plan_management_driver_silent_unregister_args() : silent_id() {
  }

  virtual ~stuff_plan_management_driver_silent_unregister_args() noexcept;
  std::string silent_id;

  _stuff_plan_management_driver_silent_unregister_args__isset __isset;

  void __set_silent_id(const std::string& val);

  bool operator == (const stuff_plan_management_driver_silent_unregister_args & rhs) const
  {
    if (!(silent_id == rhs.silent_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_driver_silent_unregister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_driver_silent_unregister_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_driver_silent_unregister_pargs {
 public:


  virtual ~stuff_plan_management_driver_silent_unregister_pargs() noexcept;
  const std::string* silent_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_driver_silent_unregister_result__isset {
  _stuff_plan_management_driver_silent_unregister_result__isset() : e(false) {}
  bool e :1;
} _stuff_plan_management_driver_silent_unregister_result__isset;

class stuff_plan_management_driver_silent_unregister_result {
 public:

  stuff_plan_management_driver_silent_unregister_result(const stuff_plan_management_driver_silent_unregister_result&);
  stuff_plan_management_driver_silent_unregister_result& operator=(const stuff_plan_management_driver_silent_unregister_result&);
  stuff_plan_management_driver_silent_unregister_result() {
  }

  virtual ~stuff_plan_management_driver_silent_unregister_result() noexcept;
  gen_exp e;

  _stuff_plan_management_driver_silent_unregister_result__isset __isset;

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_driver_silent_unregister_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_driver_silent_unregister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_driver_silent_unregister_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_driver_silent_unregister_presult__isset {
  _stuff_plan_management_driver_silent_unregister_presult__isset() : e(false) {}
  bool e :1;
} _stuff_plan_management_driver_silent_unregister_presult__isset;

class stuff_plan_management_driver_silent_unregister_presult {
 public:


  virtual ~stuff_plan_management_driver_silent_unregister_presult() noexcept;
  gen_exp e;

  _stuff_plan_management_driver_silent_unregister_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_verify_driver_silent_login_args__isset {
  _stuff_plan_management_verify_driver_silent_login_args__isset() : silent_id(false) {}
  bool silent_id :1;
} _stuff_plan_management_verify_driver_silent_login_args__isset;

class stuff_plan_management_verify_driver_silent_login_args {
 public:

  stuff_plan_management_verify_driver_silent_login_args(const stuff_plan_management_verify_driver_silent_login_args&);
  stuff_plan_management_verify_driver_silent_login_args& operator=(const stuff_plan_management_verify_driver_silent_login_args&);
  stuff_plan_management_verify_driver_silent_login_args() : silent_id() {
  }

  virtual ~stuff_plan_management_verify_driver_silent_login_args() noexcept;
  std::string silent_id;

  _stuff_plan_management_verify_driver_silent_login_args__isset __isset;

  void __set_silent_id(const std::string& val);

  bool operator == (const stuff_plan_management_verify_driver_silent_login_args & rhs) const
  {
    if (!(silent_id == rhs.silent_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_verify_driver_silent_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_verify_driver_silent_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_verify_driver_silent_login_pargs {
 public:


  virtual ~stuff_plan_management_verify_driver_silent_login_pargs() noexcept;
  const std::string* silent_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_verify_driver_silent_login_result__isset {
  _stuff_plan_management_verify_driver_silent_login_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_verify_driver_silent_login_result__isset;

class stuff_plan_management_verify_driver_silent_login_result {
 public:

  stuff_plan_management_verify_driver_silent_login_result(const stuff_plan_management_verify_driver_silent_login_result&);
  stuff_plan_management_verify_driver_silent_login_result& operator=(const stuff_plan_management_verify_driver_silent_login_result&);
  stuff_plan_management_verify_driver_silent_login_result() : success(0) {
  }

  virtual ~stuff_plan_management_verify_driver_silent_login_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_verify_driver_silent_login_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_verify_driver_silent_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_verify_driver_silent_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_verify_driver_silent_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_verify_driver_silent_login_presult__isset {
  _stuff_plan_management_verify_driver_silent_login_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_verify_driver_silent_login_presult__isset;

class stuff_plan_management_verify_driver_silent_login_presult {
 public:


  virtual ~stuff_plan_management_verify_driver_silent_login_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_verify_driver_silent_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_today_driver_info_args__isset {
  _stuff_plan_management_get_today_driver_info_args__isset() : silent_id(false) {}
  bool silent_id :1;
} _stuff_plan_management_get_today_driver_info_args__isset;

class stuff_plan_management_get_today_driver_info_args {
 public:

  stuff_plan_management_get_today_driver_info_args(const stuff_plan_management_get_today_driver_info_args&);
  stuff_plan_management_get_today_driver_info_args& operator=(const stuff_plan_management_get_today_driver_info_args&);
  stuff_plan_management_get_today_driver_info_args() : silent_id() {
  }

  virtual ~stuff_plan_management_get_today_driver_info_args() noexcept;
  std::string silent_id;

  _stuff_plan_management_get_today_driver_info_args__isset __isset;

  void __set_silent_id(const std::string& val);

  bool operator == (const stuff_plan_management_get_today_driver_info_args & rhs) const
  {
    if (!(silent_id == rhs.silent_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_today_driver_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_today_driver_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_today_driver_info_pargs {
 public:


  virtual ~stuff_plan_management_get_today_driver_info_pargs() noexcept;
  const std::string* silent_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_today_driver_info_result__isset {
  _stuff_plan_management_get_today_driver_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_today_driver_info_result__isset;

class stuff_plan_management_get_today_driver_info_result {
 public:

  stuff_plan_management_get_today_driver_info_result(const stuff_plan_management_get_today_driver_info_result&);
  stuff_plan_management_get_today_driver_info_result& operator=(const stuff_plan_management_get_today_driver_info_result&);
  stuff_plan_management_get_today_driver_info_result() {
  }

  virtual ~stuff_plan_management_get_today_driver_info_result() noexcept;
  std::vector<today_driver_info>  success;
  gen_exp e;

  _stuff_plan_management_get_today_driver_info_result__isset __isset;

  void __set_success(const std::vector<today_driver_info> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_today_driver_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_today_driver_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_today_driver_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_today_driver_info_presult__isset {
  _stuff_plan_management_get_today_driver_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_today_driver_info_presult__isset;

class stuff_plan_management_get_today_driver_info_presult {
 public:


  virtual ~stuff_plan_management_get_today_driver_info_presult() noexcept;
  std::vector<today_driver_info> * success;
  gen_exp e;

  _stuff_plan_management_get_today_driver_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_get_driver_info_args__isset {
  _stuff_plan_management_get_driver_info_args__isset() : silent_id(false) {}
  bool silent_id :1;
} _stuff_plan_management_get_driver_info_args__isset;

class stuff_plan_management_get_driver_info_args {
 public:

  stuff_plan_management_get_driver_info_args(const stuff_plan_management_get_driver_info_args&);
  stuff_plan_management_get_driver_info_args& operator=(const stuff_plan_management_get_driver_info_args&);
  stuff_plan_management_get_driver_info_args() : silent_id() {
  }

  virtual ~stuff_plan_management_get_driver_info_args() noexcept;
  std::string silent_id;

  _stuff_plan_management_get_driver_info_args__isset __isset;

  void __set_silent_id(const std::string& val);

  bool operator == (const stuff_plan_management_get_driver_info_args & rhs) const
  {
    if (!(silent_id == rhs.silent_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_driver_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_driver_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_get_driver_info_pargs {
 public:


  virtual ~stuff_plan_management_get_driver_info_pargs() noexcept;
  const std::string* silent_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_driver_info_result__isset {
  _stuff_plan_management_get_driver_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_driver_info_result__isset;

class stuff_plan_management_get_driver_info_result {
 public:

  stuff_plan_management_get_driver_info_result(const stuff_plan_management_get_driver_info_result&);
  stuff_plan_management_get_driver_info_result& operator=(const stuff_plan_management_get_driver_info_result&);
  stuff_plan_management_get_driver_info_result() {
  }

  virtual ~stuff_plan_management_get_driver_info_result() noexcept;
  driver_detail_info success;
  gen_exp e;

  _stuff_plan_management_get_driver_info_result__isset __isset;

  void __set_success(const driver_detail_info& val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_get_driver_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_get_driver_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_get_driver_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_get_driver_info_presult__isset {
  _stuff_plan_management_get_driver_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_get_driver_info_presult__isset;

class stuff_plan_management_get_driver_info_presult {
 public:


  virtual ~stuff_plan_management_get_driver_info_presult() noexcept;
  driver_detail_info* success;
  gen_exp e;

  _stuff_plan_management_get_driver_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_register_vichele_args__isset {
  _stuff_plan_management_register_vichele_args__isset() : silent_id(false), vichele_id(false) {}
  bool silent_id :1;
  bool vichele_id :1;
} _stuff_plan_management_register_vichele_args__isset;

class stuff_plan_management_register_vichele_args {
 public:

  stuff_plan_management_register_vichele_args(const stuff_plan_management_register_vichele_args&);
  stuff_plan_management_register_vichele_args& operator=(const stuff_plan_management_register_vichele_args&);
  stuff_plan_management_register_vichele_args() : silent_id(), vichele_id(0) {
  }

  virtual ~stuff_plan_management_register_vichele_args() noexcept;
  std::string silent_id;
  int64_t vichele_id;

  _stuff_plan_management_register_vichele_args__isset __isset;

  void __set_silent_id(const std::string& val);

  void __set_vichele_id(const int64_t val);

  bool operator == (const stuff_plan_management_register_vichele_args & rhs) const
  {
    if (!(silent_id == rhs.silent_id))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_register_vichele_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_register_vichele_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_register_vichele_pargs {
 public:


  virtual ~stuff_plan_management_register_vichele_pargs() noexcept;
  const std::string* silent_id;
  const int64_t* vichele_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_register_vichele_result__isset {
  _stuff_plan_management_register_vichele_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_register_vichele_result__isset;

class stuff_plan_management_register_vichele_result {
 public:

  stuff_plan_management_register_vichele_result(const stuff_plan_management_register_vichele_result&);
  stuff_plan_management_register_vichele_result& operator=(const stuff_plan_management_register_vichele_result&);
  stuff_plan_management_register_vichele_result() : success(0) {
  }

  virtual ~stuff_plan_management_register_vichele_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_register_vichele_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_register_vichele_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_register_vichele_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_register_vichele_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_register_vichele_presult__isset {
  _stuff_plan_management_register_vichele_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_register_vichele_presult__isset;

class stuff_plan_management_register_vichele_presult {
 public:


  virtual ~stuff_plan_management_register_vichele_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_register_vichele_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_unregister_vichele_args__isset {
  _stuff_plan_management_unregister_vichele_args__isset() : silent_id(false), vichele_id(false) {}
  bool silent_id :1;
  bool vichele_id :1;
} _stuff_plan_management_unregister_vichele_args__isset;

class stuff_plan_management_unregister_vichele_args {
 public:

  stuff_plan_management_unregister_vichele_args(const stuff_plan_management_unregister_vichele_args&);
  stuff_plan_management_unregister_vichele_args& operator=(const stuff_plan_management_unregister_vichele_args&);
  stuff_plan_management_unregister_vichele_args() : silent_id(), vichele_id(0) {
  }

  virtual ~stuff_plan_management_unregister_vichele_args() noexcept;
  std::string silent_id;
  int64_t vichele_id;

  _stuff_plan_management_unregister_vichele_args__isset __isset;

  void __set_silent_id(const std::string& val);

  void __set_vichele_id(const int64_t val);

  bool operator == (const stuff_plan_management_unregister_vichele_args & rhs) const
  {
    if (!(silent_id == rhs.silent_id))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_unregister_vichele_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_unregister_vichele_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_unregister_vichele_pargs {
 public:


  virtual ~stuff_plan_management_unregister_vichele_pargs() noexcept;
  const std::string* silent_id;
  const int64_t* vichele_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_unregister_vichele_result__isset {
  _stuff_plan_management_unregister_vichele_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_unregister_vichele_result__isset;

class stuff_plan_management_unregister_vichele_result {
 public:

  stuff_plan_management_unregister_vichele_result(const stuff_plan_management_unregister_vichele_result&);
  stuff_plan_management_unregister_vichele_result& operator=(const stuff_plan_management_unregister_vichele_result&);
  stuff_plan_management_unregister_vichele_result() : success(0) {
  }

  virtual ~stuff_plan_management_unregister_vichele_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_unregister_vichele_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_unregister_vichele_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_unregister_vichele_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_unregister_vichele_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_unregister_vichele_presult__isset {
  _stuff_plan_management_unregister_vichele_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_unregister_vichele_presult__isset;

class stuff_plan_management_unregister_vichele_presult {
 public:


  virtual ~stuff_plan_management_unregister_vichele_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_unregister_vichele_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_multi_confirm_plan_args__isset {
  _stuff_plan_management_multi_confirm_plan_args__isset() : ssid(false), plan_ids(false) {}
  bool ssid :1;
  bool plan_ids :1;
} _stuff_plan_management_multi_confirm_plan_args__isset;

class stuff_plan_management_multi_confirm_plan_args {
 public:

  stuff_plan_management_multi_confirm_plan_args(const stuff_plan_management_multi_confirm_plan_args&);
  stuff_plan_management_multi_confirm_plan_args& operator=(const stuff_plan_management_multi_confirm_plan_args&);
  stuff_plan_management_multi_confirm_plan_args() : ssid() {
  }

  virtual ~stuff_plan_management_multi_confirm_plan_args() noexcept;
  std::string ssid;
  std::vector<int64_t>  plan_ids;

  _stuff_plan_management_multi_confirm_plan_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_plan_ids(const std::vector<int64_t> & val);

  bool operator == (const stuff_plan_management_multi_confirm_plan_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(plan_ids == rhs.plan_ids))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_multi_confirm_plan_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_multi_confirm_plan_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_multi_confirm_plan_pargs {
 public:


  virtual ~stuff_plan_management_multi_confirm_plan_pargs() noexcept;
  const std::string* ssid;
  const std::vector<int64_t> * plan_ids;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_multi_confirm_plan_result__isset {
  _stuff_plan_management_multi_confirm_plan_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_multi_confirm_plan_result__isset;

class stuff_plan_management_multi_confirm_plan_result {
 public:

  stuff_plan_management_multi_confirm_plan_result(const stuff_plan_management_multi_confirm_plan_result&);
  stuff_plan_management_multi_confirm_plan_result& operator=(const stuff_plan_management_multi_confirm_plan_result&);
  stuff_plan_management_multi_confirm_plan_result() : success(0) {
  }

  virtual ~stuff_plan_management_multi_confirm_plan_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_multi_confirm_plan_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_multi_confirm_plan_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_multi_confirm_plan_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_multi_confirm_plan_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_multi_confirm_plan_presult__isset {
  _stuff_plan_management_multi_confirm_plan_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_multi_confirm_plan_presult__isset;

class stuff_plan_management_multi_confirm_plan_presult {
 public:


  virtual ~stuff_plan_management_multi_confirm_plan_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_multi_confirm_plan_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_change_driver_args__isset {
  _stuff_plan_management_change_driver_args__isset() : ssid(false), vichele_id(false), driver_name(false), driver_phone(false) {}
  bool ssid :1;
  bool vichele_id :1;
  bool driver_name :1;
  bool driver_phone :1;
} _stuff_plan_management_change_driver_args__isset;

class stuff_plan_management_change_driver_args {
 public:

  stuff_plan_management_change_driver_args(const stuff_plan_management_change_driver_args&);
  stuff_plan_management_change_driver_args& operator=(const stuff_plan_management_change_driver_args&);
  stuff_plan_management_change_driver_args() : ssid(), vichele_id(0), driver_name(), driver_phone() {
  }

  virtual ~stuff_plan_management_change_driver_args() noexcept;
  std::string ssid;
  int64_t vichele_id;
  std::string driver_name;
  std::string driver_phone;

  _stuff_plan_management_change_driver_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_vichele_id(const int64_t val);

  void __set_driver_name(const std::string& val);

  void __set_driver_phone(const std::string& val);

  bool operator == (const stuff_plan_management_change_driver_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    if (!(driver_name == rhs.driver_name))
      return false;
    if (!(driver_phone == rhs.driver_phone))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_change_driver_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_change_driver_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_change_driver_pargs {
 public:


  virtual ~stuff_plan_management_change_driver_pargs() noexcept;
  const std::string* ssid;
  const int64_t* vichele_id;
  const std::string* driver_name;
  const std::string* driver_phone;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_change_driver_result__isset {
  _stuff_plan_management_change_driver_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_change_driver_result__isset;

class stuff_plan_management_change_driver_result {
 public:

  stuff_plan_management_change_driver_result(const stuff_plan_management_change_driver_result&);
  stuff_plan_management_change_driver_result& operator=(const stuff_plan_management_change_driver_result&);
  stuff_plan_management_change_driver_result() : success(0) {
  }

  virtual ~stuff_plan_management_change_driver_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_change_driver_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_change_driver_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_change_driver_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_change_driver_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_change_driver_presult__isset {
  _stuff_plan_management_change_driver_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_change_driver_presult__isset;

class stuff_plan_management_change_driver_presult {
 public:


  virtual ~stuff_plan_management_change_driver_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_change_driver_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _stuff_plan_management_change_plan_price_args__isset {
  _stuff_plan_management_change_plan_price_args__isset() : ssid(false), plan_id(false), new_price(false) {}
  bool ssid :1;
  bool plan_id :1;
  bool new_price :1;
} _stuff_plan_management_change_plan_price_args__isset;

class stuff_plan_management_change_plan_price_args {
 public:

  stuff_plan_management_change_plan_price_args(const stuff_plan_management_change_plan_price_args&);
  stuff_plan_management_change_plan_price_args& operator=(const stuff_plan_management_change_plan_price_args&);
  stuff_plan_management_change_plan_price_args() : ssid(), new_price(0) {
  }

  virtual ~stuff_plan_management_change_plan_price_args() noexcept;
  std::string ssid;
  std::vector<int64_t>  plan_id;
  double new_price;

  _stuff_plan_management_change_plan_price_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_plan_id(const std::vector<int64_t> & val);

  void __set_new_price(const double val);

  bool operator == (const stuff_plan_management_change_plan_price_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(new_price == rhs.new_price))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_change_plan_price_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_change_plan_price_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class stuff_plan_management_change_plan_price_pargs {
 public:


  virtual ~stuff_plan_management_change_plan_price_pargs() noexcept;
  const std::string* ssid;
  const std::vector<int64_t> * plan_id;
  const double* new_price;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_change_plan_price_result__isset {
  _stuff_plan_management_change_plan_price_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_change_plan_price_result__isset;

class stuff_plan_management_change_plan_price_result {
 public:

  stuff_plan_management_change_plan_price_result(const stuff_plan_management_change_plan_price_result&);
  stuff_plan_management_change_plan_price_result& operator=(const stuff_plan_management_change_plan_price_result&);
  stuff_plan_management_change_plan_price_result() : success(0) {
  }

  virtual ~stuff_plan_management_change_plan_price_result() noexcept;
  bool success;
  gen_exp e;

  _stuff_plan_management_change_plan_price_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const stuff_plan_management_change_plan_price_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const stuff_plan_management_change_plan_price_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan_management_change_plan_price_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _stuff_plan_management_change_plan_price_presult__isset {
  _stuff_plan_management_change_plan_price_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _stuff_plan_management_change_plan_price_presult__isset;

class stuff_plan_management_change_plan_price_presult {
 public:


  virtual ~stuff_plan_management_change_plan_price_presult() noexcept;
  bool* success;
  gen_exp e;

  _stuff_plan_management_change_plan_price_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class stuff_plan_managementClient : virtual public stuff_plan_managementIf {
 public:
  stuff_plan_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  stuff_plan_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t create_plan(const stuff_plan& plan, const std::string& ssid, const std::string& proxy_company);
  void send_create_plan(const stuff_plan& plan, const std::string& ssid, const std::string& proxy_company);
  int64_t recv_create_plan();
  void get_created_plan(std::vector<plan_status> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name);
  void send_get_created_plan(const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name);
  void recv_get_created_plan(std::vector<plan_status> & _return);
  void get_company_plan(std::vector<plan_status> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name);
  void send_get_company_plan(const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name);
  void recv_get_company_plan(std::vector<plan_status> & _return);
  void get_plan(stuff_plan& _return, const int64_t plan_id);
  void send_get_plan(const int64_t plan_id);
  void recv_get_plan(stuff_plan& _return);
  bool update_plan(const stuff_plan& plan, const std::string& ssid);
  void send_update_plan(const stuff_plan& plan, const std::string& ssid);
  bool recv_update_plan();
  bool confirm_plan(const int64_t plan_id, const std::string& ssid, const std::string& comment);
  void send_confirm_plan(const int64_t plan_id, const std::string& ssid, const std::string& comment);
  bool recv_confirm_plan();
  bool confirm_pay(const int64_t plan_id, const std::string& ssid, const std::string& comment);
  void send_confirm_pay(const int64_t plan_id, const std::string& ssid, const std::string& comment);
  bool recv_confirm_pay();
  bool confirm_deliver(const int64_t plan_id, const std::string& ssid, const std::vector<deliver_info> & deliver_infos, const std::string& reason);
  void send_confirm_deliver(const int64_t plan_id, const std::string& ssid, const std::vector<deliver_info> & deliver_infos, const std::string& reason);
  bool recv_confirm_deliver();
  void export_plan(std::string& _return, const std::string& ssid, const std::vector<int64_t> & plan_ids);
  void send_export_plan(const std::string& ssid, const std::vector<int64_t> & plan_ids);
  void recv_export_plan(std::string& _return);
  bool except_close(const int64_t plan_id, const std::string& ssid, const std::string& reason);
  void send_except_close(const int64_t plan_id, const std::string& ssid, const std::string& reason);
  bool recv_except_close();
  void verify_plan(std::string& _return, const stuff_plan& plan, const std::string& ssid);
  void send_verify_plan(const stuff_plan& plan, const std::string& ssid);
  void recv_verify_plan(std::string& _return);
  bool send_file_via_email(const std::string& ssid, const std::string& filepath, const std::string& email);
  void send_send_file_via_email(const std::string& ssid, const std::string& filepath, const std::string& email);
  bool recv_send_file_via_email();
  bool reject_plan(const int64_t plan_id, const std::string& ssid, const std::string& reject_reason);
  void send_reject_plan(const int64_t plan_id, const std::string& ssid, const std::string& reject_reason);
  bool recv_reject_plan();
  void search_plan_by_driver_phone(std::vector<plan_number_id> & _return, const std::string& phone);
  void send_search_plan_by_driver_phone(const std::string& phone);
  void recv_search_plan_by_driver_phone(std::vector<plan_number_id> & _return);
  void get_status_rule(std::vector<plan_status_rule> & _return, const int64_t plan_id);
  void send_get_status_rule(const int64_t plan_id);
  void recv_get_status_rule(std::vector<plan_status_rule> & _return);
  void get_change_rule(std::vector<bool> & _return, const std::string& ssid, const int64_t plan_id);
  void send_get_change_rule(const std::string& ssid, const int64_t plan_id);
  void recv_get_change_rule(std::vector<bool> & _return);
  void clean_unclose_plan();
  void send_clean_unclose_plan();
  void recv_clean_unclose_plan();
  void get_today_statistics(std::vector<vichele_statistics> & _return, const std::string& ssid);
  void send_get_today_statistics(const std::string& ssid);
  void recv_get_today_statistics(std::vector<vichele_statistics> & _return);
  bool plan_created_by_user(const std::string& ssid, const int64_t plan_id);
  void send_plan_created_by_user(const std::string& ssid, const int64_t plan_id);
  bool recv_plan_created_by_user();
  void export_plan_by_plan_date(std::string& _return, const std::string& ssid, const std::string& plan_date, const std::string& create_date);
  void send_export_plan_by_plan_date(const std::string& ssid, const std::string& plan_date, const std::string& create_date);
  void recv_export_plan_by_plan_date(std::string& _return);
  void export_plan_by_create_date(std::string& _return, const std::string& ssid, const int64_t begin_date, const int64_t end_date);
  void send_export_plan_by_create_date(const std::string& ssid, const int64_t begin_date, const int64_t end_date);
  void recv_export_plan_by_create_date(std::string& _return);
  void search_plan_by_vichele_number(std::vector<vichele_search_result> & _return, const std::string& ssid, const std::string& vichele_number);
  void send_search_plan_by_vichele_number(const std::string& ssid, const std::string& vichele_number);
  void recv_search_plan_by_vichele_number(std::vector<vichele_search_result> & _return);
  void get_tomorrow_statistics(std::vector<vichele_statistics> & _return, const std::string& ssid);
  void send_get_tomorrow_statistics(const std::string& ssid);
  void recv_get_tomorrow_statistics(std::vector<vichele_statistics> & _return);
  void get_company_brief(company_plan_brief& _return, const std::string& ssid);
  void send_get_company_brief(const std::string& ssid);
  void recv_get_company_brief(company_plan_brief& _return);
  bool push_user_pay(const std::string& ssid, const int64_t plan_id);
  void send_push_user_pay(const std::string& ssid, const int64_t plan_id);
  bool recv_push_user_pay();
  int64_t get_count_by_status(const std::string& ssid, const int64_t status);
  void send_get_count_by_status(const std::string& ssid, const int64_t status);
  int64_t recv_get_count_by_status();
  bool cancel_vichele_from_plan(const std::string& ssid, const std::vector<int64_t> & ids);
  void send_cancel_vichele_from_plan(const std::string& ssid, const std::vector<int64_t> & ids);
  bool recv_cancel_vichele_from_plan();
  void driver_silent_login(std::string& _return, const std::string& code);
  void send_driver_silent_login(const std::string& code);
  void recv_driver_silent_login(std::string& _return);
  bool driver_silent_send_sms(const std::string& driver_phone);
  void send_driver_silent_send_sms(const std::string& driver_phone);
  bool recv_driver_silent_send_sms();
  void driver_silent_register(std::string& _return, const std::string& code, const std::string& driver_id, const std::string& driver_phone, const std::string& verify_code);
  void send_driver_silent_register(const std::string& code, const std::string& driver_id, const std::string& driver_phone, const std::string& verify_code);
  void recv_driver_silent_register(std::string& _return);
  void driver_silent_unregister(const std::string& silent_id);
  void send_driver_silent_unregister(const std::string& silent_id);
  void recv_driver_silent_unregister();
  bool verify_driver_silent_login(const std::string& silent_id);
  void send_verify_driver_silent_login(const std::string& silent_id);
  bool recv_verify_driver_silent_login();
  void get_today_driver_info(std::vector<today_driver_info> & _return, const std::string& silent_id);
  void send_get_today_driver_info(const std::string& silent_id);
  void recv_get_today_driver_info(std::vector<today_driver_info> & _return);
  void get_driver_info(driver_detail_info& _return, const std::string& silent_id);
  void send_get_driver_info(const std::string& silent_id);
  void recv_get_driver_info(driver_detail_info& _return);
  bool register_vichele(const std::string& silent_id, const int64_t vichele_id);
  void send_register_vichele(const std::string& silent_id, const int64_t vichele_id);
  bool recv_register_vichele();
  bool unregister_vichele(const std::string& silent_id, const int64_t vichele_id);
  void send_unregister_vichele(const std::string& silent_id, const int64_t vichele_id);
  bool recv_unregister_vichele();
  bool multi_confirm_plan(const std::string& ssid, const std::vector<int64_t> & plan_ids);
  void send_multi_confirm_plan(const std::string& ssid, const std::vector<int64_t> & plan_ids);
  bool recv_multi_confirm_plan();
  bool change_driver(const std::string& ssid, const int64_t vichele_id, const std::string& driver_name, const std::string& driver_phone);
  void send_change_driver(const std::string& ssid, const int64_t vichele_id, const std::string& driver_name, const std::string& driver_phone);
  bool recv_change_driver();
  bool change_plan_price(const std::string& ssid, const std::vector<int64_t> & plan_id, const double new_price);
  void send_change_plan_price(const std::string& ssid, const std::vector<int64_t> & plan_id, const double new_price);
  bool recv_change_plan_price();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class stuff_plan_managementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<stuff_plan_managementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (stuff_plan_managementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_created_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_company_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_confirm_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_confirm_pay(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_confirm_deliver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_export_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_except_close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_send_file_via_email(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reject_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search_plan_by_driver_phone(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_status_rule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_change_rule(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clean_unclose_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_today_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_plan_created_by_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_export_plan_by_plan_date(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_export_plan_by_create_date(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_search_plan_by_vichele_number(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_tomorrow_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_company_brief(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_push_user_pay(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_count_by_status(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancel_vichele_from_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_driver_silent_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_driver_silent_send_sms(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_driver_silent_register(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_driver_silent_unregister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_driver_silent_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_today_driver_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_driver_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_vichele(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregister_vichele(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_multi_confirm_plan(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_change_driver(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_change_plan_price(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  stuff_plan_managementProcessor(::std::shared_ptr<stuff_plan_managementIf> iface) :
    iface_(iface) {
    processMap_["create_plan"] = &stuff_plan_managementProcessor::process_create_plan;
    processMap_["get_created_plan"] = &stuff_plan_managementProcessor::process_get_created_plan;
    processMap_["get_company_plan"] = &stuff_plan_managementProcessor::process_get_company_plan;
    processMap_["get_plan"] = &stuff_plan_managementProcessor::process_get_plan;
    processMap_["update_plan"] = &stuff_plan_managementProcessor::process_update_plan;
    processMap_["confirm_plan"] = &stuff_plan_managementProcessor::process_confirm_plan;
    processMap_["confirm_pay"] = &stuff_plan_managementProcessor::process_confirm_pay;
    processMap_["confirm_deliver"] = &stuff_plan_managementProcessor::process_confirm_deliver;
    processMap_["export_plan"] = &stuff_plan_managementProcessor::process_export_plan;
    processMap_["except_close"] = &stuff_plan_managementProcessor::process_except_close;
    processMap_["verify_plan"] = &stuff_plan_managementProcessor::process_verify_plan;
    processMap_["send_file_via_email"] = &stuff_plan_managementProcessor::process_send_file_via_email;
    processMap_["reject_plan"] = &stuff_plan_managementProcessor::process_reject_plan;
    processMap_["search_plan_by_driver_phone"] = &stuff_plan_managementProcessor::process_search_plan_by_driver_phone;
    processMap_["get_status_rule"] = &stuff_plan_managementProcessor::process_get_status_rule;
    processMap_["get_change_rule"] = &stuff_plan_managementProcessor::process_get_change_rule;
    processMap_["clean_unclose_plan"] = &stuff_plan_managementProcessor::process_clean_unclose_plan;
    processMap_["get_today_statistics"] = &stuff_plan_managementProcessor::process_get_today_statistics;
    processMap_["plan_created_by_user"] = &stuff_plan_managementProcessor::process_plan_created_by_user;
    processMap_["export_plan_by_plan_date"] = &stuff_plan_managementProcessor::process_export_plan_by_plan_date;
    processMap_["export_plan_by_create_date"] = &stuff_plan_managementProcessor::process_export_plan_by_create_date;
    processMap_["search_plan_by_vichele_number"] = &stuff_plan_managementProcessor::process_search_plan_by_vichele_number;
    processMap_["get_tomorrow_statistics"] = &stuff_plan_managementProcessor::process_get_tomorrow_statistics;
    processMap_["get_company_brief"] = &stuff_plan_managementProcessor::process_get_company_brief;
    processMap_["push_user_pay"] = &stuff_plan_managementProcessor::process_push_user_pay;
    processMap_["get_count_by_status"] = &stuff_plan_managementProcessor::process_get_count_by_status;
    processMap_["cancel_vichele_from_plan"] = &stuff_plan_managementProcessor::process_cancel_vichele_from_plan;
    processMap_["driver_silent_login"] = &stuff_plan_managementProcessor::process_driver_silent_login;
    processMap_["driver_silent_send_sms"] = &stuff_plan_managementProcessor::process_driver_silent_send_sms;
    processMap_["driver_silent_register"] = &stuff_plan_managementProcessor::process_driver_silent_register;
    processMap_["driver_silent_unregister"] = &stuff_plan_managementProcessor::process_driver_silent_unregister;
    processMap_["verify_driver_silent_login"] = &stuff_plan_managementProcessor::process_verify_driver_silent_login;
    processMap_["get_today_driver_info"] = &stuff_plan_managementProcessor::process_get_today_driver_info;
    processMap_["get_driver_info"] = &stuff_plan_managementProcessor::process_get_driver_info;
    processMap_["register_vichele"] = &stuff_plan_managementProcessor::process_register_vichele;
    processMap_["unregister_vichele"] = &stuff_plan_managementProcessor::process_unregister_vichele;
    processMap_["multi_confirm_plan"] = &stuff_plan_managementProcessor::process_multi_confirm_plan;
    processMap_["change_driver"] = &stuff_plan_managementProcessor::process_change_driver;
    processMap_["change_plan_price"] = &stuff_plan_managementProcessor::process_change_plan_price;
  }

  virtual ~stuff_plan_managementProcessor() {}
};

class stuff_plan_managementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  stuff_plan_managementProcessorFactory(const ::std::shared_ptr< stuff_plan_managementIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< stuff_plan_managementIfFactory > handlerFactory_;
};

class stuff_plan_managementMultiface : virtual public stuff_plan_managementIf {
 public:
  stuff_plan_managementMultiface(std::vector<std::shared_ptr<stuff_plan_managementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~stuff_plan_managementMultiface() {}
 protected:
  std::vector<std::shared_ptr<stuff_plan_managementIf> > ifaces_;
  stuff_plan_managementMultiface() {}
  void add(::std::shared_ptr<stuff_plan_managementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t create_plan(const stuff_plan& plan, const std::string& ssid, const std::string& proxy_company) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_plan(plan, ssid, proxy_company);
    }
    return ifaces_[i]->create_plan(plan, ssid, proxy_company);
  }

  void get_created_plan(std::vector<plan_status> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_created_plan(_return, ssid, anchor, status, stuff_name, company_name);
    }
    ifaces_[i]->get_created_plan(_return, ssid, anchor, status, stuff_name, company_name);
    return;
  }

  void get_company_plan(std::vector<plan_status> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_company_plan(_return, ssid, anchor, status, stuff_name, company_name);
    }
    ifaces_[i]->get_company_plan(_return, ssid, anchor, status, stuff_name, company_name);
    return;
  }

  void get_plan(stuff_plan& _return, const int64_t plan_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_plan(_return, plan_id);
    }
    ifaces_[i]->get_plan(_return, plan_id);
    return;
  }

  bool update_plan(const stuff_plan& plan, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_plan(plan, ssid);
    }
    return ifaces_[i]->update_plan(plan, ssid);
  }

  bool confirm_plan(const int64_t plan_id, const std::string& ssid, const std::string& comment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->confirm_plan(plan_id, ssid, comment);
    }
    return ifaces_[i]->confirm_plan(plan_id, ssid, comment);
  }

  bool confirm_pay(const int64_t plan_id, const std::string& ssid, const std::string& comment) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->confirm_pay(plan_id, ssid, comment);
    }
    return ifaces_[i]->confirm_pay(plan_id, ssid, comment);
  }

  bool confirm_deliver(const int64_t plan_id, const std::string& ssid, const std::vector<deliver_info> & deliver_infos, const std::string& reason) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->confirm_deliver(plan_id, ssid, deliver_infos, reason);
    }
    return ifaces_[i]->confirm_deliver(plan_id, ssid, deliver_infos, reason);
  }

  void export_plan(std::string& _return, const std::string& ssid, const std::vector<int64_t> & plan_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->export_plan(_return, ssid, plan_ids);
    }
    ifaces_[i]->export_plan(_return, ssid, plan_ids);
    return;
  }

  bool except_close(const int64_t plan_id, const std::string& ssid, const std::string& reason) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->except_close(plan_id, ssid, reason);
    }
    return ifaces_[i]->except_close(plan_id, ssid, reason);
  }

  void verify_plan(std::string& _return, const stuff_plan& plan, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_plan(_return, plan, ssid);
    }
    ifaces_[i]->verify_plan(_return, plan, ssid);
    return;
  }

  bool send_file_via_email(const std::string& ssid, const std::string& filepath, const std::string& email) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->send_file_via_email(ssid, filepath, email);
    }
    return ifaces_[i]->send_file_via_email(ssid, filepath, email);
  }

  bool reject_plan(const int64_t plan_id, const std::string& ssid, const std::string& reject_reason) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reject_plan(plan_id, ssid, reject_reason);
    }
    return ifaces_[i]->reject_plan(plan_id, ssid, reject_reason);
  }

  void search_plan_by_driver_phone(std::vector<plan_number_id> & _return, const std::string& phone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search_plan_by_driver_phone(_return, phone);
    }
    ifaces_[i]->search_plan_by_driver_phone(_return, phone);
    return;
  }

  void get_status_rule(std::vector<plan_status_rule> & _return, const int64_t plan_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_status_rule(_return, plan_id);
    }
    ifaces_[i]->get_status_rule(_return, plan_id);
    return;
  }

  void get_change_rule(std::vector<bool> & _return, const std::string& ssid, const int64_t plan_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_change_rule(_return, ssid, plan_id);
    }
    ifaces_[i]->get_change_rule(_return, ssid, plan_id);
    return;
  }

  void clean_unclose_plan() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clean_unclose_plan();
    }
    ifaces_[i]->clean_unclose_plan();
  }

  void get_today_statistics(std::vector<vichele_statistics> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_today_statistics(_return, ssid);
    }
    ifaces_[i]->get_today_statistics(_return, ssid);
    return;
  }

  bool plan_created_by_user(const std::string& ssid, const int64_t plan_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->plan_created_by_user(ssid, plan_id);
    }
    return ifaces_[i]->plan_created_by_user(ssid, plan_id);
  }

  void export_plan_by_plan_date(std::string& _return, const std::string& ssid, const std::string& plan_date, const std::string& create_date) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->export_plan_by_plan_date(_return, ssid, plan_date, create_date);
    }
    ifaces_[i]->export_plan_by_plan_date(_return, ssid, plan_date, create_date);
    return;
  }

  void export_plan_by_create_date(std::string& _return, const std::string& ssid, const int64_t begin_date, const int64_t end_date) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->export_plan_by_create_date(_return, ssid, begin_date, end_date);
    }
    ifaces_[i]->export_plan_by_create_date(_return, ssid, begin_date, end_date);
    return;
  }

  void search_plan_by_vichele_number(std::vector<vichele_search_result> & _return, const std::string& ssid, const std::string& vichele_number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->search_plan_by_vichele_number(_return, ssid, vichele_number);
    }
    ifaces_[i]->search_plan_by_vichele_number(_return, ssid, vichele_number);
    return;
  }

  void get_tomorrow_statistics(std::vector<vichele_statistics> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_tomorrow_statistics(_return, ssid);
    }
    ifaces_[i]->get_tomorrow_statistics(_return, ssid);
    return;
  }

  void get_company_brief(company_plan_brief& _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_company_brief(_return, ssid);
    }
    ifaces_[i]->get_company_brief(_return, ssid);
    return;
  }

  bool push_user_pay(const std::string& ssid, const int64_t plan_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push_user_pay(ssid, plan_id);
    }
    return ifaces_[i]->push_user_pay(ssid, plan_id);
  }

  int64_t get_count_by_status(const std::string& ssid, const int64_t status) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_count_by_status(ssid, status);
    }
    return ifaces_[i]->get_count_by_status(ssid, status);
  }

  bool cancel_vichele_from_plan(const std::string& ssid, const std::vector<int64_t> & ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancel_vichele_from_plan(ssid, ids);
    }
    return ifaces_[i]->cancel_vichele_from_plan(ssid, ids);
  }

  void driver_silent_login(std::string& _return, const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->driver_silent_login(_return, code);
    }
    ifaces_[i]->driver_silent_login(_return, code);
    return;
  }

  bool driver_silent_send_sms(const std::string& driver_phone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->driver_silent_send_sms(driver_phone);
    }
    return ifaces_[i]->driver_silent_send_sms(driver_phone);
  }

  void driver_silent_register(std::string& _return, const std::string& code, const std::string& driver_id, const std::string& driver_phone, const std::string& verify_code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->driver_silent_register(_return, code, driver_id, driver_phone, verify_code);
    }
    ifaces_[i]->driver_silent_register(_return, code, driver_id, driver_phone, verify_code);
    return;
  }

  void driver_silent_unregister(const std::string& silent_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->driver_silent_unregister(silent_id);
    }
    ifaces_[i]->driver_silent_unregister(silent_id);
  }

  bool verify_driver_silent_login(const std::string& silent_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_driver_silent_login(silent_id);
    }
    return ifaces_[i]->verify_driver_silent_login(silent_id);
  }

  void get_today_driver_info(std::vector<today_driver_info> & _return, const std::string& silent_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_today_driver_info(_return, silent_id);
    }
    ifaces_[i]->get_today_driver_info(_return, silent_id);
    return;
  }

  void get_driver_info(driver_detail_info& _return, const std::string& silent_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_driver_info(_return, silent_id);
    }
    ifaces_[i]->get_driver_info(_return, silent_id);
    return;
  }

  bool register_vichele(const std::string& silent_id, const int64_t vichele_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_vichele(silent_id, vichele_id);
    }
    return ifaces_[i]->register_vichele(silent_id, vichele_id);
  }

  bool unregister_vichele(const std::string& silent_id, const int64_t vichele_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unregister_vichele(silent_id, vichele_id);
    }
    return ifaces_[i]->unregister_vichele(silent_id, vichele_id);
  }

  bool multi_confirm_plan(const std::string& ssid, const std::vector<int64_t> & plan_ids) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->multi_confirm_plan(ssid, plan_ids);
    }
    return ifaces_[i]->multi_confirm_plan(ssid, plan_ids);
  }

  bool change_driver(const std::string& ssid, const int64_t vichele_id, const std::string& driver_name, const std::string& driver_phone) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->change_driver(ssid, vichele_id, driver_name, driver_phone);
    }
    return ifaces_[i]->change_driver(ssid, vichele_id, driver_name, driver_phone);
  }

  bool change_plan_price(const std::string& ssid, const std::vector<int64_t> & plan_id, const double new_price) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->change_plan_price(ssid, plan_id, new_price);
    }
    return ifaces_[i]->change_plan_price(ssid, plan_id, new_price);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class stuff_plan_managementConcurrentClient : virtual public stuff_plan_managementIf {
 public:
  stuff_plan_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  stuff_plan_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  int64_t create_plan(const stuff_plan& plan, const std::string& ssid, const std::string& proxy_company);
  int32_t send_create_plan(const stuff_plan& plan, const std::string& ssid, const std::string& proxy_company);
  int64_t recv_create_plan(const int32_t seqid);
  void get_created_plan(std::vector<plan_status> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name);
  int32_t send_get_created_plan(const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name);
  void recv_get_created_plan(std::vector<plan_status> & _return, const int32_t seqid);
  void get_company_plan(std::vector<plan_status> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name);
  int32_t send_get_company_plan(const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& stuff_name, const std::string& company_name);
  void recv_get_company_plan(std::vector<plan_status> & _return, const int32_t seqid);
  void get_plan(stuff_plan& _return, const int64_t plan_id);
  int32_t send_get_plan(const int64_t plan_id);
  void recv_get_plan(stuff_plan& _return, const int32_t seqid);
  bool update_plan(const stuff_plan& plan, const std::string& ssid);
  int32_t send_update_plan(const stuff_plan& plan, const std::string& ssid);
  bool recv_update_plan(const int32_t seqid);
  bool confirm_plan(const int64_t plan_id, const std::string& ssid, const std::string& comment);
  int32_t send_confirm_plan(const int64_t plan_id, const std::string& ssid, const std::string& comment);
  bool recv_confirm_plan(const int32_t seqid);
  bool confirm_pay(const int64_t plan_id, const std::string& ssid, const std::string& comment);
  int32_t send_confirm_pay(const int64_t plan_id, const std::string& ssid, const std::string& comment);
  bool recv_confirm_pay(const int32_t seqid);
  bool confirm_deliver(const int64_t plan_id, const std::string& ssid, const std::vector<deliver_info> & deliver_infos, const std::string& reason);
  int32_t send_confirm_deliver(const int64_t plan_id, const std::string& ssid, const std::vector<deliver_info> & deliver_infos, const std::string& reason);
  bool recv_confirm_deliver(const int32_t seqid);
  void export_plan(std::string& _return, const std::string& ssid, const std::vector<int64_t> & plan_ids);
  int32_t send_export_plan(const std::string& ssid, const std::vector<int64_t> & plan_ids);
  void recv_export_plan(std::string& _return, const int32_t seqid);
  bool except_close(const int64_t plan_id, const std::string& ssid, const std::string& reason);
  int32_t send_except_close(const int64_t plan_id, const std::string& ssid, const std::string& reason);
  bool recv_except_close(const int32_t seqid);
  void verify_plan(std::string& _return, const stuff_plan& plan, const std::string& ssid);
  int32_t send_verify_plan(const stuff_plan& plan, const std::string& ssid);
  void recv_verify_plan(std::string& _return, const int32_t seqid);
  bool send_file_via_email(const std::string& ssid, const std::string& filepath, const std::string& email);
  int32_t send_send_file_via_email(const std::string& ssid, const std::string& filepath, const std::string& email);
  bool recv_send_file_via_email(const int32_t seqid);
  bool reject_plan(const int64_t plan_id, const std::string& ssid, const std::string& reject_reason);
  int32_t send_reject_plan(const int64_t plan_id, const std::string& ssid, const std::string& reject_reason);
  bool recv_reject_plan(const int32_t seqid);
  void search_plan_by_driver_phone(std::vector<plan_number_id> & _return, const std::string& phone);
  int32_t send_search_plan_by_driver_phone(const std::string& phone);
  void recv_search_plan_by_driver_phone(std::vector<plan_number_id> & _return, const int32_t seqid);
  void get_status_rule(std::vector<plan_status_rule> & _return, const int64_t plan_id);
  int32_t send_get_status_rule(const int64_t plan_id);
  void recv_get_status_rule(std::vector<plan_status_rule> & _return, const int32_t seqid);
  void get_change_rule(std::vector<bool> & _return, const std::string& ssid, const int64_t plan_id);
  int32_t send_get_change_rule(const std::string& ssid, const int64_t plan_id);
  void recv_get_change_rule(std::vector<bool> & _return, const int32_t seqid);
  void clean_unclose_plan();
  int32_t send_clean_unclose_plan();
  void recv_clean_unclose_plan(const int32_t seqid);
  void get_today_statistics(std::vector<vichele_statistics> & _return, const std::string& ssid);
  int32_t send_get_today_statistics(const std::string& ssid);
  void recv_get_today_statistics(std::vector<vichele_statistics> & _return, const int32_t seqid);
  bool plan_created_by_user(const std::string& ssid, const int64_t plan_id);
  int32_t send_plan_created_by_user(const std::string& ssid, const int64_t plan_id);
  bool recv_plan_created_by_user(const int32_t seqid);
  void export_plan_by_plan_date(std::string& _return, const std::string& ssid, const std::string& plan_date, const std::string& create_date);
  int32_t send_export_plan_by_plan_date(const std::string& ssid, const std::string& plan_date, const std::string& create_date);
  void recv_export_plan_by_plan_date(std::string& _return, const int32_t seqid);
  void export_plan_by_create_date(std::string& _return, const std::string& ssid, const int64_t begin_date, const int64_t end_date);
  int32_t send_export_plan_by_create_date(const std::string& ssid, const int64_t begin_date, const int64_t end_date);
  void recv_export_plan_by_create_date(std::string& _return, const int32_t seqid);
  void search_plan_by_vichele_number(std::vector<vichele_search_result> & _return, const std::string& ssid, const std::string& vichele_number);
  int32_t send_search_plan_by_vichele_number(const std::string& ssid, const std::string& vichele_number);
  void recv_search_plan_by_vichele_number(std::vector<vichele_search_result> & _return, const int32_t seqid);
  void get_tomorrow_statistics(std::vector<vichele_statistics> & _return, const std::string& ssid);
  int32_t send_get_tomorrow_statistics(const std::string& ssid);
  void recv_get_tomorrow_statistics(std::vector<vichele_statistics> & _return, const int32_t seqid);
  void get_company_brief(company_plan_brief& _return, const std::string& ssid);
  int32_t send_get_company_brief(const std::string& ssid);
  void recv_get_company_brief(company_plan_brief& _return, const int32_t seqid);
  bool push_user_pay(const std::string& ssid, const int64_t plan_id);
  int32_t send_push_user_pay(const std::string& ssid, const int64_t plan_id);
  bool recv_push_user_pay(const int32_t seqid);
  int64_t get_count_by_status(const std::string& ssid, const int64_t status);
  int32_t send_get_count_by_status(const std::string& ssid, const int64_t status);
  int64_t recv_get_count_by_status(const int32_t seqid);
  bool cancel_vichele_from_plan(const std::string& ssid, const std::vector<int64_t> & ids);
  int32_t send_cancel_vichele_from_plan(const std::string& ssid, const std::vector<int64_t> & ids);
  bool recv_cancel_vichele_from_plan(const int32_t seqid);
  void driver_silent_login(std::string& _return, const std::string& code);
  int32_t send_driver_silent_login(const std::string& code);
  void recv_driver_silent_login(std::string& _return, const int32_t seqid);
  bool driver_silent_send_sms(const std::string& driver_phone);
  int32_t send_driver_silent_send_sms(const std::string& driver_phone);
  bool recv_driver_silent_send_sms(const int32_t seqid);
  void driver_silent_register(std::string& _return, const std::string& code, const std::string& driver_id, const std::string& driver_phone, const std::string& verify_code);
  int32_t send_driver_silent_register(const std::string& code, const std::string& driver_id, const std::string& driver_phone, const std::string& verify_code);
  void recv_driver_silent_register(std::string& _return, const int32_t seqid);
  void driver_silent_unregister(const std::string& silent_id);
  int32_t send_driver_silent_unregister(const std::string& silent_id);
  void recv_driver_silent_unregister(const int32_t seqid);
  bool verify_driver_silent_login(const std::string& silent_id);
  int32_t send_verify_driver_silent_login(const std::string& silent_id);
  bool recv_verify_driver_silent_login(const int32_t seqid);
  void get_today_driver_info(std::vector<today_driver_info> & _return, const std::string& silent_id);
  int32_t send_get_today_driver_info(const std::string& silent_id);
  void recv_get_today_driver_info(std::vector<today_driver_info> & _return, const int32_t seqid);
  void get_driver_info(driver_detail_info& _return, const std::string& silent_id);
  int32_t send_get_driver_info(const std::string& silent_id);
  void recv_get_driver_info(driver_detail_info& _return, const int32_t seqid);
  bool register_vichele(const std::string& silent_id, const int64_t vichele_id);
  int32_t send_register_vichele(const std::string& silent_id, const int64_t vichele_id);
  bool recv_register_vichele(const int32_t seqid);
  bool unregister_vichele(const std::string& silent_id, const int64_t vichele_id);
  int32_t send_unregister_vichele(const std::string& silent_id, const int64_t vichele_id);
  bool recv_unregister_vichele(const int32_t seqid);
  bool multi_confirm_plan(const std::string& ssid, const std::vector<int64_t> & plan_ids);
  int32_t send_multi_confirm_plan(const std::string& ssid, const std::vector<int64_t> & plan_ids);
  bool recv_multi_confirm_plan(const int32_t seqid);
  bool change_driver(const std::string& ssid, const int64_t vichele_id, const std::string& driver_name, const std::string& driver_phone);
  int32_t send_change_driver(const std::string& ssid, const int64_t vichele_id, const std::string& driver_name, const std::string& driver_phone);
  bool recv_change_driver(const int32_t seqid);
  bool change_plan_price(const std::string& ssid, const std::vector<int64_t> & plan_id, const double new_price);
  int32_t send_change_plan_price(const std::string& ssid, const std::vector<int64_t> & plan_id, const double new_price);
  bool recv_change_plan_price(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
