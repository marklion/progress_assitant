/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef idl_TYPES_H
#define idl_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>




class gen_exp;

class user_info;

class driver_info;

class vichele_info_t;

class stuff_detail;

class user_apply;

class company_address_contact_info;

class company_attachment;

class plan_status_rule;

class common_contract;

class real_access_record;

class company_work_time;

class company_positon_lat_lag;

class third_dev_info;

class plan_confirm_info;

class pay_confirm_info;

class vichele_in_plan;

class stuff_plan;

class plan_status;

class plan_number_id;

class deliver_info;

class vichele_statistics;

class vichele_stuff_statistics;

class vichele_search_result;

class company_plan_brief;

class today_driver_info;

class driver_detail_info;

class api_extra_transformation;

class api_transformation_info;

class call_vehicle_req;

class meta_stuff_info;

class vehicle_info_resp;

class push_weight_req;

class push_base_req;

class push_balance_req;

class vichele_stay_alone;

class silent_user_info;

class vichele_team_member;

class vichele_team;

class supplier_basic_info;

class single_vichele_brief;

typedef struct _gen_exp__isset {
  _gen_exp__isset() : msg(false) {}
  bool msg :1;
} _gen_exp__isset;

class gen_exp : public ::apache::thrift::TException {
 public:

  gen_exp(const gen_exp&);
  gen_exp& operator=(const gen_exp&);
  gen_exp() : msg() {
  }

  virtual ~gen_exp() noexcept;
  std::string msg;

  _gen_exp__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const gen_exp & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const gen_exp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const gen_exp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const noexcept;
};

void swap(gen_exp &a, gen_exp &b);

std::ostream& operator<<(std::ostream& out, const gen_exp& obj);

typedef struct _user_info__isset {
  _user_info__isset() : user_id(false), name(false), logo(false), company(false), buyer(false), phone(false), groupid(false) {}
  bool user_id :1;
  bool name :1;
  bool logo :1;
  bool company :1;
  bool buyer :1;
  bool phone :1;
  bool groupid :1;
} _user_info__isset;

class user_info : public virtual ::apache::thrift::TBase {
 public:

  user_info(const user_info&);
  user_info& operator=(const user_info&);
  user_info() : user_id(0), name(), logo(), company(), buyer(0), phone(), groupid(0) {
  }

  virtual ~user_info() noexcept;
  int64_t user_id;
  std::string name;
  std::string logo;
  std::string company;
  bool buyer;
  std::string phone;
  int64_t groupid;

  _user_info__isset __isset;

  void __set_user_id(const int64_t val);

  void __set_name(const std::string& val);

  void __set_logo(const std::string& val);

  void __set_company(const std::string& val);

  void __set_buyer(const bool val);

  void __set_phone(const std::string& val);

  void __set_groupid(const int64_t val);

  bool operator == (const user_info & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(logo == rhs.logo))
      return false;
    if (!(company == rhs.company))
      return false;
    if (!(buyer == rhs.buyer))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(groupid == rhs.groupid))
      return false;
    return true;
  }
  bool operator != (const user_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(user_info &a, user_info &b);

std::ostream& operator<<(std::ostream& out, const user_info& obj);

typedef struct _driver_info__isset {
  _driver_info__isset() : name(false), phone(false), id(false) {}
  bool name :1;
  bool phone :1;
  bool id :1;
} _driver_info__isset;

class driver_info : public virtual ::apache::thrift::TBase {
 public:

  driver_info(const driver_info&);
  driver_info& operator=(const driver_info&);
  driver_info() : name(), phone(), id(0) {
  }

  virtual ~driver_info() noexcept;
  std::string name;
  std::string phone;
  int64_t id;

  _driver_info__isset __isset;

  void __set_name(const std::string& val);

  void __set_phone(const std::string& val);

  void __set_id(const int64_t val);

  bool operator == (const driver_info & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const driver_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const driver_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(driver_info &a, driver_info &b);

std::ostream& operator<<(std::ostream& out, const driver_info& obj);

typedef struct _vichele_info_t__isset {
  _vichele_info_t__isset() : number(false), id(false) {}
  bool number :1;
  bool id :1;
} _vichele_info_t__isset;

class vichele_info_t : public virtual ::apache::thrift::TBase {
 public:

  vichele_info_t(const vichele_info_t&);
  vichele_info_t& operator=(const vichele_info_t&);
  vichele_info_t() : number(), id(0) {
  }

  virtual ~vichele_info_t() noexcept;
  std::string number;
  int64_t id;

  _vichele_info_t__isset __isset;

  void __set_number(const std::string& val);

  void __set_id(const int64_t val);

  bool operator == (const vichele_info_t & rhs) const
  {
    if (!(number == rhs.number))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const vichele_info_t &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_info_t & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(vichele_info_t &a, vichele_info_t &b);

std::ostream& operator<<(std::ostream& out, const vichele_info_t& obj);

typedef struct _stuff_detail__isset {
  _stuff_detail__isset() : name(false), last(false), price(false), company(false), type_id(false), saling(false), company_address(false), company_contact(false) {}
  bool name :1;
  bool last :1;
  bool price :1;
  bool company :1;
  bool type_id :1;
  bool saling :1;
  bool company_address :1;
  bool company_contact :1;
} _stuff_detail__isset;

class stuff_detail : public virtual ::apache::thrift::TBase {
 public:

  stuff_detail(const stuff_detail&);
  stuff_detail& operator=(const stuff_detail&);
  stuff_detail() : name(), last(), price(0), company(), type_id(0), saling(0), company_address(), company_contact() {
  }

  virtual ~stuff_detail() noexcept;
  std::string name;
  std::string last;
  int64_t price;
  std::string company;
  int64_t type_id;
  bool saling;
  std::string company_address;
  std::string company_contact;

  _stuff_detail__isset __isset;

  void __set_name(const std::string& val);

  void __set_last(const std::string& val);

  void __set_price(const int64_t val);

  void __set_company(const std::string& val);

  void __set_type_id(const int64_t val);

  void __set_saling(const bool val);

  void __set_company_address(const std::string& val);

  void __set_company_contact(const std::string& val);

  bool operator == (const stuff_detail & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(last == rhs.last))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(company == rhs.company))
      return false;
    if (!(type_id == rhs.type_id))
      return false;
    if (!(saling == rhs.saling))
      return false;
    if (!(company_address == rhs.company_address))
      return false;
    if (!(company_contact == rhs.company_contact))
      return false;
    return true;
  }
  bool operator != (const stuff_detail &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_detail & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(stuff_detail &a, stuff_detail &b);

std::ostream& operator<<(std::ostream& out, const stuff_detail& obj);

typedef struct _user_apply__isset {
  _user_apply__isset() : name(false), phone(false), logo(false), apply_id(false), status(false) {}
  bool name :1;
  bool phone :1;
  bool logo :1;
  bool apply_id :1;
  bool status :1;
} _user_apply__isset;

class user_apply : public virtual ::apache::thrift::TBase {
 public:

  user_apply(const user_apply&);
  user_apply& operator=(const user_apply&);
  user_apply() : name(), phone(), logo(), apply_id(0), status(0) {
  }

  virtual ~user_apply() noexcept;
  std::string name;
  std::string phone;
  std::string logo;
  int64_t apply_id;
  int64_t status;

  _user_apply__isset __isset;

  void __set_name(const std::string& val);

  void __set_phone(const std::string& val);

  void __set_logo(const std::string& val);

  void __set_apply_id(const int64_t val);

  void __set_status(const int64_t val);

  bool operator == (const user_apply & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(logo == rhs.logo))
      return false;
    if (!(apply_id == rhs.apply_id))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const user_apply &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_apply & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(user_apply &a, user_apply &b);

std::ostream& operator<<(std::ostream& out, const user_apply& obj);

typedef struct _company_address_contact_info__isset {
  _company_address_contact_info__isset() : address(false), contact(false) {}
  bool address :1;
  bool contact :1;
} _company_address_contact_info__isset;

class company_address_contact_info : public virtual ::apache::thrift::TBase {
 public:

  company_address_contact_info(const company_address_contact_info&);
  company_address_contact_info& operator=(const company_address_contact_info&);
  company_address_contact_info() : address(), contact() {
  }

  virtual ~company_address_contact_info() noexcept;
  std::string address;
  std::string contact;

  _company_address_contact_info__isset __isset;

  void __set_address(const std::string& val);

  void __set_contact(const std::string& val);

  bool operator == (const company_address_contact_info & rhs) const
  {
    if (!(address == rhs.address))
      return false;
    if (!(contact == rhs.contact))
      return false;
    return true;
  }
  bool operator != (const company_address_contact_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_address_contact_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(company_address_contact_info &a, company_address_contact_info &b);

std::ostream& operator<<(std::ostream& out, const company_address_contact_info& obj);

typedef struct _company_attachment__isset {
  _company_attachment__isset() : id(false), path(false), pic_path(false) {}
  bool id :1;
  bool path :1;
  bool pic_path :1;
} _company_attachment__isset;

class company_attachment : public virtual ::apache::thrift::TBase {
 public:

  company_attachment(const company_attachment&);
  company_attachment& operator=(const company_attachment&);
  company_attachment() : id(0), path(), pic_path() {
  }

  virtual ~company_attachment() noexcept;
  int64_t id;
  std::string path;
  std::string pic_path;

  _company_attachment__isset __isset;

  void __set_id(const int64_t val);

  void __set_path(const std::string& val);

  void __set_pic_path(const std::string& val);

  bool operator == (const company_attachment & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(pic_path == rhs.pic_path))
      return false;
    return true;
  }
  bool operator != (const company_attachment &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_attachment & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(company_attachment &a, company_attachment &b);

std::ostream& operator<<(std::ostream& out, const company_attachment& obj);

typedef struct _plan_status_rule__isset {
  _plan_status_rule__isset() : name(false), author(false), timestamp(false), comment(false), index(false), prompt(false) {}
  bool name :1;
  bool author :1;
  bool timestamp :1;
  bool comment :1;
  bool index :1;
  bool prompt :1;
} _plan_status_rule__isset;

class plan_status_rule : public virtual ::apache::thrift::TBase {
 public:

  plan_status_rule(const plan_status_rule&);
  plan_status_rule& operator=(const plan_status_rule&);
  plan_status_rule() : name(), author(), timestamp(), comment(), index(0), prompt() {
  }

  virtual ~plan_status_rule() noexcept;
  std::string name;
  std::string author;
  std::string timestamp;
  std::string comment;
  int64_t index;
  std::string prompt;

  _plan_status_rule__isset __isset;

  void __set_name(const std::string& val);

  void __set_author(const std::string& val);

  void __set_timestamp(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_index(const int64_t val);

  void __set_prompt(const std::string& val);

  bool operator == (const plan_status_rule & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(author == rhs.author))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(index == rhs.index))
      return false;
    if (!(prompt == rhs.prompt))
      return false;
    return true;
  }
  bool operator != (const plan_status_rule &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const plan_status_rule & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(plan_status_rule &a, plan_status_rule &b);

std::ostream& operator<<(std::ostream& out, const plan_status_rule& obj);

typedef struct _common_contract__isset {
  _common_contract__isset() : a_side_company(false), b_side_company(false), start_time(false), end_time(false), number(false), id(false), status(false), customer_code(false), balance(false) {}
  bool a_side_company :1;
  bool b_side_company :1;
  bool start_time :1;
  bool end_time :1;
  bool number :1;
  bool id :1;
  bool status :1;
  bool customer_code :1;
  bool balance :1;
} _common_contract__isset;

class common_contract : public virtual ::apache::thrift::TBase {
 public:

  common_contract(const common_contract&);
  common_contract& operator=(const common_contract&);
  common_contract() : a_side_company(), b_side_company(), start_time(), end_time(), number(), id(0), status(0), customer_code(), balance(0) {
  }

  virtual ~common_contract() noexcept;
  std::string a_side_company;
  std::string b_side_company;
  std::string start_time;
  std::string end_time;
  std::string number;
  int64_t id;
  int64_t status;
  std::string customer_code;
  double balance;

  _common_contract__isset __isset;

  void __set_a_side_company(const std::string& val);

  void __set_b_side_company(const std::string& val);

  void __set_start_time(const std::string& val);

  void __set_end_time(const std::string& val);

  void __set_number(const std::string& val);

  void __set_id(const int64_t val);

  void __set_status(const int64_t val);

  void __set_customer_code(const std::string& val);

  void __set_balance(const double val);

  bool operator == (const common_contract & rhs) const
  {
    if (!(a_side_company == rhs.a_side_company))
      return false;
    if (!(b_side_company == rhs.b_side_company))
      return false;
    if (!(start_time == rhs.start_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    if (!(number == rhs.number))
      return false;
    if (!(id == rhs.id))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(customer_code == rhs.customer_code))
      return false;
    if (!(balance == rhs.balance))
      return false;
    return true;
  }
  bool operator != (const common_contract &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const common_contract & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(common_contract &a, common_contract &b);

std::ostream& operator<<(std::ostream& out, const common_contract& obj);

typedef struct _real_access_record__isset {
  _real_access_record__isset() : name(false), logo(false), phone(false), company_name(false), attachment(false) {}
  bool name :1;
  bool logo :1;
  bool phone :1;
  bool company_name :1;
  bool attachment :1;
} _real_access_record__isset;

class real_access_record : public virtual ::apache::thrift::TBase {
 public:

  real_access_record(const real_access_record&);
  real_access_record& operator=(const real_access_record&);
  real_access_record() : name(), logo(), phone(), company_name(), attachment() {
  }

  virtual ~real_access_record() noexcept;
  std::string name;
  std::string logo;
  std::string phone;
  std::string company_name;
  std::string attachment;

  _real_access_record__isset __isset;

  void __set_name(const std::string& val);

  void __set_logo(const std::string& val);

  void __set_phone(const std::string& val);

  void __set_company_name(const std::string& val);

  void __set_attachment(const std::string& val);

  bool operator == (const real_access_record & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(logo == rhs.logo))
      return false;
    if (!(phone == rhs.phone))
      return false;
    if (!(company_name == rhs.company_name))
      return false;
    if (!(attachment == rhs.attachment))
      return false;
    return true;
  }
  bool operator != (const real_access_record &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const real_access_record & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(real_access_record &a, real_access_record &b);

std::ostream& operator<<(std::ostream& out, const real_access_record& obj);

typedef struct _company_work_time__isset {
  _company_work_time__isset() : start_time(false), end_time(false) {}
  bool start_time :1;
  bool end_time :1;
} _company_work_time__isset;

class company_work_time : public virtual ::apache::thrift::TBase {
 public:

  company_work_time(const company_work_time&);
  company_work_time& operator=(const company_work_time&);
  company_work_time() : start_time(0), end_time(0) {
  }

  virtual ~company_work_time() noexcept;
  int64_t start_time;
  int64_t end_time;

  _company_work_time__isset __isset;

  void __set_start_time(const int64_t val);

  void __set_end_time(const int64_t val);

  bool operator == (const company_work_time & rhs) const
  {
    if (!(start_time == rhs.start_time))
      return false;
    if (!(end_time == rhs.end_time))
      return false;
    return true;
  }
  bool operator != (const company_work_time &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_work_time & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(company_work_time &a, company_work_time &b);

std::ostream& operator<<(std::ostream& out, const company_work_time& obj);

typedef struct _company_positon_lat_lag__isset {
  _company_positon_lat_lag__isset() : lat(false), lag(false), distance(false) {}
  bool lat :1;
  bool lag :1;
  bool distance :1;
} _company_positon_lat_lag__isset;

class company_positon_lat_lag : public virtual ::apache::thrift::TBase {
 public:

  company_positon_lat_lag(const company_positon_lat_lag&);
  company_positon_lat_lag& operator=(const company_positon_lat_lag&);
  company_positon_lat_lag() : lat(0), lag(0), distance(0) {
  }

  virtual ~company_positon_lat_lag() noexcept;
  double lat;
  double lag;
  double distance;

  _company_positon_lat_lag__isset __isset;

  void __set_lat(const double val);

  void __set_lag(const double val);

  void __set_distance(const double val);

  bool operator == (const company_positon_lat_lag & rhs) const
  {
    if (!(lat == rhs.lat))
      return false;
    if (!(lag == rhs.lag))
      return false;
    if (!(distance == rhs.distance))
      return false;
    return true;
  }
  bool operator != (const company_positon_lat_lag &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_positon_lat_lag & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(company_positon_lat_lag &a, company_positon_lat_lag &b);

std::ostream& operator<<(std::ostream& out, const company_positon_lat_lag& obj);

typedef struct _third_dev_info__isset {
  _third_dev_info__isset() : key(false), ctrl_url(false), dms_url(false), token(false) {}
  bool key :1;
  bool ctrl_url :1;
  bool dms_url :1;
  bool token :1;
} _third_dev_info__isset;

class third_dev_info : public virtual ::apache::thrift::TBase {
 public:

  third_dev_info(const third_dev_info&);
  third_dev_info& operator=(const third_dev_info&);
  third_dev_info() : key(), ctrl_url(), dms_url(), token() {
  }

  virtual ~third_dev_info() noexcept;
  std::string key;
  std::string ctrl_url;
  std::string dms_url;
  std::string token;

  _third_dev_info__isset __isset;

  void __set_key(const std::string& val);

  void __set_ctrl_url(const std::string& val);

  void __set_dms_url(const std::string& val);

  void __set_token(const std::string& val);

  bool operator == (const third_dev_info & rhs) const
  {
    if (!(key == rhs.key))
      return false;
    if (!(ctrl_url == rhs.ctrl_url))
      return false;
    if (!(dms_url == rhs.dms_url))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const third_dev_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const third_dev_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(third_dev_info &a, third_dev_info &b);

std::ostream& operator<<(std::ostream& out, const third_dev_info& obj);

typedef struct _plan_confirm_info__isset {
  _plan_confirm_info__isset() : timestamp(false), name(false) {}
  bool timestamp :1;
  bool name :1;
} _plan_confirm_info__isset;

class plan_confirm_info : public virtual ::apache::thrift::TBase {
 public:

  plan_confirm_info(const plan_confirm_info&);
  plan_confirm_info& operator=(const plan_confirm_info&);
  plan_confirm_info() : timestamp(), name() {
  }

  virtual ~plan_confirm_info() noexcept;
  std::string timestamp;
  std::string name;

  _plan_confirm_info__isset __isset;

  void __set_timestamp(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const plan_confirm_info & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const plan_confirm_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const plan_confirm_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(plan_confirm_info &a, plan_confirm_info &b);

std::ostream& operator<<(std::ostream& out, const plan_confirm_info& obj);

typedef struct _pay_confirm_info__isset {
  _pay_confirm_info__isset() : timestamp(false), name(false) {}
  bool timestamp :1;
  bool name :1;
} _pay_confirm_info__isset;

class pay_confirm_info : public virtual ::apache::thrift::TBase {
 public:

  pay_confirm_info(const pay_confirm_info&);
  pay_confirm_info& operator=(const pay_confirm_info&);
  pay_confirm_info() : timestamp(), name() {
  }

  virtual ~pay_confirm_info() noexcept;
  std::string timestamp;
  std::string name;

  _pay_confirm_info__isset __isset;

  void __set_timestamp(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const pay_confirm_info & rhs) const
  {
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const pay_confirm_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const pay_confirm_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(pay_confirm_info &a, pay_confirm_info &b);

std::ostream& operator<<(std::ostream& out, const pay_confirm_info& obj);

typedef struct _vichele_in_plan__isset {
  _vichele_in_plan__isset() : main_vichele(false), behind_vichele(false), driver_name(false), driver_phone(false), count(false), drop_address(false), use_for(false), vichele_id(false), finish(false), deliver_timestamp(false), register_timestamp(false), register_number(false), enter_location(false), p_time(false), p_weight(false), m_weight(false), driver_id(false) {}
  bool main_vichele :1;
  bool behind_vichele :1;
  bool driver_name :1;
  bool driver_phone :1;
  bool count :1;
  bool drop_address :1;
  bool use_for :1;
  bool vichele_id :1;
  bool finish :1;
  bool deliver_timestamp :1;
  bool register_timestamp :1;
  bool register_number :1;
  bool enter_location :1;
  bool p_time :1;
  bool p_weight :1;
  bool m_weight :1;
  bool driver_id :1;
} _vichele_in_plan__isset;

class vichele_in_plan : public virtual ::apache::thrift::TBase {
 public:

  vichele_in_plan(const vichele_in_plan&);
  vichele_in_plan& operator=(const vichele_in_plan&);
  vichele_in_plan() : main_vichele(), behind_vichele(), driver_name(), driver_phone(), count(0), drop_address(), use_for(), vichele_id(0), finish(0), deliver_timestamp(), register_timestamp(), register_number(), enter_location(), p_time(), p_weight(0), m_weight(0), driver_id() {
  }

  virtual ~vichele_in_plan() noexcept;
  std::string main_vichele;
  std::string behind_vichele;
  std::string driver_name;
  std::string driver_phone;
  double count;
  std::string drop_address;
  std::string use_for;
  int64_t vichele_id;
  bool finish;
  std::string deliver_timestamp;
  std::string register_timestamp;
  std::string register_number;
  std::string enter_location;
  std::string p_time;
  double p_weight;
  double m_weight;
  std::string driver_id;

  _vichele_in_plan__isset __isset;

  void __set_main_vichele(const std::string& val);

  void __set_behind_vichele(const std::string& val);

  void __set_driver_name(const std::string& val);

  void __set_driver_phone(const std::string& val);

  void __set_count(const double val);

  void __set_drop_address(const std::string& val);

  void __set_use_for(const std::string& val);

  void __set_vichele_id(const int64_t val);

  void __set_finish(const bool val);

  void __set_deliver_timestamp(const std::string& val);

  void __set_register_timestamp(const std::string& val);

  void __set_register_number(const std::string& val);

  void __set_enter_location(const std::string& val);

  void __set_p_time(const std::string& val);

  void __set_p_weight(const double val);

  void __set_m_weight(const double val);

  void __set_driver_id(const std::string& val);

  bool operator == (const vichele_in_plan & rhs) const
  {
    if (!(main_vichele == rhs.main_vichele))
      return false;
    if (!(behind_vichele == rhs.behind_vichele))
      return false;
    if (!(driver_name == rhs.driver_name))
      return false;
    if (!(driver_phone == rhs.driver_phone))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(drop_address == rhs.drop_address))
      return false;
    if (!(use_for == rhs.use_for))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    if (!(finish == rhs.finish))
      return false;
    if (!(deliver_timestamp == rhs.deliver_timestamp))
      return false;
    if (!(register_timestamp == rhs.register_timestamp))
      return false;
    if (!(register_number == rhs.register_number))
      return false;
    if (!(enter_location == rhs.enter_location))
      return false;
    if (!(p_time == rhs.p_time))
      return false;
    if (!(p_weight == rhs.p_weight))
      return false;
    if (!(m_weight == rhs.m_weight))
      return false;
    if (!(driver_id == rhs.driver_id))
      return false;
    return true;
  }
  bool operator != (const vichele_in_plan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_in_plan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(vichele_in_plan &a, vichele_in_plan &b);

std::ostream& operator<<(std::ostream& out, const vichele_in_plan& obj);

typedef struct _stuff_plan__isset {
  _stuff_plan__isset() : type_id(false), count(false), vichele_info(false), plan_id(false), plan_time(false), created_time(false), name(false), price(false), status(false), proxy_company(false), created_user_name(false), buy_company(false), sale_company(false), comment(false), is_cancel(false) {}
  bool type_id :1;
  bool count :1;
  bool vichele_info :1;
  bool plan_id :1;
  bool plan_time :1;
  bool created_time :1;
  bool name :1;
  bool price :1;
  bool status :1;
  bool proxy_company :1;
  bool created_user_name :1;
  bool buy_company :1;
  bool sale_company :1;
  bool comment :1;
  bool is_cancel :1;
} _stuff_plan__isset;

class stuff_plan : public virtual ::apache::thrift::TBase {
 public:

  stuff_plan(const stuff_plan&);
  stuff_plan& operator=(const stuff_plan&);
  stuff_plan() : type_id(0), count(0), plan_id(0), plan_time(), created_time(0), name(), price(0), status(0), proxy_company(), created_user_name(), buy_company(), sale_company(), comment(), is_cancel(0) {
  }

  virtual ~stuff_plan() noexcept;
  int64_t type_id;
  double count;
  std::vector<vichele_in_plan>  vichele_info;
  int64_t plan_id;
  std::string plan_time;
  int64_t created_time;
  std::string name;
  double price;
  int64_t status;
  std::string proxy_company;
  std::string created_user_name;
  std::string buy_company;
  std::string sale_company;
  std::string comment;
  bool is_cancel;

  _stuff_plan__isset __isset;

  void __set_type_id(const int64_t val);

  void __set_count(const double val);

  void __set_vichele_info(const std::vector<vichele_in_plan> & val);

  void __set_plan_id(const int64_t val);

  void __set_plan_time(const std::string& val);

  void __set_created_time(const int64_t val);

  void __set_name(const std::string& val);

  void __set_price(const double val);

  void __set_status(const int64_t val);

  void __set_proxy_company(const std::string& val);

  void __set_created_user_name(const std::string& val);

  void __set_buy_company(const std::string& val);

  void __set_sale_company(const std::string& val);

  void __set_comment(const std::string& val);

  void __set_is_cancel(const bool val);

  bool operator == (const stuff_plan & rhs) const
  {
    if (!(type_id == rhs.type_id))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(vichele_info == rhs.vichele_info))
      return false;
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(plan_time == rhs.plan_time))
      return false;
    if (!(created_time == rhs.created_time))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(proxy_company == rhs.proxy_company))
      return false;
    if (!(created_user_name == rhs.created_user_name))
      return false;
    if (!(buy_company == rhs.buy_company))
      return false;
    if (!(sale_company == rhs.sale_company))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(is_cancel == rhs.is_cancel))
      return false;
    return true;
  }
  bool operator != (const stuff_plan &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const stuff_plan & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(stuff_plan &a, stuff_plan &b);

std::ostream& operator<<(std::ostream& out, const stuff_plan& obj);

typedef struct _plan_status__isset {
  _plan_status__isset() : plan_id(false), status(false), plan_time(false), conflict_reason(false), status_prompt(false), is_cancel(false), stuff_type(false), company(false) {}
  bool plan_id :1;
  bool status :1;
  bool plan_time :1;
  bool conflict_reason :1;
  bool status_prompt :1;
  bool is_cancel :1;
  bool stuff_type :1;
  bool company :1;
} _plan_status__isset;

class plan_status : public virtual ::apache::thrift::TBase {
 public:

  plan_status(const plan_status&);
  plan_status& operator=(const plan_status&);
  plan_status() : plan_id(0), status(0), plan_time(0), conflict_reason(), status_prompt(), is_cancel(0), stuff_type(), company() {
  }

  virtual ~plan_status() noexcept;
  int64_t plan_id;
  int64_t status;
  int64_t plan_time;
  std::string conflict_reason;
  std::string status_prompt;
  bool is_cancel;
  std::string stuff_type;
  std::string company;

  _plan_status__isset __isset;

  void __set_plan_id(const int64_t val);

  void __set_status(const int64_t val);

  void __set_plan_time(const int64_t val);

  void __set_conflict_reason(const std::string& val);

  void __set_status_prompt(const std::string& val);

  void __set_is_cancel(const bool val);

  void __set_stuff_type(const std::string& val);

  void __set_company(const std::string& val);

  bool operator == (const plan_status & rhs) const
  {
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(plan_time == rhs.plan_time))
      return false;
    if (!(conflict_reason == rhs.conflict_reason))
      return false;
    if (!(status_prompt == rhs.status_prompt))
      return false;
    if (!(is_cancel == rhs.is_cancel))
      return false;
    if (!(stuff_type == rhs.stuff_type))
      return false;
    if (!(company == rhs.company))
      return false;
    return true;
  }
  bool operator != (const plan_status &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const plan_status & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(plan_status &a, plan_status &b);

std::ostream& operator<<(std::ostream& out, const plan_status& obj);

typedef struct _plan_number_id__isset {
  _plan_number_id__isset() : id(false), number(false) {}
  bool id :1;
  bool number :1;
} _plan_number_id__isset;

class plan_number_id : public virtual ::apache::thrift::TBase {
 public:

  plan_number_id(const plan_number_id&);
  plan_number_id& operator=(const plan_number_id&);
  plan_number_id() : id(0), number() {
  }

  virtual ~plan_number_id() noexcept;
  int64_t id;
  std::string number;

  _plan_number_id__isset __isset;

  void __set_id(const int64_t val);

  void __set_number(const std::string& val);

  bool operator == (const plan_number_id & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(number == rhs.number))
      return false;
    return true;
  }
  bool operator != (const plan_number_id &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const plan_number_id & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(plan_number_id &a, plan_number_id &b);

std::ostream& operator<<(std::ostream& out, const plan_number_id& obj);

typedef struct _deliver_info__isset {
  _deliver_info__isset() : id(false), count(false), p_weight(false), m_weight(false), p_time(false), m_time(false) {}
  bool id :1;
  bool count :1;
  bool p_weight :1;
  bool m_weight :1;
  bool p_time :1;
  bool m_time :1;
} _deliver_info__isset;

class deliver_info : public virtual ::apache::thrift::TBase {
 public:

  deliver_info(const deliver_info&);
  deliver_info& operator=(const deliver_info&);
  deliver_info() : id(0), count(0), p_weight(0), m_weight(0), p_time(), m_time() {
  }

  virtual ~deliver_info() noexcept;
  int64_t id;
  double count;
  double p_weight;
  double m_weight;
  std::string p_time;
  std::string m_time;

  _deliver_info__isset __isset;

  void __set_id(const int64_t val);

  void __set_count(const double val);

  void __set_p_weight(const double val);

  void __set_m_weight(const double val);

  void __set_p_time(const std::string& val);

  void __set_m_time(const std::string& val);

  bool operator == (const deliver_info & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(p_weight == rhs.p_weight))
      return false;
    if (!(m_weight == rhs.m_weight))
      return false;
    if (!(p_time == rhs.p_time))
      return false;
    if (!(m_time == rhs.m_time))
      return false;
    return true;
  }
  bool operator != (const deliver_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const deliver_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(deliver_info &a, deliver_info &b);

std::ostream& operator<<(std::ostream& out, const deliver_info& obj);

typedef struct _vichele_statistics__isset {
  _vichele_statistics__isset() : company(false), main_vichele(false), behind_vichele(false), driver_name(false), driver_phone(false), delivered(false), plan_id(false), plan_order(false), vichele_id(false) {}
  bool company :1;
  bool main_vichele :1;
  bool behind_vichele :1;
  bool driver_name :1;
  bool driver_phone :1;
  bool delivered :1;
  bool plan_id :1;
  bool plan_order :1;
  bool vichele_id :1;
} _vichele_statistics__isset;

class vichele_statistics : public virtual ::apache::thrift::TBase {
 public:

  vichele_statistics(const vichele_statistics&);
  vichele_statistics& operator=(const vichele_statistics&);
  vichele_statistics() : company(), main_vichele(), behind_vichele(), driver_name(), driver_phone(), delivered(0), plan_id(0), plan_order(), vichele_id(0) {
  }

  virtual ~vichele_statistics() noexcept;
  std::string company;
  std::string main_vichele;
  std::string behind_vichele;
  std::string driver_name;
  std::string driver_phone;
  bool delivered;
  int64_t plan_id;
  std::string plan_order;
  int64_t vichele_id;

  _vichele_statistics__isset __isset;

  void __set_company(const std::string& val);

  void __set_main_vichele(const std::string& val);

  void __set_behind_vichele(const std::string& val);

  void __set_driver_name(const std::string& val);

  void __set_driver_phone(const std::string& val);

  void __set_delivered(const bool val);

  void __set_plan_id(const int64_t val);

  void __set_plan_order(const std::string& val);

  void __set_vichele_id(const int64_t val);

  bool operator == (const vichele_statistics & rhs) const
  {
    if (!(company == rhs.company))
      return false;
    if (!(main_vichele == rhs.main_vichele))
      return false;
    if (!(behind_vichele == rhs.behind_vichele))
      return false;
    if (!(driver_name == rhs.driver_name))
      return false;
    if (!(driver_phone == rhs.driver_phone))
      return false;
    if (!(delivered == rhs.delivered))
      return false;
    if (!(plan_id == rhs.plan_id))
      return false;
    if (!(plan_order == rhs.plan_order))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    return true;
  }
  bool operator != (const vichele_statistics &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_statistics & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(vichele_statistics &a, vichele_statistics &b);

std::ostream& operator<<(std::ostream& out, const vichele_statistics& obj);

typedef struct _vichele_stuff_statistics__isset {
  _vichele_stuff_statistics__isset() : vichele(false), stuff_name(false) {}
  bool vichele :1;
  bool stuff_name :1;
} _vichele_stuff_statistics__isset;

class vichele_stuff_statistics : public virtual ::apache::thrift::TBase {
 public:

  vichele_stuff_statistics(const vichele_stuff_statistics&);
  vichele_stuff_statistics& operator=(const vichele_stuff_statistics&);
  vichele_stuff_statistics() : stuff_name() {
  }

  virtual ~vichele_stuff_statistics() noexcept;
  vichele_statistics vichele;
  std::string stuff_name;

  _vichele_stuff_statistics__isset __isset;

  void __set_vichele(const vichele_statistics& val);

  void __set_stuff_name(const std::string& val);

  bool operator == (const vichele_stuff_statistics & rhs) const
  {
    if (!(vichele == rhs.vichele))
      return false;
    if (!(stuff_name == rhs.stuff_name))
      return false;
    return true;
  }
  bool operator != (const vichele_stuff_statistics &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_stuff_statistics & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(vichele_stuff_statistics &a, vichele_stuff_statistics &b);

std::ostream& operator<<(std::ostream& out, const vichele_stuff_statistics& obj);

typedef struct _vichele_search_result__isset {
  _vichele_search_result__isset() : plan_info(false), vichele_numbers(false), plan_time(false), status(false) {}
  bool plan_info :1;
  bool vichele_numbers :1;
  bool plan_time :1;
  bool status :1;
} _vichele_search_result__isset;

class vichele_search_result : public virtual ::apache::thrift::TBase {
 public:

  vichele_search_result(const vichele_search_result&);
  vichele_search_result& operator=(const vichele_search_result&);
  vichele_search_result() : vichele_numbers(), plan_time(), status() {
  }

  virtual ~vichele_search_result() noexcept;
  plan_number_id plan_info;
  std::string vichele_numbers;
  std::string plan_time;
  std::string status;

  _vichele_search_result__isset __isset;

  void __set_plan_info(const plan_number_id& val);

  void __set_vichele_numbers(const std::string& val);

  void __set_plan_time(const std::string& val);

  void __set_status(const std::string& val);

  bool operator == (const vichele_search_result & rhs) const
  {
    if (!(plan_info == rhs.plan_info))
      return false;
    if (!(vichele_numbers == rhs.vichele_numbers))
      return false;
    if (!(plan_time == rhs.plan_time))
      return false;
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const vichele_search_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_search_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(vichele_search_result &a, vichele_search_result &b);

std::ostream& operator<<(std::ostream& out, const vichele_search_result& obj);

typedef struct _company_plan_brief__isset {
  _company_plan_brief__isset() : today_plan_count(false), today_vichele_count(false), tomorrow_plan_count(false), tomorrow_vichele_count(false) {}
  bool today_plan_count :1;
  bool today_vichele_count :1;
  bool tomorrow_plan_count :1;
  bool tomorrow_vichele_count :1;
} _company_plan_brief__isset;

class company_plan_brief : public virtual ::apache::thrift::TBase {
 public:

  company_plan_brief(const company_plan_brief&);
  company_plan_brief& operator=(const company_plan_brief&);
  company_plan_brief() : today_plan_count(0), today_vichele_count(0), tomorrow_plan_count(0), tomorrow_vichele_count(0) {
  }

  virtual ~company_plan_brief() noexcept;
  int64_t today_plan_count;
  int64_t today_vichele_count;
  int64_t tomorrow_plan_count;
  int64_t tomorrow_vichele_count;

  _company_plan_brief__isset __isset;

  void __set_today_plan_count(const int64_t val);

  void __set_today_vichele_count(const int64_t val);

  void __set_tomorrow_plan_count(const int64_t val);

  void __set_tomorrow_vichele_count(const int64_t val);

  bool operator == (const company_plan_brief & rhs) const
  {
    if (!(today_plan_count == rhs.today_plan_count))
      return false;
    if (!(today_vichele_count == rhs.today_vichele_count))
      return false;
    if (!(tomorrow_plan_count == rhs.tomorrow_plan_count))
      return false;
    if (!(tomorrow_vichele_count == rhs.tomorrow_vichele_count))
      return false;
    return true;
  }
  bool operator != (const company_plan_brief &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_plan_brief & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(company_plan_brief &a, company_plan_brief &b);

std::ostream& operator<<(std::ostream& out, const company_plan_brief& obj);

typedef struct _today_driver_info__isset {
  _today_driver_info__isset() : id(false), destination_company(false), destination_address(false), order_company(false), main_vichele(false), behind_vichele(false), stuff_name(false), register_timestamp(false), register_number(false), enter_location(false), is_registered(false), register_order(false), is_buy(false), company_for_select(false), need_tmd(false), tmd_no(false), date(false), can_enter(false), attach_url(false), count(false) {}
  bool id :1;
  bool destination_company :1;
  bool destination_address :1;
  bool order_company :1;
  bool main_vichele :1;
  bool behind_vichele :1;
  bool stuff_name :1;
  bool register_timestamp :1;
  bool register_number :1;
  bool enter_location :1;
  bool is_registered :1;
  bool register_order :1;
  bool is_buy :1;
  bool company_for_select :1;
  bool need_tmd :1;
  bool tmd_no :1;
  bool date :1;
  bool can_enter :1;
  bool attach_url :1;
  bool count :1;
} _today_driver_info__isset;

class today_driver_info : public virtual ::apache::thrift::TBase {
 public:

  today_driver_info(const today_driver_info&);
  today_driver_info& operator=(const today_driver_info&);
  today_driver_info() : id(0), destination_company(), destination_address(), order_company(), main_vichele(), behind_vichele(), stuff_name(), register_timestamp(), register_number(), enter_location(), is_registered(0), register_order(), is_buy(0), need_tmd(0), tmd_no(), date(), can_enter(0), attach_url(), count(0) {
  }

  virtual ~today_driver_info() noexcept;
  int64_t id;
  std::string destination_company;
  std::string destination_address;
  std::string order_company;
  std::string main_vichele;
  std::string behind_vichele;
  std::string stuff_name;
  std::string register_timestamp;
  std::string register_number;
  std::string enter_location;
  bool is_registered;
  std::string register_order;
  bool is_buy;
  std::vector<std::string>  company_for_select;
  bool need_tmd;
  std::string tmd_no;
  std::string date;
  bool can_enter;
  std::string attach_url;
  double count;

  _today_driver_info__isset __isset;

  void __set_id(const int64_t val);

  void __set_destination_company(const std::string& val);

  void __set_destination_address(const std::string& val);

  void __set_order_company(const std::string& val);

  void __set_main_vichele(const std::string& val);

  void __set_behind_vichele(const std::string& val);

  void __set_stuff_name(const std::string& val);

  void __set_register_timestamp(const std::string& val);

  void __set_register_number(const std::string& val);

  void __set_enter_location(const std::string& val);

  void __set_is_registered(const bool val);

  void __set_register_order(const std::string& val);

  void __set_is_buy(const bool val);

  void __set_company_for_select(const std::vector<std::string> & val);

  void __set_need_tmd(const bool val);

  void __set_tmd_no(const std::string& val);

  void __set_date(const std::string& val);

  void __set_can_enter(const bool val);

  void __set_attach_url(const std::string& val);

  void __set_count(const double val);

  bool operator == (const today_driver_info & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(destination_company == rhs.destination_company))
      return false;
    if (!(destination_address == rhs.destination_address))
      return false;
    if (!(order_company == rhs.order_company))
      return false;
    if (!(main_vichele == rhs.main_vichele))
      return false;
    if (!(behind_vichele == rhs.behind_vichele))
      return false;
    if (!(stuff_name == rhs.stuff_name))
      return false;
    if (!(register_timestamp == rhs.register_timestamp))
      return false;
    if (!(register_number == rhs.register_number))
      return false;
    if (!(enter_location == rhs.enter_location))
      return false;
    if (!(is_registered == rhs.is_registered))
      return false;
    if (!(register_order == rhs.register_order))
      return false;
    if (!(is_buy == rhs.is_buy))
      return false;
    if (!(company_for_select == rhs.company_for_select))
      return false;
    if (!(need_tmd == rhs.need_tmd))
      return false;
    if (!(tmd_no == rhs.tmd_no))
      return false;
    if (!(date == rhs.date))
      return false;
    if (!(can_enter == rhs.can_enter))
      return false;
    if (!(attach_url == rhs.attach_url))
      return false;
    if (!(count == rhs.count))
      return false;
    return true;
  }
  bool operator != (const today_driver_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const today_driver_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(today_driver_info &a, today_driver_info &b);

std::ostream& operator<<(std::ostream& out, const today_driver_info& obj);

typedef struct _driver_detail_info__isset {
  _driver_detail_info__isset() : phone(false), id(false) {}
  bool phone :1;
  bool id :1;
} _driver_detail_info__isset;

class driver_detail_info : public virtual ::apache::thrift::TBase {
 public:

  driver_detail_info(const driver_detail_info&);
  driver_detail_info& operator=(const driver_detail_info&);
  driver_detail_info() : phone(), id() {
  }

  virtual ~driver_detail_info() noexcept;
  std::string phone;
  std::string id;

  _driver_detail_info__isset __isset;

  void __set_phone(const std::string& val);

  void __set_id(const std::string& val);

  bool operator == (const driver_detail_info & rhs) const
  {
    if (!(phone == rhs.phone))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const driver_detail_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const driver_detail_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(driver_detail_info &a, driver_detail_info &b);

std::ostream& operator<<(std::ostream& out, const driver_detail_info& obj);

typedef struct _api_extra_transformation__isset {
  _api_extra_transformation__isset() : driver_name(false), driver_phone(false), driver_id(false) {}
  bool driver_name :1;
  bool driver_phone :1;
  bool driver_id :1;
} _api_extra_transformation__isset;

class api_extra_transformation : public virtual ::apache::thrift::TBase {
 public:

  api_extra_transformation(const api_extra_transformation&);
  api_extra_transformation& operator=(const api_extra_transformation&);
  api_extra_transformation() : driver_name(), driver_phone(), driver_id() {
  }

  virtual ~api_extra_transformation() noexcept;
  std::string driver_name;
  std::string driver_phone;
  std::string driver_id;

  _api_extra_transformation__isset __isset;

  void __set_driver_name(const std::string& val);

  void __set_driver_phone(const std::string& val);

  void __set_driver_id(const std::string& val);

  bool operator == (const api_extra_transformation & rhs) const
  {
    if (!(driver_name == rhs.driver_name))
      return false;
    if (!(driver_phone == rhs.driver_phone))
      return false;
    if (!(driver_id == rhs.driver_id))
      return false;
    return true;
  }
  bool operator != (const api_extra_transformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const api_extra_transformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(api_extra_transformation &a, api_extra_transformation &b);

std::ostream& operator<<(std::ostream& out, const api_extra_transformation& obj);

typedef struct _api_transformation_info__isset {
  _api_transformation_info__isset() : id(false), main_vichele_number(false), behind_vichele_number(false), stuff_name(false), enter_count(false), exit_count(false), company_name(false), extra_info(false), is_sale(false) {}
  bool id :1;
  bool main_vichele_number :1;
  bool behind_vichele_number :1;
  bool stuff_name :1;
  bool enter_count :1;
  bool exit_count :1;
  bool company_name :1;
  bool extra_info :1;
  bool is_sale :1;
} _api_transformation_info__isset;

class api_transformation_info : public virtual ::apache::thrift::TBase {
 public:

  api_transformation_info(const api_transformation_info&);
  api_transformation_info& operator=(const api_transformation_info&);
  api_transformation_info() : id(0), main_vichele_number(), behind_vichele_number(), stuff_name(), enter_count(0), exit_count(0), company_name(), is_sale(0) {
  }

  virtual ~api_transformation_info() noexcept;
  int64_t id;
  std::string main_vichele_number;
  std::string behind_vichele_number;
  std::string stuff_name;
  double enter_count;
  double exit_count;
  std::string company_name;
  api_extra_transformation extra_info;
  bool is_sale;

  _api_transformation_info__isset __isset;

  void __set_id(const int64_t val);

  void __set_main_vichele_number(const std::string& val);

  void __set_behind_vichele_number(const std::string& val);

  void __set_stuff_name(const std::string& val);

  void __set_enter_count(const double val);

  void __set_exit_count(const double val);

  void __set_company_name(const std::string& val);

  void __set_extra_info(const api_extra_transformation& val);

  void __set_is_sale(const bool val);

  bool operator == (const api_transformation_info & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(main_vichele_number == rhs.main_vichele_number))
      return false;
    if (!(behind_vichele_number == rhs.behind_vichele_number))
      return false;
    if (!(stuff_name == rhs.stuff_name))
      return false;
    if (!(enter_count == rhs.enter_count))
      return false;
    if (!(exit_count == rhs.exit_count))
      return false;
    if (!(company_name == rhs.company_name))
      return false;
    if (!(extra_info == rhs.extra_info))
      return false;
    if (!(is_sale == rhs.is_sale))
      return false;
    return true;
  }
  bool operator != (const api_transformation_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const api_transformation_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(api_transformation_info &a, api_transformation_info &b);

std::ostream& operator<<(std::ostream& out, const api_transformation_info& obj);

typedef struct _call_vehicle_req__isset {
  _call_vehicle_req__isset() : plateNo(false), driverName(false), index(false), stationName(false) {}
  bool plateNo :1;
  bool driverName :1;
  bool index :1;
  bool stationName :1;
} _call_vehicle_req__isset;

class call_vehicle_req : public virtual ::apache::thrift::TBase {
 public:

  call_vehicle_req(const call_vehicle_req&);
  call_vehicle_req& operator=(const call_vehicle_req&);
  call_vehicle_req() : plateNo(), driverName(), index(0), stationName() {
  }

  virtual ~call_vehicle_req() noexcept;
  std::string plateNo;
  std::string driverName;
  int64_t index;
  std::string stationName;

  _call_vehicle_req__isset __isset;

  void __set_plateNo(const std::string& val);

  void __set_driverName(const std::string& val);

  void __set_index(const int64_t val);

  void __set_stationName(const std::string& val);

  bool operator == (const call_vehicle_req & rhs) const
  {
    if (!(plateNo == rhs.plateNo))
      return false;
    if (!(driverName == rhs.driverName))
      return false;
    if (!(index == rhs.index))
      return false;
    if (!(stationName == rhs.stationName))
      return false;
    return true;
  }
  bool operator != (const call_vehicle_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const call_vehicle_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(call_vehicle_req &a, call_vehicle_req &b);

std::ostream& operator<<(std::ostream& out, const call_vehicle_req& obj);

typedef struct _meta_stuff_info__isset {
  _meta_stuff_info__isset() : stuffId(false), stuffName(false), weight(false) {}
  bool stuffId :1;
  bool stuffName :1;
  bool weight :1;
} _meta_stuff_info__isset;

class meta_stuff_info : public virtual ::apache::thrift::TBase {
 public:

  meta_stuff_info(const meta_stuff_info&);
  meta_stuff_info& operator=(const meta_stuff_info&);
  meta_stuff_info() : stuffId(), stuffName(), weight(0) {
  }

  virtual ~meta_stuff_info() noexcept;
  std::string stuffId;
  std::string stuffName;
  double weight;

  _meta_stuff_info__isset __isset;

  void __set_stuffId(const std::string& val);

  void __set_stuffName(const std::string& val);

  void __set_weight(const double val);

  bool operator == (const meta_stuff_info & rhs) const
  {
    if (!(stuffId == rhs.stuffId))
      return false;
    if (!(stuffName == rhs.stuffName))
      return false;
    if (!(weight == rhs.weight))
      return false;
    return true;
  }
  bool operator != (const meta_stuff_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const meta_stuff_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(meta_stuff_info &a, meta_stuff_info &b);

std::ostream& operator<<(std::ostream& out, const meta_stuff_info& obj);

typedef struct _vehicle_info_resp__isset {
  _vehicle_info_resp__isset() : id(false), plateNo(false), backPlateNo(false), stuffName(false), stuffId(false), enterWeight(false), companyName(false), driverName(false), isSale(false), price(false), customerId(false), orderNo(false), multiStuff(false), isMulti(false), createTime(false), driverPhone(false), driverId(false), supplierName(false), supplierId(false), vehicleTeamName(false), vehicleTeamId(false), tmd_no(false), attachUrl(false) {}
  bool id :1;
  bool plateNo :1;
  bool backPlateNo :1;
  bool stuffName :1;
  bool stuffId :1;
  bool enterWeight :1;
  bool companyName :1;
  bool driverName :1;
  bool isSale :1;
  bool price :1;
  bool customerId :1;
  bool orderNo :1;
  bool multiStuff :1;
  bool isMulti :1;
  bool createTime :1;
  bool driverPhone :1;
  bool driverId :1;
  bool supplierName :1;
  bool supplierId :1;
  bool vehicleTeamName :1;
  bool vehicleTeamId :1;
  bool tmd_no :1;
  bool attachUrl :1;
} _vehicle_info_resp__isset;

class vehicle_info_resp : public virtual ::apache::thrift::TBase {
 public:

  vehicle_info_resp(const vehicle_info_resp&);
  vehicle_info_resp& operator=(const vehicle_info_resp&);
  vehicle_info_resp() : id(), plateNo(), backPlateNo(), stuffName(), stuffId(), enterWeight(0), companyName(), driverName(), isSale(0), price(0), customerId(), orderNo(), isMulti(0), createTime(), driverPhone(), driverId(), supplierName(), supplierId(), vehicleTeamName(), vehicleTeamId(), tmd_no(), attachUrl() {
  }

  virtual ~vehicle_info_resp() noexcept;
  std::string id;
  std::string plateNo;
  std::string backPlateNo;
  std::string stuffName;
  std::string stuffId;
  double enterWeight;
  std::string companyName;
  std::string driverName;
  bool isSale;
  double price;
  std::string customerId;
  std::string orderNo;
  std::vector<meta_stuff_info>  multiStuff;
  bool isMulti;
  std::string createTime;
  std::string driverPhone;
  std::string driverId;
  std::string supplierName;
  std::string supplierId;
  std::string vehicleTeamName;
  std::string vehicleTeamId;
  std::string tmd_no;
  std::string attachUrl;

  _vehicle_info_resp__isset __isset;

  void __set_id(const std::string& val);

  void __set_plateNo(const std::string& val);

  void __set_backPlateNo(const std::string& val);

  void __set_stuffName(const std::string& val);

  void __set_stuffId(const std::string& val);

  void __set_enterWeight(const double val);

  void __set_companyName(const std::string& val);

  void __set_driverName(const std::string& val);

  void __set_isSale(const bool val);

  void __set_price(const double val);

  void __set_customerId(const std::string& val);

  void __set_orderNo(const std::string& val);

  void __set_multiStuff(const std::vector<meta_stuff_info> & val);

  void __set_isMulti(const bool val);

  void __set_createTime(const std::string& val);

  void __set_driverPhone(const std::string& val);

  void __set_driverId(const std::string& val);

  void __set_supplierName(const std::string& val);

  void __set_supplierId(const std::string& val);

  void __set_vehicleTeamName(const std::string& val);

  void __set_vehicleTeamId(const std::string& val);

  void __set_tmd_no(const std::string& val);

  void __set_attachUrl(const std::string& val);

  bool operator == (const vehicle_info_resp & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(plateNo == rhs.plateNo))
      return false;
    if (!(backPlateNo == rhs.backPlateNo))
      return false;
    if (!(stuffName == rhs.stuffName))
      return false;
    if (!(stuffId == rhs.stuffId))
      return false;
    if (!(enterWeight == rhs.enterWeight))
      return false;
    if (!(companyName == rhs.companyName))
      return false;
    if (!(driverName == rhs.driverName))
      return false;
    if (!(isSale == rhs.isSale))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(customerId == rhs.customerId))
      return false;
    if (!(orderNo == rhs.orderNo))
      return false;
    if (!(multiStuff == rhs.multiStuff))
      return false;
    if (!(isMulti == rhs.isMulti))
      return false;
    if (!(createTime == rhs.createTime))
      return false;
    if (!(driverPhone == rhs.driverPhone))
      return false;
    if (!(driverId == rhs.driverId))
      return false;
    if (!(supplierName == rhs.supplierName))
      return false;
    if (!(supplierId == rhs.supplierId))
      return false;
    if (!(vehicleTeamName == rhs.vehicleTeamName))
      return false;
    if (!(vehicleTeamId == rhs.vehicleTeamId))
      return false;
    if (!(tmd_no == rhs.tmd_no))
      return false;
    if (!(attachUrl == rhs.attachUrl))
      return false;
    return true;
  }
  bool operator != (const vehicle_info_resp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vehicle_info_resp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(vehicle_info_resp &a, vehicle_info_resp &b);

std::ostream& operator<<(std::ostream& out, const vehicle_info_resp& obj);

typedef struct _push_weight_req__isset {
  _push_weight_req__isset() : id(false), plateNo(false), customerId(false), customerName(false), stuffName(false), pWeight(false), mWeight(false), pTime(false), mTime(false), jWeight(false) {}
  bool id :1;
  bool plateNo :1;
  bool customerId :1;
  bool customerName :1;
  bool stuffName :1;
  bool pWeight :1;
  bool mWeight :1;
  bool pTime :1;
  bool mTime :1;
  bool jWeight :1;
} _push_weight_req__isset;

class push_weight_req : public virtual ::apache::thrift::TBase {
 public:

  push_weight_req(const push_weight_req&);
  push_weight_req& operator=(const push_weight_req&);
  push_weight_req() : id(), plateNo(), customerId(), customerName(), stuffName(), pWeight(0), mWeight(0), pTime(), mTime(), jWeight(0) {
  }

  virtual ~push_weight_req() noexcept;
  std::string id;
  std::string plateNo;
  std::string customerId;
  std::string customerName;
  std::string stuffName;
  double pWeight;
  double mWeight;
  std::string pTime;
  std::string mTime;
  double jWeight;

  _push_weight_req__isset __isset;

  void __set_id(const std::string& val);

  void __set_plateNo(const std::string& val);

  void __set_customerId(const std::string& val);

  void __set_customerName(const std::string& val);

  void __set_stuffName(const std::string& val);

  void __set_pWeight(const double val);

  void __set_mWeight(const double val);

  void __set_pTime(const std::string& val);

  void __set_mTime(const std::string& val);

  void __set_jWeight(const double val);

  bool operator == (const push_weight_req & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(plateNo == rhs.plateNo))
      return false;
    if (!(customerId == rhs.customerId))
      return false;
    if (!(customerName == rhs.customerName))
      return false;
    if (!(stuffName == rhs.stuffName))
      return false;
    if (!(pWeight == rhs.pWeight))
      return false;
    if (!(mWeight == rhs.mWeight))
      return false;
    if (!(pTime == rhs.pTime))
      return false;
    if (!(mTime == rhs.mTime))
      return false;
    if (!(jWeight == rhs.jWeight))
      return false;
    return true;
  }
  bool operator != (const push_weight_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const push_weight_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(push_weight_req &a, push_weight_req &b);

std::ostream& operator<<(std::ostream& out, const push_weight_req& obj);

typedef struct _push_base_req__isset {
  _push_base_req__isset() : id(false), name(false), pid(false), unit(false), type(false), code(false) {}
  bool id :1;
  bool name :1;
  bool pid :1;
  bool unit :1;
  bool type :1;
  bool code :1;
} _push_base_req__isset;

class push_base_req : public virtual ::apache::thrift::TBase {
 public:

  push_base_req(const push_base_req&);
  push_base_req& operator=(const push_base_req&);
  push_base_req() : id(), name(), pid(), unit(), type(), code() {
  }

  virtual ~push_base_req() noexcept;
  std::string id;
  std::string name;
  std::string pid;
  std::string unit;
  std::string type;
  std::string code;

  _push_base_req__isset __isset;

  void __set_id(const std::string& val);

  void __set_name(const std::string& val);

  void __set_pid(const std::string& val);

  void __set_unit(const std::string& val);

  void __set_type(const std::string& val);

  void __set_code(const std::string& val);

  bool operator == (const push_base_req & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(pid == rhs.pid))
      return false;
    if (!(unit == rhs.unit))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const push_base_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const push_base_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(push_base_req &a, push_base_req &b);

std::ostream& operator<<(std::ostream& out, const push_base_req& obj);

typedef struct _push_balance_req__isset {
  _push_balance_req__isset() : customerId(false), customerName(false), balance(false) {}
  bool customerId :1;
  bool customerName :1;
  bool balance :1;
} _push_balance_req__isset;

class push_balance_req : public virtual ::apache::thrift::TBase {
 public:

  push_balance_req(const push_balance_req&);
  push_balance_req& operator=(const push_balance_req&);
  push_balance_req() : customerId(), customerName(), balance(0) {
  }

  virtual ~push_balance_req() noexcept;
  std::string customerId;
  std::string customerName;
  double balance;

  _push_balance_req__isset __isset;

  void __set_customerId(const std::string& val);

  void __set_customerName(const std::string& val);

  void __set_balance(const double val);

  bool operator == (const push_balance_req & rhs) const
  {
    if (!(customerId == rhs.customerId))
      return false;
    if (!(customerName == rhs.customerName))
      return false;
    if (!(balance == rhs.balance))
      return false;
    return true;
  }
  bool operator != (const push_balance_req &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const push_balance_req & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(push_balance_req &a, push_balance_req &b);

std::ostream& operator<<(std::ostream& out, const push_balance_req& obj);

typedef struct _vichele_stay_alone__isset {
  _vichele_stay_alone__isset() : id(false), stuff_name(false), company_name(false), main_vichele_number(false), behind_vichele_number(false), count(false), comment(false), date(false), destination(false), status(false), creator_name(false), creator_phone(false), repeated(false), driver_name(false), driver_phone(false), driver_id(false), transfor_company(false), p_time(false), m_time(false), p_weight(false), m_weight(false), j_weight(false), price(false), can_enter(false) {}
  bool id :1;
  bool stuff_name :1;
  bool company_name :1;
  bool main_vichele_number :1;
  bool behind_vichele_number :1;
  bool count :1;
  bool comment :1;
  bool date :1;
  bool destination :1;
  bool status :1;
  bool creator_name :1;
  bool creator_phone :1;
  bool repeated :1;
  bool driver_name :1;
  bool driver_phone :1;
  bool driver_id :1;
  bool transfor_company :1;
  bool p_time :1;
  bool m_time :1;
  bool p_weight :1;
  bool m_weight :1;
  bool j_weight :1;
  bool price :1;
  bool can_enter :1;
} _vichele_stay_alone__isset;

class vichele_stay_alone : public virtual ::apache::thrift::TBase {
 public:

  vichele_stay_alone(const vichele_stay_alone&);
  vichele_stay_alone& operator=(const vichele_stay_alone&);
  vichele_stay_alone() : id(0), stuff_name(), company_name(), main_vichele_number(), behind_vichele_number(), count(0), comment(), date(), destination(), status(0), creator_name(), creator_phone(), repeated(0), driver_name(), driver_phone(), driver_id(), transfor_company(), p_time(), m_time(), p_weight(0), m_weight(0), j_weight(0), price(0), can_enter(0) {
  }

  virtual ~vichele_stay_alone() noexcept;
  int64_t id;
  std::string stuff_name;
  std::string company_name;
  std::string main_vichele_number;
  std::string behind_vichele_number;
  double count;
  std::string comment;
  std::string date;
  std::string destination;
  int64_t status;
  std::string creator_name;
  std::string creator_phone;
  bool repeated;
  std::string driver_name;
  std::string driver_phone;
  std::string driver_id;
  std::string transfor_company;
  std::string p_time;
  std::string m_time;
  double p_weight;
  double m_weight;
  double j_weight;
  double price;
  bool can_enter;

  _vichele_stay_alone__isset __isset;

  void __set_id(const int64_t val);

  void __set_stuff_name(const std::string& val);

  void __set_company_name(const std::string& val);

  void __set_main_vichele_number(const std::string& val);

  void __set_behind_vichele_number(const std::string& val);

  void __set_count(const double val);

  void __set_comment(const std::string& val);

  void __set_date(const std::string& val);

  void __set_destination(const std::string& val);

  void __set_status(const int64_t val);

  void __set_creator_name(const std::string& val);

  void __set_creator_phone(const std::string& val);

  void __set_repeated(const bool val);

  void __set_driver_name(const std::string& val);

  void __set_driver_phone(const std::string& val);

  void __set_driver_id(const std::string& val);

  void __set_transfor_company(const std::string& val);

  void __set_p_time(const std::string& val);

  void __set_m_time(const std::string& val);

  void __set_p_weight(const double val);

  void __set_m_weight(const double val);

  void __set_j_weight(const double val);

  void __set_price(const double val);

  void __set_can_enter(const bool val);

  bool operator == (const vichele_stay_alone & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(stuff_name == rhs.stuff_name))
      return false;
    if (!(company_name == rhs.company_name))
      return false;
    if (!(main_vichele_number == rhs.main_vichele_number))
      return false;
    if (!(behind_vichele_number == rhs.behind_vichele_number))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(comment == rhs.comment))
      return false;
    if (!(date == rhs.date))
      return false;
    if (!(destination == rhs.destination))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(creator_name == rhs.creator_name))
      return false;
    if (!(creator_phone == rhs.creator_phone))
      return false;
    if (!(repeated == rhs.repeated))
      return false;
    if (!(driver_name == rhs.driver_name))
      return false;
    if (!(driver_phone == rhs.driver_phone))
      return false;
    if (!(driver_id == rhs.driver_id))
      return false;
    if (!(transfor_company == rhs.transfor_company))
      return false;
    if (!(p_time == rhs.p_time))
      return false;
    if (!(m_time == rhs.m_time))
      return false;
    if (!(p_weight == rhs.p_weight))
      return false;
    if (!(m_weight == rhs.m_weight))
      return false;
    if (!(j_weight == rhs.j_weight))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(can_enter == rhs.can_enter))
      return false;
    return true;
  }
  bool operator != (const vichele_stay_alone &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_stay_alone & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(vichele_stay_alone &a, vichele_stay_alone &b);

std::ostream& operator<<(std::ostream& out, const vichele_stay_alone& obj);

typedef struct _silent_user_info__isset {
  _silent_user_info__isset() : name(false), phone(false) {}
  bool name :1;
  bool phone :1;
} _silent_user_info__isset;

class silent_user_info : public virtual ::apache::thrift::TBase {
 public:

  silent_user_info(const silent_user_info&);
  silent_user_info& operator=(const silent_user_info&);
  silent_user_info() : name(), phone() {
  }

  virtual ~silent_user_info() noexcept;
  std::string name;
  std::string phone;

  _silent_user_info__isset __isset;

  void __set_name(const std::string& val);

  void __set_phone(const std::string& val);

  bool operator == (const silent_user_info & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(phone == rhs.phone))
      return false;
    return true;
  }
  bool operator != (const silent_user_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const silent_user_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(silent_user_info &a, silent_user_info &b);

std::ostream& operator<<(std::ostream& out, const silent_user_info& obj);

typedef struct _vichele_team_member__isset {
  _vichele_team_member__isset() : main_vichele_number(false), behind_vichele_number(false), driver_name(false), driver_phone(false), driver_id(false) {}
  bool main_vichele_number :1;
  bool behind_vichele_number :1;
  bool driver_name :1;
  bool driver_phone :1;
  bool driver_id :1;
} _vichele_team_member__isset;

class vichele_team_member : public virtual ::apache::thrift::TBase {
 public:

  vichele_team_member(const vichele_team_member&);
  vichele_team_member& operator=(const vichele_team_member&);
  vichele_team_member() : main_vichele_number(), behind_vichele_number(), driver_name(), driver_phone(), driver_id() {
  }

  virtual ~vichele_team_member() noexcept;
  std::string main_vichele_number;
  std::string behind_vichele_number;
  std::string driver_name;
  std::string driver_phone;
  std::string driver_id;

  _vichele_team_member__isset __isset;

  void __set_main_vichele_number(const std::string& val);

  void __set_behind_vichele_number(const std::string& val);

  void __set_driver_name(const std::string& val);

  void __set_driver_phone(const std::string& val);

  void __set_driver_id(const std::string& val);

  bool operator == (const vichele_team_member & rhs) const
  {
    if (!(main_vichele_number == rhs.main_vichele_number))
      return false;
    if (!(behind_vichele_number == rhs.behind_vichele_number))
      return false;
    if (!(driver_name == rhs.driver_name))
      return false;
    if (!(driver_phone == rhs.driver_phone))
      return false;
    if (!(driver_id == rhs.driver_id))
      return false;
    return true;
  }
  bool operator != (const vichele_team_member &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_team_member & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(vichele_team_member &a, vichele_team_member &b);

std::ostream& operator<<(std::ostream& out, const vichele_team_member& obj);

typedef struct _vichele_team__isset {
  _vichele_team__isset() : members(false), name(false), id(false) {}
  bool members :1;
  bool name :1;
  bool id :1;
} _vichele_team__isset;

class vichele_team : public virtual ::apache::thrift::TBase {
 public:

  vichele_team(const vichele_team&);
  vichele_team& operator=(const vichele_team&);
  vichele_team() : name(), id(0) {
  }

  virtual ~vichele_team() noexcept;
  std::vector<vichele_team_member>  members;
  std::string name;
  int64_t id;

  _vichele_team__isset __isset;

  void __set_members(const std::vector<vichele_team_member> & val);

  void __set_name(const std::string& val);

  void __set_id(const int64_t val);

  bool operator == (const vichele_team & rhs) const
  {
    if (!(members == rhs.members))
      return false;
    if (!(name == rhs.name))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const vichele_team &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_team & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(vichele_team &a, vichele_team &b);

std::ostream& operator<<(std::ostream& out, const vichele_team& obj);

typedef struct _supplier_basic_info__isset {
  _supplier_basic_info__isset() : name(false), reserves(false), max_vichele(false), id(false) {}
  bool name :1;
  bool reserves :1;
  bool max_vichele :1;
  bool id :1;
} _supplier_basic_info__isset;

class supplier_basic_info : public virtual ::apache::thrift::TBase {
 public:

  supplier_basic_info(const supplier_basic_info&);
  supplier_basic_info& operator=(const supplier_basic_info&);
  supplier_basic_info() : name(), reserves(0), max_vichele(0), id(0) {
  }

  virtual ~supplier_basic_info() noexcept;
  std::string name;
  double reserves;
  int64_t max_vichele;
  int64_t id;

  _supplier_basic_info__isset __isset;

  void __set_name(const std::string& val);

  void __set_reserves(const double val);

  void __set_max_vichele(const int64_t val);

  void __set_id(const int64_t val);

  bool operator == (const supplier_basic_info & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(reserves == rhs.reserves))
      return false;
    if (!(max_vichele == rhs.max_vichele))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const supplier_basic_info &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const supplier_basic_info & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(supplier_basic_info &a, supplier_basic_info &b);

std::ostream& operator<<(std::ostream& out, const supplier_basic_info& obj);

typedef struct _single_vichele_brief__isset {
  _single_vichele_brief__isset() : stuff_names(false), supplier_names(false) {}
  bool stuff_names :1;
  bool supplier_names :1;
} _single_vichele_brief__isset;

class single_vichele_brief : public virtual ::apache::thrift::TBase {
 public:

  single_vichele_brief(const single_vichele_brief&);
  single_vichele_brief& operator=(const single_vichele_brief&);
  single_vichele_brief() {
  }

  virtual ~single_vichele_brief() noexcept;
  std::vector<std::string>  stuff_names;
  std::vector<std::string>  supplier_names;

  _single_vichele_brief__isset __isset;

  void __set_stuff_names(const std::vector<std::string> & val);

  void __set_supplier_names(const std::vector<std::string> & val);

  bool operator == (const single_vichele_brief & rhs) const
  {
    if (!(stuff_names == rhs.stuff_names))
      return false;
    if (!(supplier_names == rhs.supplier_names))
      return false;
    return true;
  }
  bool operator != (const single_vichele_brief &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const single_vichele_brief & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(single_vichele_brief &a, single_vichele_brief &b);

std::ostream& operator<<(std::ostream& out, const single_vichele_brief& obj);



#endif
