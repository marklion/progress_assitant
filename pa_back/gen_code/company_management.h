/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef company_management_H
#define company_management_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "idl_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class company_managementIf {
 public:
  virtual ~company_managementIf() {}
  virtual void get_all_type(std::vector<int64_t> & _return, const std::string& ssid) = 0;
  virtual int64_t add_type(const std::string& name, const int64_t price, const std::string& last, const std::string& ssid) = 0;
  virtual bool edit_type(const stuff_detail& stuff, const std::string& ssid) = 0;
  virtual void remove_type(const stuff_detail& stuff, const std::string& ssid) = 0;
  virtual bool readd_type(const stuff_detail& stuff, const std::string& ssid) = 0;
  virtual void get_all_apply(std::vector<user_apply> & _return, const std::string& ssid) = 0;
  virtual bool approve_apply(const int64_t apply_id, const std::string& ssid, const bool approve) = 0;
  virtual void generate_statistics(std::string& _return, const std::string& ssid, const int64_t begin_date, const int64_t end_date) = 0;
  virtual bool set_notice(const std::string& ssid, const std::string& notice) = 0;
  virtual void get_notice(std::string& _return, const std::string& company_name) = 0;
  virtual void clear_notice(const std::string& ssid) = 0;
  virtual void get_all_compay_user(std::vector<user_info> & _return, const std::string& ssid) = 0;
  virtual bool remove_user_from_company(const std::string& ssid, const int64_t user_id) = 0;
  virtual void get_company_logo(std::string& _return, const std::string& ssid) = 0;
  virtual bool set_address(const std::string& ssid, const std::string& address) = 0;
  virtual void get_address(std::string& _return, const std::string& ssid) = 0;
  virtual bool set_contact(const std::string& ssid, const std::string& contact) = 0;
  virtual void get_contact(std::string& _return, const std::string& ssid) = 0;
  virtual void get_address_contact(company_address_contact_info& _return, const std::string& company_name) = 0;
  virtual bool add_attachment(const std::string& ssid, const std::string& base64content, const bool is_pdf) = 0;
  virtual void del_attachment(const std::string& ssid, const int64_t id) = 0;
  virtual void get_all_attachment(std::vector<company_attachment> & _return, const std::string& ssid) = 0;
  virtual void get_attachment(std::string& _return, const std::string& company_name) = 0;
  virtual void get_real_access(std::vector<real_access_record> & _return, const std::string& ssid) = 0;
  virtual void get_all_access(std::vector<real_access_record> & _return, const std::string& ssid) = 0;
  virtual bool add_contract(const std::string& ssid, const common_contract& contract) = 0;
  virtual bool update_contract(const std::string& ssid, const common_contract& contract) = 0;
  virtual void del_contract(const std::string& ssid, const int64_t id) = 0;
  virtual void get_all_contract(std::vector<common_contract> & _return, const std::string& ssid) = 0;
  virtual void get_contract(common_contract& _return, const std::string& a_side_company, const std::string& b_side_company) = 0;
  virtual bool set_work_time(const std::string& ssid, const int64_t start_work_time, const int64_t end_work_time) = 0;
  virtual void get_work_time(company_work_time& _return, const std::string& company_name) = 0;
  virtual void get_company_position_config(company_positon_lat_lag& _return, const std::string& company_name) = 0;
  virtual bool set_third_info(const third_dev_info& _info, const std::string& ssid) = 0;
  virtual void get_third_info(third_dev_info& _return, const std::string& ssid) = 0;
  virtual void get_related_company(std::vector<std::string> & _return, const std::string& ssid) = 0;
};

class company_managementIfFactory {
 public:
  typedef company_managementIf Handler;

  virtual ~company_managementIfFactory() {}

  virtual company_managementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(company_managementIf* /* handler */) = 0;
};

class company_managementIfSingletonFactory : virtual public company_managementIfFactory {
 public:
  company_managementIfSingletonFactory(const ::std::shared_ptr<company_managementIf>& iface) : iface_(iface) {}
  virtual ~company_managementIfSingletonFactory() {}

  virtual company_managementIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(company_managementIf* /* handler */) {}

 protected:
  ::std::shared_ptr<company_managementIf> iface_;
};

class company_managementNull : virtual public company_managementIf {
 public:
  virtual ~company_managementNull() {}
  void get_all_type(std::vector<int64_t> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  int64_t add_type(const std::string& /* name */, const int64_t /* price */, const std::string& /* last */, const std::string& /* ssid */) {
    int64_t _return = 0;
    return _return;
  }
  bool edit_type(const stuff_detail& /* stuff */, const std::string& /* ssid */) {
    bool _return = false;
    return _return;
  }
  void remove_type(const stuff_detail& /* stuff */, const std::string& /* ssid */) {
    return;
  }
  bool readd_type(const stuff_detail& /* stuff */, const std::string& /* ssid */) {
    bool _return = false;
    return _return;
  }
  void get_all_apply(std::vector<user_apply> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  bool approve_apply(const int64_t /* apply_id */, const std::string& /* ssid */, const bool /* approve */) {
    bool _return = false;
    return _return;
  }
  void generate_statistics(std::string& /* _return */, const std::string& /* ssid */, const int64_t /* begin_date */, const int64_t /* end_date */) {
    return;
  }
  bool set_notice(const std::string& /* ssid */, const std::string& /* notice */) {
    bool _return = false;
    return _return;
  }
  void get_notice(std::string& /* _return */, const std::string& /* company_name */) {
    return;
  }
  void clear_notice(const std::string& /* ssid */) {
    return;
  }
  void get_all_compay_user(std::vector<user_info> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  bool remove_user_from_company(const std::string& /* ssid */, const int64_t /* user_id */) {
    bool _return = false;
    return _return;
  }
  void get_company_logo(std::string& /* _return */, const std::string& /* ssid */) {
    return;
  }
  bool set_address(const std::string& /* ssid */, const std::string& /* address */) {
    bool _return = false;
    return _return;
  }
  void get_address(std::string& /* _return */, const std::string& /* ssid */) {
    return;
  }
  bool set_contact(const std::string& /* ssid */, const std::string& /* contact */) {
    bool _return = false;
    return _return;
  }
  void get_contact(std::string& /* _return */, const std::string& /* ssid */) {
    return;
  }
  void get_address_contact(company_address_contact_info& /* _return */, const std::string& /* company_name */) {
    return;
  }
  bool add_attachment(const std::string& /* ssid */, const std::string& /* base64content */, const bool /* is_pdf */) {
    bool _return = false;
    return _return;
  }
  void del_attachment(const std::string& /* ssid */, const int64_t /* id */) {
    return;
  }
  void get_all_attachment(std::vector<company_attachment> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  void get_attachment(std::string& /* _return */, const std::string& /* company_name */) {
    return;
  }
  void get_real_access(std::vector<real_access_record> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  void get_all_access(std::vector<real_access_record> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  bool add_contract(const std::string& /* ssid */, const common_contract& /* contract */) {
    bool _return = false;
    return _return;
  }
  bool update_contract(const std::string& /* ssid */, const common_contract& /* contract */) {
    bool _return = false;
    return _return;
  }
  void del_contract(const std::string& /* ssid */, const int64_t /* id */) {
    return;
  }
  void get_all_contract(std::vector<common_contract> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  void get_contract(common_contract& /* _return */, const std::string& /* a_side_company */, const std::string& /* b_side_company */) {
    return;
  }
  bool set_work_time(const std::string& /* ssid */, const int64_t /* start_work_time */, const int64_t /* end_work_time */) {
    bool _return = false;
    return _return;
  }
  void get_work_time(company_work_time& /* _return */, const std::string& /* company_name */) {
    return;
  }
  void get_company_position_config(company_positon_lat_lag& /* _return */, const std::string& /* company_name */) {
    return;
  }
  bool set_third_info(const third_dev_info& /* _info */, const std::string& /* ssid */) {
    bool _return = false;
    return _return;
  }
  void get_third_info(third_dev_info& /* _return */, const std::string& /* ssid */) {
    return;
  }
  void get_related_company(std::vector<std::string> & /* _return */, const std::string& /* ssid */) {
    return;
  }
};

typedef struct _company_management_get_all_type_args__isset {
  _company_management_get_all_type_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_all_type_args__isset;

class company_management_get_all_type_args {
 public:

  company_management_get_all_type_args(const company_management_get_all_type_args&);
  company_management_get_all_type_args& operator=(const company_management_get_all_type_args&);
  company_management_get_all_type_args() : ssid() {
  }

  virtual ~company_management_get_all_type_args() noexcept;
  std::string ssid;

  _company_management_get_all_type_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_all_type_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_type_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_all_type_pargs {
 public:


  virtual ~company_management_get_all_type_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_type_result__isset {
  _company_management_get_all_type_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_type_result__isset;

class company_management_get_all_type_result {
 public:

  company_management_get_all_type_result(const company_management_get_all_type_result&);
  company_management_get_all_type_result& operator=(const company_management_get_all_type_result&);
  company_management_get_all_type_result() {
  }

  virtual ~company_management_get_all_type_result() noexcept;
  std::vector<int64_t>  success;
  gen_exp e;

  _company_management_get_all_type_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_all_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_type_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_type_presult__isset {
  _company_management_get_all_type_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_type_presult__isset;

class company_management_get_all_type_presult {
 public:


  virtual ~company_management_get_all_type_presult() noexcept;
  std::vector<int64_t> * success;
  gen_exp e;

  _company_management_get_all_type_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_add_type_args__isset {
  _company_management_add_type_args__isset() : name(false), price(false), last(false), ssid(false) {}
  bool name :1;
  bool price :1;
  bool last :1;
  bool ssid :1;
} _company_management_add_type_args__isset;

class company_management_add_type_args {
 public:

  company_management_add_type_args(const company_management_add_type_args&);
  company_management_add_type_args& operator=(const company_management_add_type_args&);
  company_management_add_type_args() : name(), price(0), last(), ssid() {
  }

  virtual ~company_management_add_type_args() noexcept;
  std::string name;
  int64_t price;
  std::string last;
  std::string ssid;

  _company_management_add_type_args__isset __isset;

  void __set_name(const std::string& val);

  void __set_price(const int64_t val);

  void __set_last(const std::string& val);

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_add_type_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(price == rhs.price))
      return false;
    if (!(last == rhs.last))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_add_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_add_type_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_add_type_pargs {
 public:


  virtual ~company_management_add_type_pargs() noexcept;
  const std::string* name;
  const int64_t* price;
  const std::string* last;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_add_type_result__isset {
  _company_management_add_type_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_add_type_result__isset;

class company_management_add_type_result {
 public:

  company_management_add_type_result(const company_management_add_type_result&);
  company_management_add_type_result& operator=(const company_management_add_type_result&);
  company_management_add_type_result() : success(0) {
  }

  virtual ~company_management_add_type_result() noexcept;
  int64_t success;
  gen_exp e;

  _company_management_add_type_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_add_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_add_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_add_type_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_add_type_presult__isset {
  _company_management_add_type_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_add_type_presult__isset;

class company_management_add_type_presult {
 public:


  virtual ~company_management_add_type_presult() noexcept;
  int64_t* success;
  gen_exp e;

  _company_management_add_type_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_edit_type_args__isset {
  _company_management_edit_type_args__isset() : stuff(false), ssid(false) {}
  bool stuff :1;
  bool ssid :1;
} _company_management_edit_type_args__isset;

class company_management_edit_type_args {
 public:

  company_management_edit_type_args(const company_management_edit_type_args&);
  company_management_edit_type_args& operator=(const company_management_edit_type_args&);
  company_management_edit_type_args() : ssid() {
  }

  virtual ~company_management_edit_type_args() noexcept;
  stuff_detail stuff;
  std::string ssid;

  _company_management_edit_type_args__isset __isset;

  void __set_stuff(const stuff_detail& val);

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_edit_type_args & rhs) const
  {
    if (!(stuff == rhs.stuff))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_edit_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_edit_type_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_edit_type_pargs {
 public:


  virtual ~company_management_edit_type_pargs() noexcept;
  const stuff_detail* stuff;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_edit_type_result__isset {
  _company_management_edit_type_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_edit_type_result__isset;

class company_management_edit_type_result {
 public:

  company_management_edit_type_result(const company_management_edit_type_result&);
  company_management_edit_type_result& operator=(const company_management_edit_type_result&);
  company_management_edit_type_result() : success(0) {
  }

  virtual ~company_management_edit_type_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_edit_type_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_edit_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_edit_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_edit_type_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_edit_type_presult__isset {
  _company_management_edit_type_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_edit_type_presult__isset;

class company_management_edit_type_presult {
 public:


  virtual ~company_management_edit_type_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_edit_type_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_remove_type_args__isset {
  _company_management_remove_type_args__isset() : stuff(false), ssid(false) {}
  bool stuff :1;
  bool ssid :1;
} _company_management_remove_type_args__isset;

class company_management_remove_type_args {
 public:

  company_management_remove_type_args(const company_management_remove_type_args&);
  company_management_remove_type_args& operator=(const company_management_remove_type_args&);
  company_management_remove_type_args() : ssid() {
  }

  virtual ~company_management_remove_type_args() noexcept;
  stuff_detail stuff;
  std::string ssid;

  _company_management_remove_type_args__isset __isset;

  void __set_stuff(const stuff_detail& val);

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_remove_type_args & rhs) const
  {
    if (!(stuff == rhs.stuff))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_remove_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_remove_type_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_remove_type_pargs {
 public:


  virtual ~company_management_remove_type_pargs() noexcept;
  const stuff_detail* stuff;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_remove_type_result__isset {
  _company_management_remove_type_result__isset() : e(false) {}
  bool e :1;
} _company_management_remove_type_result__isset;

class company_management_remove_type_result {
 public:

  company_management_remove_type_result(const company_management_remove_type_result&);
  company_management_remove_type_result& operator=(const company_management_remove_type_result&);
  company_management_remove_type_result() {
  }

  virtual ~company_management_remove_type_result() noexcept;
  gen_exp e;

  _company_management_remove_type_result__isset __isset;

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_remove_type_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_remove_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_remove_type_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_remove_type_presult__isset {
  _company_management_remove_type_presult__isset() : e(false) {}
  bool e :1;
} _company_management_remove_type_presult__isset;

class company_management_remove_type_presult {
 public:


  virtual ~company_management_remove_type_presult() noexcept;
  gen_exp e;

  _company_management_remove_type_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_readd_type_args__isset {
  _company_management_readd_type_args__isset() : stuff(false), ssid(false) {}
  bool stuff :1;
  bool ssid :1;
} _company_management_readd_type_args__isset;

class company_management_readd_type_args {
 public:

  company_management_readd_type_args(const company_management_readd_type_args&);
  company_management_readd_type_args& operator=(const company_management_readd_type_args&);
  company_management_readd_type_args() : ssid() {
  }

  virtual ~company_management_readd_type_args() noexcept;
  stuff_detail stuff;
  std::string ssid;

  _company_management_readd_type_args__isset __isset;

  void __set_stuff(const stuff_detail& val);

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_readd_type_args & rhs) const
  {
    if (!(stuff == rhs.stuff))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_readd_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_readd_type_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_readd_type_pargs {
 public:


  virtual ~company_management_readd_type_pargs() noexcept;
  const stuff_detail* stuff;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_readd_type_result__isset {
  _company_management_readd_type_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_readd_type_result__isset;

class company_management_readd_type_result {
 public:

  company_management_readd_type_result(const company_management_readd_type_result&);
  company_management_readd_type_result& operator=(const company_management_readd_type_result&);
  company_management_readd_type_result() : success(0) {
  }

  virtual ~company_management_readd_type_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_readd_type_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_readd_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_readd_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_readd_type_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_readd_type_presult__isset {
  _company_management_readd_type_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_readd_type_presult__isset;

class company_management_readd_type_presult {
 public:


  virtual ~company_management_readd_type_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_readd_type_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_all_apply_args__isset {
  _company_management_get_all_apply_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_all_apply_args__isset;

class company_management_get_all_apply_args {
 public:

  company_management_get_all_apply_args(const company_management_get_all_apply_args&);
  company_management_get_all_apply_args& operator=(const company_management_get_all_apply_args&);
  company_management_get_all_apply_args() : ssid() {
  }

  virtual ~company_management_get_all_apply_args() noexcept;
  std::string ssid;

  _company_management_get_all_apply_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_all_apply_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_apply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_apply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_all_apply_pargs {
 public:


  virtual ~company_management_get_all_apply_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_apply_result__isset {
  _company_management_get_all_apply_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_apply_result__isset;

class company_management_get_all_apply_result {
 public:

  company_management_get_all_apply_result(const company_management_get_all_apply_result&);
  company_management_get_all_apply_result& operator=(const company_management_get_all_apply_result&);
  company_management_get_all_apply_result() {
  }

  virtual ~company_management_get_all_apply_result() noexcept;
  std::vector<user_apply>  success;
  gen_exp e;

  _company_management_get_all_apply_result__isset __isset;

  void __set_success(const std::vector<user_apply> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_all_apply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_apply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_apply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_apply_presult__isset {
  _company_management_get_all_apply_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_apply_presult__isset;

class company_management_get_all_apply_presult {
 public:


  virtual ~company_management_get_all_apply_presult() noexcept;
  std::vector<user_apply> * success;
  gen_exp e;

  _company_management_get_all_apply_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_approve_apply_args__isset {
  _company_management_approve_apply_args__isset() : apply_id(false), ssid(false), approve(false) {}
  bool apply_id :1;
  bool ssid :1;
  bool approve :1;
} _company_management_approve_apply_args__isset;

class company_management_approve_apply_args {
 public:

  company_management_approve_apply_args(const company_management_approve_apply_args&);
  company_management_approve_apply_args& operator=(const company_management_approve_apply_args&);
  company_management_approve_apply_args() : apply_id(0), ssid(), approve(0) {
  }

  virtual ~company_management_approve_apply_args() noexcept;
  int64_t apply_id;
  std::string ssid;
  bool approve;

  _company_management_approve_apply_args__isset __isset;

  void __set_apply_id(const int64_t val);

  void __set_ssid(const std::string& val);

  void __set_approve(const bool val);

  bool operator == (const company_management_approve_apply_args & rhs) const
  {
    if (!(apply_id == rhs.apply_id))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    if (!(approve == rhs.approve))
      return false;
    return true;
  }
  bool operator != (const company_management_approve_apply_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_approve_apply_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_approve_apply_pargs {
 public:


  virtual ~company_management_approve_apply_pargs() noexcept;
  const int64_t* apply_id;
  const std::string* ssid;
  const bool* approve;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_approve_apply_result__isset {
  _company_management_approve_apply_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_approve_apply_result__isset;

class company_management_approve_apply_result {
 public:

  company_management_approve_apply_result(const company_management_approve_apply_result&);
  company_management_approve_apply_result& operator=(const company_management_approve_apply_result&);
  company_management_approve_apply_result() : success(0) {
  }

  virtual ~company_management_approve_apply_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_approve_apply_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_approve_apply_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_approve_apply_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_approve_apply_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_approve_apply_presult__isset {
  _company_management_approve_apply_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_approve_apply_presult__isset;

class company_management_approve_apply_presult {
 public:


  virtual ~company_management_approve_apply_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_approve_apply_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_generate_statistics_args__isset {
  _company_management_generate_statistics_args__isset() : ssid(false), begin_date(false), end_date(false) {}
  bool ssid :1;
  bool begin_date :1;
  bool end_date :1;
} _company_management_generate_statistics_args__isset;

class company_management_generate_statistics_args {
 public:

  company_management_generate_statistics_args(const company_management_generate_statistics_args&);
  company_management_generate_statistics_args& operator=(const company_management_generate_statistics_args&);
  company_management_generate_statistics_args() : ssid(), begin_date(0), end_date(0) {
  }

  virtual ~company_management_generate_statistics_args() noexcept;
  std::string ssid;
  int64_t begin_date;
  int64_t end_date;

  _company_management_generate_statistics_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_begin_date(const int64_t val);

  void __set_end_date(const int64_t val);

  bool operator == (const company_management_generate_statistics_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(begin_date == rhs.begin_date))
      return false;
    if (!(end_date == rhs.end_date))
      return false;
    return true;
  }
  bool operator != (const company_management_generate_statistics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_generate_statistics_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_generate_statistics_pargs {
 public:


  virtual ~company_management_generate_statistics_pargs() noexcept;
  const std::string* ssid;
  const int64_t* begin_date;
  const int64_t* end_date;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_generate_statistics_result__isset {
  _company_management_generate_statistics_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_generate_statistics_result__isset;

class company_management_generate_statistics_result {
 public:

  company_management_generate_statistics_result(const company_management_generate_statistics_result&);
  company_management_generate_statistics_result& operator=(const company_management_generate_statistics_result&);
  company_management_generate_statistics_result() : success() {
  }

  virtual ~company_management_generate_statistics_result() noexcept;
  std::string success;
  gen_exp e;

  _company_management_generate_statistics_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_generate_statistics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_generate_statistics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_generate_statistics_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_generate_statistics_presult__isset {
  _company_management_generate_statistics_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_generate_statistics_presult__isset;

class company_management_generate_statistics_presult {
 public:


  virtual ~company_management_generate_statistics_presult() noexcept;
  std::string* success;
  gen_exp e;

  _company_management_generate_statistics_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_set_notice_args__isset {
  _company_management_set_notice_args__isset() : ssid(false), notice(false) {}
  bool ssid :1;
  bool notice :1;
} _company_management_set_notice_args__isset;

class company_management_set_notice_args {
 public:

  company_management_set_notice_args(const company_management_set_notice_args&);
  company_management_set_notice_args& operator=(const company_management_set_notice_args&);
  company_management_set_notice_args() : ssid(), notice() {
  }

  virtual ~company_management_set_notice_args() noexcept;
  std::string ssid;
  std::string notice;

  _company_management_set_notice_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_notice(const std::string& val);

  bool operator == (const company_management_set_notice_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(notice == rhs.notice))
      return false;
    return true;
  }
  bool operator != (const company_management_set_notice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_notice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_set_notice_pargs {
 public:


  virtual ~company_management_set_notice_pargs() noexcept;
  const std::string* ssid;
  const std::string* notice;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_notice_result__isset {
  _company_management_set_notice_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_notice_result__isset;

class company_management_set_notice_result {
 public:

  company_management_set_notice_result(const company_management_set_notice_result&);
  company_management_set_notice_result& operator=(const company_management_set_notice_result&);
  company_management_set_notice_result() : success(0) {
  }

  virtual ~company_management_set_notice_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_set_notice_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_set_notice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_set_notice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_notice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_notice_presult__isset {
  _company_management_set_notice_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_notice_presult__isset;

class company_management_set_notice_presult {
 public:


  virtual ~company_management_set_notice_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_set_notice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_notice_args__isset {
  _company_management_get_notice_args__isset() : company_name(false) {}
  bool company_name :1;
} _company_management_get_notice_args__isset;

class company_management_get_notice_args {
 public:

  company_management_get_notice_args(const company_management_get_notice_args&);
  company_management_get_notice_args& operator=(const company_management_get_notice_args&);
  company_management_get_notice_args() : company_name() {
  }

  virtual ~company_management_get_notice_args() noexcept;
  std::string company_name;

  _company_management_get_notice_args__isset __isset;

  void __set_company_name(const std::string& val);

  bool operator == (const company_management_get_notice_args & rhs) const
  {
    if (!(company_name == rhs.company_name))
      return false;
    return true;
  }
  bool operator != (const company_management_get_notice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_notice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_notice_pargs {
 public:


  virtual ~company_management_get_notice_pargs() noexcept;
  const std::string* company_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_notice_result__isset {
  _company_management_get_notice_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_notice_result__isset;

class company_management_get_notice_result {
 public:

  company_management_get_notice_result(const company_management_get_notice_result&);
  company_management_get_notice_result& operator=(const company_management_get_notice_result&);
  company_management_get_notice_result() : success() {
  }

  virtual ~company_management_get_notice_result() noexcept;
  std::string success;
  gen_exp e;

  _company_management_get_notice_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_notice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_notice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_notice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_notice_presult__isset {
  _company_management_get_notice_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_notice_presult__isset;

class company_management_get_notice_presult {
 public:


  virtual ~company_management_get_notice_presult() noexcept;
  std::string* success;
  gen_exp e;

  _company_management_get_notice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_clear_notice_args__isset {
  _company_management_clear_notice_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_clear_notice_args__isset;

class company_management_clear_notice_args {
 public:

  company_management_clear_notice_args(const company_management_clear_notice_args&);
  company_management_clear_notice_args& operator=(const company_management_clear_notice_args&);
  company_management_clear_notice_args() : ssid() {
  }

  virtual ~company_management_clear_notice_args() noexcept;
  std::string ssid;

  _company_management_clear_notice_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_clear_notice_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_clear_notice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_clear_notice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_clear_notice_pargs {
 public:


  virtual ~company_management_clear_notice_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_clear_notice_result__isset {
  _company_management_clear_notice_result__isset() : e(false) {}
  bool e :1;
} _company_management_clear_notice_result__isset;

class company_management_clear_notice_result {
 public:

  company_management_clear_notice_result(const company_management_clear_notice_result&);
  company_management_clear_notice_result& operator=(const company_management_clear_notice_result&);
  company_management_clear_notice_result() {
  }

  virtual ~company_management_clear_notice_result() noexcept;
  gen_exp e;

  _company_management_clear_notice_result__isset __isset;

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_clear_notice_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_clear_notice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_clear_notice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_clear_notice_presult__isset {
  _company_management_clear_notice_presult__isset() : e(false) {}
  bool e :1;
} _company_management_clear_notice_presult__isset;

class company_management_clear_notice_presult {
 public:


  virtual ~company_management_clear_notice_presult() noexcept;
  gen_exp e;

  _company_management_clear_notice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_all_compay_user_args__isset {
  _company_management_get_all_compay_user_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_all_compay_user_args__isset;

class company_management_get_all_compay_user_args {
 public:

  company_management_get_all_compay_user_args(const company_management_get_all_compay_user_args&);
  company_management_get_all_compay_user_args& operator=(const company_management_get_all_compay_user_args&);
  company_management_get_all_compay_user_args() : ssid() {
  }

  virtual ~company_management_get_all_compay_user_args() noexcept;
  std::string ssid;

  _company_management_get_all_compay_user_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_all_compay_user_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_compay_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_compay_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_all_compay_user_pargs {
 public:


  virtual ~company_management_get_all_compay_user_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_compay_user_result__isset {
  _company_management_get_all_compay_user_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_compay_user_result__isset;

class company_management_get_all_compay_user_result {
 public:

  company_management_get_all_compay_user_result(const company_management_get_all_compay_user_result&);
  company_management_get_all_compay_user_result& operator=(const company_management_get_all_compay_user_result&);
  company_management_get_all_compay_user_result() {
  }

  virtual ~company_management_get_all_compay_user_result() noexcept;
  std::vector<user_info>  success;
  gen_exp e;

  _company_management_get_all_compay_user_result__isset __isset;

  void __set_success(const std::vector<user_info> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_all_compay_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_compay_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_compay_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_compay_user_presult__isset {
  _company_management_get_all_compay_user_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_compay_user_presult__isset;

class company_management_get_all_compay_user_presult {
 public:


  virtual ~company_management_get_all_compay_user_presult() noexcept;
  std::vector<user_info> * success;
  gen_exp e;

  _company_management_get_all_compay_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_remove_user_from_company_args__isset {
  _company_management_remove_user_from_company_args__isset() : ssid(false), user_id(false) {}
  bool ssid :1;
  bool user_id :1;
} _company_management_remove_user_from_company_args__isset;

class company_management_remove_user_from_company_args {
 public:

  company_management_remove_user_from_company_args(const company_management_remove_user_from_company_args&);
  company_management_remove_user_from_company_args& operator=(const company_management_remove_user_from_company_args&);
  company_management_remove_user_from_company_args() : ssid(), user_id(0) {
  }

  virtual ~company_management_remove_user_from_company_args() noexcept;
  std::string ssid;
  int64_t user_id;

  _company_management_remove_user_from_company_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_user_id(const int64_t val);

  bool operator == (const company_management_remove_user_from_company_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const company_management_remove_user_from_company_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_remove_user_from_company_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_remove_user_from_company_pargs {
 public:


  virtual ~company_management_remove_user_from_company_pargs() noexcept;
  const std::string* ssid;
  const int64_t* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_remove_user_from_company_result__isset {
  _company_management_remove_user_from_company_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_remove_user_from_company_result__isset;

class company_management_remove_user_from_company_result {
 public:

  company_management_remove_user_from_company_result(const company_management_remove_user_from_company_result&);
  company_management_remove_user_from_company_result& operator=(const company_management_remove_user_from_company_result&);
  company_management_remove_user_from_company_result() : success(0) {
  }

  virtual ~company_management_remove_user_from_company_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_remove_user_from_company_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_remove_user_from_company_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_remove_user_from_company_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_remove_user_from_company_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_remove_user_from_company_presult__isset {
  _company_management_remove_user_from_company_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_remove_user_from_company_presult__isset;

class company_management_remove_user_from_company_presult {
 public:


  virtual ~company_management_remove_user_from_company_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_remove_user_from_company_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_company_logo_args__isset {
  _company_management_get_company_logo_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_company_logo_args__isset;

class company_management_get_company_logo_args {
 public:

  company_management_get_company_logo_args(const company_management_get_company_logo_args&);
  company_management_get_company_logo_args& operator=(const company_management_get_company_logo_args&);
  company_management_get_company_logo_args() : ssid() {
  }

  virtual ~company_management_get_company_logo_args() noexcept;
  std::string ssid;

  _company_management_get_company_logo_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_company_logo_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_company_logo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_company_logo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_company_logo_pargs {
 public:


  virtual ~company_management_get_company_logo_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_company_logo_result__isset {
  _company_management_get_company_logo_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_company_logo_result__isset;

class company_management_get_company_logo_result {
 public:

  company_management_get_company_logo_result(const company_management_get_company_logo_result&);
  company_management_get_company_logo_result& operator=(const company_management_get_company_logo_result&);
  company_management_get_company_logo_result() : success() {
  }

  virtual ~company_management_get_company_logo_result() noexcept;
  std::string success;
  gen_exp e;

  _company_management_get_company_logo_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_company_logo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_company_logo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_company_logo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_company_logo_presult__isset {
  _company_management_get_company_logo_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_company_logo_presult__isset;

class company_management_get_company_logo_presult {
 public:


  virtual ~company_management_get_company_logo_presult() noexcept;
  std::string* success;
  gen_exp e;

  _company_management_get_company_logo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_set_address_args__isset {
  _company_management_set_address_args__isset() : ssid(false), address(false) {}
  bool ssid :1;
  bool address :1;
} _company_management_set_address_args__isset;

class company_management_set_address_args {
 public:

  company_management_set_address_args(const company_management_set_address_args&);
  company_management_set_address_args& operator=(const company_management_set_address_args&);
  company_management_set_address_args() : ssid(), address() {
  }

  virtual ~company_management_set_address_args() noexcept;
  std::string ssid;
  std::string address;

  _company_management_set_address_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_address(const std::string& val);

  bool operator == (const company_management_set_address_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(address == rhs.address))
      return false;
    return true;
  }
  bool operator != (const company_management_set_address_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_address_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_set_address_pargs {
 public:


  virtual ~company_management_set_address_pargs() noexcept;
  const std::string* ssid;
  const std::string* address;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_address_result__isset {
  _company_management_set_address_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_address_result__isset;

class company_management_set_address_result {
 public:

  company_management_set_address_result(const company_management_set_address_result&);
  company_management_set_address_result& operator=(const company_management_set_address_result&);
  company_management_set_address_result() : success(0) {
  }

  virtual ~company_management_set_address_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_set_address_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_set_address_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_set_address_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_address_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_address_presult__isset {
  _company_management_set_address_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_address_presult__isset;

class company_management_set_address_presult {
 public:


  virtual ~company_management_set_address_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_set_address_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_address_args__isset {
  _company_management_get_address_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_address_args__isset;

class company_management_get_address_args {
 public:

  company_management_get_address_args(const company_management_get_address_args&);
  company_management_get_address_args& operator=(const company_management_get_address_args&);
  company_management_get_address_args() : ssid() {
  }

  virtual ~company_management_get_address_args() noexcept;
  std::string ssid;

  _company_management_get_address_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_address_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_address_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_address_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_address_pargs {
 public:


  virtual ~company_management_get_address_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_address_result__isset {
  _company_management_get_address_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_address_result__isset;

class company_management_get_address_result {
 public:

  company_management_get_address_result(const company_management_get_address_result&);
  company_management_get_address_result& operator=(const company_management_get_address_result&);
  company_management_get_address_result() : success() {
  }

  virtual ~company_management_get_address_result() noexcept;
  std::string success;
  gen_exp e;

  _company_management_get_address_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_address_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_address_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_address_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_address_presult__isset {
  _company_management_get_address_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_address_presult__isset;

class company_management_get_address_presult {
 public:


  virtual ~company_management_get_address_presult() noexcept;
  std::string* success;
  gen_exp e;

  _company_management_get_address_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_set_contact_args__isset {
  _company_management_set_contact_args__isset() : ssid(false), contact(false) {}
  bool ssid :1;
  bool contact :1;
} _company_management_set_contact_args__isset;

class company_management_set_contact_args {
 public:

  company_management_set_contact_args(const company_management_set_contact_args&);
  company_management_set_contact_args& operator=(const company_management_set_contact_args&);
  company_management_set_contact_args() : ssid(), contact() {
  }

  virtual ~company_management_set_contact_args() noexcept;
  std::string ssid;
  std::string contact;

  _company_management_set_contact_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_contact(const std::string& val);

  bool operator == (const company_management_set_contact_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(contact == rhs.contact))
      return false;
    return true;
  }
  bool operator != (const company_management_set_contact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_contact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_set_contact_pargs {
 public:


  virtual ~company_management_set_contact_pargs() noexcept;
  const std::string* ssid;
  const std::string* contact;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_contact_result__isset {
  _company_management_set_contact_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_contact_result__isset;

class company_management_set_contact_result {
 public:

  company_management_set_contact_result(const company_management_set_contact_result&);
  company_management_set_contact_result& operator=(const company_management_set_contact_result&);
  company_management_set_contact_result() : success(0) {
  }

  virtual ~company_management_set_contact_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_set_contact_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_set_contact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_set_contact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_contact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_contact_presult__isset {
  _company_management_set_contact_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_contact_presult__isset;

class company_management_set_contact_presult {
 public:


  virtual ~company_management_set_contact_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_set_contact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_contact_args__isset {
  _company_management_get_contact_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_contact_args__isset;

class company_management_get_contact_args {
 public:

  company_management_get_contact_args(const company_management_get_contact_args&);
  company_management_get_contact_args& operator=(const company_management_get_contact_args&);
  company_management_get_contact_args() : ssid() {
  }

  virtual ~company_management_get_contact_args() noexcept;
  std::string ssid;

  _company_management_get_contact_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_contact_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_contact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_contact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_contact_pargs {
 public:


  virtual ~company_management_get_contact_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_contact_result__isset {
  _company_management_get_contact_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_contact_result__isset;

class company_management_get_contact_result {
 public:

  company_management_get_contact_result(const company_management_get_contact_result&);
  company_management_get_contact_result& operator=(const company_management_get_contact_result&);
  company_management_get_contact_result() : success() {
  }

  virtual ~company_management_get_contact_result() noexcept;
  std::string success;
  gen_exp e;

  _company_management_get_contact_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_contact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_contact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_contact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_contact_presult__isset {
  _company_management_get_contact_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_contact_presult__isset;

class company_management_get_contact_presult {
 public:


  virtual ~company_management_get_contact_presult() noexcept;
  std::string* success;
  gen_exp e;

  _company_management_get_contact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_address_contact_args__isset {
  _company_management_get_address_contact_args__isset() : company_name(false) {}
  bool company_name :1;
} _company_management_get_address_contact_args__isset;

class company_management_get_address_contact_args {
 public:

  company_management_get_address_contact_args(const company_management_get_address_contact_args&);
  company_management_get_address_contact_args& operator=(const company_management_get_address_contact_args&);
  company_management_get_address_contact_args() : company_name() {
  }

  virtual ~company_management_get_address_contact_args() noexcept;
  std::string company_name;

  _company_management_get_address_contact_args__isset __isset;

  void __set_company_name(const std::string& val);

  bool operator == (const company_management_get_address_contact_args & rhs) const
  {
    if (!(company_name == rhs.company_name))
      return false;
    return true;
  }
  bool operator != (const company_management_get_address_contact_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_address_contact_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_address_contact_pargs {
 public:


  virtual ~company_management_get_address_contact_pargs() noexcept;
  const std::string* company_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_address_contact_result__isset {
  _company_management_get_address_contact_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_address_contact_result__isset;

class company_management_get_address_contact_result {
 public:

  company_management_get_address_contact_result(const company_management_get_address_contact_result&);
  company_management_get_address_contact_result& operator=(const company_management_get_address_contact_result&);
  company_management_get_address_contact_result() {
  }

  virtual ~company_management_get_address_contact_result() noexcept;
  company_address_contact_info success;
  gen_exp e;

  _company_management_get_address_contact_result__isset __isset;

  void __set_success(const company_address_contact_info& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_address_contact_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_address_contact_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_address_contact_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_address_contact_presult__isset {
  _company_management_get_address_contact_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_address_contact_presult__isset;

class company_management_get_address_contact_presult {
 public:


  virtual ~company_management_get_address_contact_presult() noexcept;
  company_address_contact_info* success;
  gen_exp e;

  _company_management_get_address_contact_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_add_attachment_args__isset {
  _company_management_add_attachment_args__isset() : ssid(false), base64content(false), is_pdf(false) {}
  bool ssid :1;
  bool base64content :1;
  bool is_pdf :1;
} _company_management_add_attachment_args__isset;

class company_management_add_attachment_args {
 public:

  company_management_add_attachment_args(const company_management_add_attachment_args&);
  company_management_add_attachment_args& operator=(const company_management_add_attachment_args&);
  company_management_add_attachment_args() : ssid(), base64content(), is_pdf(0) {
  }

  virtual ~company_management_add_attachment_args() noexcept;
  std::string ssid;
  std::string base64content;
  bool is_pdf;

  _company_management_add_attachment_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_base64content(const std::string& val);

  void __set_is_pdf(const bool val);

  bool operator == (const company_management_add_attachment_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(base64content == rhs.base64content))
      return false;
    if (!(is_pdf == rhs.is_pdf))
      return false;
    return true;
  }
  bool operator != (const company_management_add_attachment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_add_attachment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_add_attachment_pargs {
 public:


  virtual ~company_management_add_attachment_pargs() noexcept;
  const std::string* ssid;
  const std::string* base64content;
  const bool* is_pdf;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_add_attachment_result__isset {
  _company_management_add_attachment_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_add_attachment_result__isset;

class company_management_add_attachment_result {
 public:

  company_management_add_attachment_result(const company_management_add_attachment_result&);
  company_management_add_attachment_result& operator=(const company_management_add_attachment_result&);
  company_management_add_attachment_result() : success(0) {
  }

  virtual ~company_management_add_attachment_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_add_attachment_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_add_attachment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_add_attachment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_add_attachment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_add_attachment_presult__isset {
  _company_management_add_attachment_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_add_attachment_presult__isset;

class company_management_add_attachment_presult {
 public:


  virtual ~company_management_add_attachment_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_add_attachment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_del_attachment_args__isset {
  _company_management_del_attachment_args__isset() : ssid(false), id(false) {}
  bool ssid :1;
  bool id :1;
} _company_management_del_attachment_args__isset;

class company_management_del_attachment_args {
 public:

  company_management_del_attachment_args(const company_management_del_attachment_args&);
  company_management_del_attachment_args& operator=(const company_management_del_attachment_args&);
  company_management_del_attachment_args() : ssid(), id(0) {
  }

  virtual ~company_management_del_attachment_args() noexcept;
  std::string ssid;
  int64_t id;

  _company_management_del_attachment_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_id(const int64_t val);

  bool operator == (const company_management_del_attachment_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const company_management_del_attachment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_del_attachment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_del_attachment_pargs {
 public:


  virtual ~company_management_del_attachment_pargs() noexcept;
  const std::string* ssid;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_del_attachment_result__isset {
  _company_management_del_attachment_result__isset() : e(false) {}
  bool e :1;
} _company_management_del_attachment_result__isset;

class company_management_del_attachment_result {
 public:

  company_management_del_attachment_result(const company_management_del_attachment_result&);
  company_management_del_attachment_result& operator=(const company_management_del_attachment_result&);
  company_management_del_attachment_result() {
  }

  virtual ~company_management_del_attachment_result() noexcept;
  gen_exp e;

  _company_management_del_attachment_result__isset __isset;

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_del_attachment_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_del_attachment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_del_attachment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_del_attachment_presult__isset {
  _company_management_del_attachment_presult__isset() : e(false) {}
  bool e :1;
} _company_management_del_attachment_presult__isset;

class company_management_del_attachment_presult {
 public:


  virtual ~company_management_del_attachment_presult() noexcept;
  gen_exp e;

  _company_management_del_attachment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_all_attachment_args__isset {
  _company_management_get_all_attachment_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_all_attachment_args__isset;

class company_management_get_all_attachment_args {
 public:

  company_management_get_all_attachment_args(const company_management_get_all_attachment_args&);
  company_management_get_all_attachment_args& operator=(const company_management_get_all_attachment_args&);
  company_management_get_all_attachment_args() : ssid() {
  }

  virtual ~company_management_get_all_attachment_args() noexcept;
  std::string ssid;

  _company_management_get_all_attachment_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_all_attachment_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_attachment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_attachment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_all_attachment_pargs {
 public:


  virtual ~company_management_get_all_attachment_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_attachment_result__isset {
  _company_management_get_all_attachment_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_attachment_result__isset;

class company_management_get_all_attachment_result {
 public:

  company_management_get_all_attachment_result(const company_management_get_all_attachment_result&);
  company_management_get_all_attachment_result& operator=(const company_management_get_all_attachment_result&);
  company_management_get_all_attachment_result() {
  }

  virtual ~company_management_get_all_attachment_result() noexcept;
  std::vector<company_attachment>  success;
  gen_exp e;

  _company_management_get_all_attachment_result__isset __isset;

  void __set_success(const std::vector<company_attachment> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_all_attachment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_attachment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_attachment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_attachment_presult__isset {
  _company_management_get_all_attachment_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_attachment_presult__isset;

class company_management_get_all_attachment_presult {
 public:


  virtual ~company_management_get_all_attachment_presult() noexcept;
  std::vector<company_attachment> * success;
  gen_exp e;

  _company_management_get_all_attachment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_attachment_args__isset {
  _company_management_get_attachment_args__isset() : company_name(false) {}
  bool company_name :1;
} _company_management_get_attachment_args__isset;

class company_management_get_attachment_args {
 public:

  company_management_get_attachment_args(const company_management_get_attachment_args&);
  company_management_get_attachment_args& operator=(const company_management_get_attachment_args&);
  company_management_get_attachment_args() : company_name() {
  }

  virtual ~company_management_get_attachment_args() noexcept;
  std::string company_name;

  _company_management_get_attachment_args__isset __isset;

  void __set_company_name(const std::string& val);

  bool operator == (const company_management_get_attachment_args & rhs) const
  {
    if (!(company_name == rhs.company_name))
      return false;
    return true;
  }
  bool operator != (const company_management_get_attachment_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_attachment_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_attachment_pargs {
 public:


  virtual ~company_management_get_attachment_pargs() noexcept;
  const std::string* company_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_attachment_result__isset {
  _company_management_get_attachment_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_attachment_result__isset;

class company_management_get_attachment_result {
 public:

  company_management_get_attachment_result(const company_management_get_attachment_result&);
  company_management_get_attachment_result& operator=(const company_management_get_attachment_result&);
  company_management_get_attachment_result() : success() {
  }

  virtual ~company_management_get_attachment_result() noexcept;
  std::string success;
  gen_exp e;

  _company_management_get_attachment_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_attachment_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_attachment_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_attachment_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_attachment_presult__isset {
  _company_management_get_attachment_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_attachment_presult__isset;

class company_management_get_attachment_presult {
 public:


  virtual ~company_management_get_attachment_presult() noexcept;
  std::string* success;
  gen_exp e;

  _company_management_get_attachment_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_real_access_args__isset {
  _company_management_get_real_access_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_real_access_args__isset;

class company_management_get_real_access_args {
 public:

  company_management_get_real_access_args(const company_management_get_real_access_args&);
  company_management_get_real_access_args& operator=(const company_management_get_real_access_args&);
  company_management_get_real_access_args() : ssid() {
  }

  virtual ~company_management_get_real_access_args() noexcept;
  std::string ssid;

  _company_management_get_real_access_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_real_access_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_real_access_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_real_access_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_real_access_pargs {
 public:


  virtual ~company_management_get_real_access_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_real_access_result__isset {
  _company_management_get_real_access_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_real_access_result__isset;

class company_management_get_real_access_result {
 public:

  company_management_get_real_access_result(const company_management_get_real_access_result&);
  company_management_get_real_access_result& operator=(const company_management_get_real_access_result&);
  company_management_get_real_access_result() {
  }

  virtual ~company_management_get_real_access_result() noexcept;
  std::vector<real_access_record>  success;
  gen_exp e;

  _company_management_get_real_access_result__isset __isset;

  void __set_success(const std::vector<real_access_record> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_real_access_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_real_access_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_real_access_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_real_access_presult__isset {
  _company_management_get_real_access_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_real_access_presult__isset;

class company_management_get_real_access_presult {
 public:


  virtual ~company_management_get_real_access_presult() noexcept;
  std::vector<real_access_record> * success;
  gen_exp e;

  _company_management_get_real_access_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_all_access_args__isset {
  _company_management_get_all_access_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_all_access_args__isset;

class company_management_get_all_access_args {
 public:

  company_management_get_all_access_args(const company_management_get_all_access_args&);
  company_management_get_all_access_args& operator=(const company_management_get_all_access_args&);
  company_management_get_all_access_args() : ssid() {
  }

  virtual ~company_management_get_all_access_args() noexcept;
  std::string ssid;

  _company_management_get_all_access_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_all_access_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_access_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_access_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_all_access_pargs {
 public:


  virtual ~company_management_get_all_access_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_access_result__isset {
  _company_management_get_all_access_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_access_result__isset;

class company_management_get_all_access_result {
 public:

  company_management_get_all_access_result(const company_management_get_all_access_result&);
  company_management_get_all_access_result& operator=(const company_management_get_all_access_result&);
  company_management_get_all_access_result() {
  }

  virtual ~company_management_get_all_access_result() noexcept;
  std::vector<real_access_record>  success;
  gen_exp e;

  _company_management_get_all_access_result__isset __isset;

  void __set_success(const std::vector<real_access_record> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_all_access_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_access_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_access_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_access_presult__isset {
  _company_management_get_all_access_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_access_presult__isset;

class company_management_get_all_access_presult {
 public:


  virtual ~company_management_get_all_access_presult() noexcept;
  std::vector<real_access_record> * success;
  gen_exp e;

  _company_management_get_all_access_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_add_contract_args__isset {
  _company_management_add_contract_args__isset() : ssid(false), contract(false) {}
  bool ssid :1;
  bool contract :1;
} _company_management_add_contract_args__isset;

class company_management_add_contract_args {
 public:

  company_management_add_contract_args(const company_management_add_contract_args&);
  company_management_add_contract_args& operator=(const company_management_add_contract_args&);
  company_management_add_contract_args() : ssid() {
  }

  virtual ~company_management_add_contract_args() noexcept;
  std::string ssid;
  common_contract contract;

  _company_management_add_contract_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_contract(const common_contract& val);

  bool operator == (const company_management_add_contract_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(contract == rhs.contract))
      return false;
    return true;
  }
  bool operator != (const company_management_add_contract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_add_contract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_add_contract_pargs {
 public:


  virtual ~company_management_add_contract_pargs() noexcept;
  const std::string* ssid;
  const common_contract* contract;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_add_contract_result__isset {
  _company_management_add_contract_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_add_contract_result__isset;

class company_management_add_contract_result {
 public:

  company_management_add_contract_result(const company_management_add_contract_result&);
  company_management_add_contract_result& operator=(const company_management_add_contract_result&);
  company_management_add_contract_result() : success(0) {
  }

  virtual ~company_management_add_contract_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_add_contract_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_add_contract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_add_contract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_add_contract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_add_contract_presult__isset {
  _company_management_add_contract_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_add_contract_presult__isset;

class company_management_add_contract_presult {
 public:


  virtual ~company_management_add_contract_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_add_contract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_update_contract_args__isset {
  _company_management_update_contract_args__isset() : ssid(false), contract(false) {}
  bool ssid :1;
  bool contract :1;
} _company_management_update_contract_args__isset;

class company_management_update_contract_args {
 public:

  company_management_update_contract_args(const company_management_update_contract_args&);
  company_management_update_contract_args& operator=(const company_management_update_contract_args&);
  company_management_update_contract_args() : ssid() {
  }

  virtual ~company_management_update_contract_args() noexcept;
  std::string ssid;
  common_contract contract;

  _company_management_update_contract_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_contract(const common_contract& val);

  bool operator == (const company_management_update_contract_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(contract == rhs.contract))
      return false;
    return true;
  }
  bool operator != (const company_management_update_contract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_update_contract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_update_contract_pargs {
 public:


  virtual ~company_management_update_contract_pargs() noexcept;
  const std::string* ssid;
  const common_contract* contract;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_update_contract_result__isset {
  _company_management_update_contract_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_update_contract_result__isset;

class company_management_update_contract_result {
 public:

  company_management_update_contract_result(const company_management_update_contract_result&);
  company_management_update_contract_result& operator=(const company_management_update_contract_result&);
  company_management_update_contract_result() : success(0) {
  }

  virtual ~company_management_update_contract_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_update_contract_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_update_contract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_update_contract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_update_contract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_update_contract_presult__isset {
  _company_management_update_contract_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_update_contract_presult__isset;

class company_management_update_contract_presult {
 public:


  virtual ~company_management_update_contract_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_update_contract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_del_contract_args__isset {
  _company_management_del_contract_args__isset() : ssid(false), id(false) {}
  bool ssid :1;
  bool id :1;
} _company_management_del_contract_args__isset;

class company_management_del_contract_args {
 public:

  company_management_del_contract_args(const company_management_del_contract_args&);
  company_management_del_contract_args& operator=(const company_management_del_contract_args&);
  company_management_del_contract_args() : ssid(), id(0) {
  }

  virtual ~company_management_del_contract_args() noexcept;
  std::string ssid;
  int64_t id;

  _company_management_del_contract_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_id(const int64_t val);

  bool operator == (const company_management_del_contract_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const company_management_del_contract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_del_contract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_del_contract_pargs {
 public:


  virtual ~company_management_del_contract_pargs() noexcept;
  const std::string* ssid;
  const int64_t* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_del_contract_result__isset {
  _company_management_del_contract_result__isset() : e(false) {}
  bool e :1;
} _company_management_del_contract_result__isset;

class company_management_del_contract_result {
 public:

  company_management_del_contract_result(const company_management_del_contract_result&);
  company_management_del_contract_result& operator=(const company_management_del_contract_result&);
  company_management_del_contract_result() {
  }

  virtual ~company_management_del_contract_result() noexcept;
  gen_exp e;

  _company_management_del_contract_result__isset __isset;

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_del_contract_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_del_contract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_del_contract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_del_contract_presult__isset {
  _company_management_del_contract_presult__isset() : e(false) {}
  bool e :1;
} _company_management_del_contract_presult__isset;

class company_management_del_contract_presult {
 public:


  virtual ~company_management_del_contract_presult() noexcept;
  gen_exp e;

  _company_management_del_contract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_all_contract_args__isset {
  _company_management_get_all_contract_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_all_contract_args__isset;

class company_management_get_all_contract_args {
 public:

  company_management_get_all_contract_args(const company_management_get_all_contract_args&);
  company_management_get_all_contract_args& operator=(const company_management_get_all_contract_args&);
  company_management_get_all_contract_args() : ssid() {
  }

  virtual ~company_management_get_all_contract_args() noexcept;
  std::string ssid;

  _company_management_get_all_contract_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_all_contract_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_contract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_contract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_all_contract_pargs {
 public:


  virtual ~company_management_get_all_contract_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_contract_result__isset {
  _company_management_get_all_contract_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_contract_result__isset;

class company_management_get_all_contract_result {
 public:

  company_management_get_all_contract_result(const company_management_get_all_contract_result&);
  company_management_get_all_contract_result& operator=(const company_management_get_all_contract_result&);
  company_management_get_all_contract_result() {
  }

  virtual ~company_management_get_all_contract_result() noexcept;
  std::vector<common_contract>  success;
  gen_exp e;

  _company_management_get_all_contract_result__isset __isset;

  void __set_success(const std::vector<common_contract> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_all_contract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_contract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_contract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_contract_presult__isset {
  _company_management_get_all_contract_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_all_contract_presult__isset;

class company_management_get_all_contract_presult {
 public:


  virtual ~company_management_get_all_contract_presult() noexcept;
  std::vector<common_contract> * success;
  gen_exp e;

  _company_management_get_all_contract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_contract_args__isset {
  _company_management_get_contract_args__isset() : a_side_company(false), b_side_company(false) {}
  bool a_side_company :1;
  bool b_side_company :1;
} _company_management_get_contract_args__isset;

class company_management_get_contract_args {
 public:

  company_management_get_contract_args(const company_management_get_contract_args&);
  company_management_get_contract_args& operator=(const company_management_get_contract_args&);
  company_management_get_contract_args() : a_side_company(), b_side_company() {
  }

  virtual ~company_management_get_contract_args() noexcept;
  std::string a_side_company;
  std::string b_side_company;

  _company_management_get_contract_args__isset __isset;

  void __set_a_side_company(const std::string& val);

  void __set_b_side_company(const std::string& val);

  bool operator == (const company_management_get_contract_args & rhs) const
  {
    if (!(a_side_company == rhs.a_side_company))
      return false;
    if (!(b_side_company == rhs.b_side_company))
      return false;
    return true;
  }
  bool operator != (const company_management_get_contract_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_contract_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_contract_pargs {
 public:


  virtual ~company_management_get_contract_pargs() noexcept;
  const std::string* a_side_company;
  const std::string* b_side_company;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_contract_result__isset {
  _company_management_get_contract_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_contract_result__isset;

class company_management_get_contract_result {
 public:

  company_management_get_contract_result(const company_management_get_contract_result&);
  company_management_get_contract_result& operator=(const company_management_get_contract_result&);
  company_management_get_contract_result() {
  }

  virtual ~company_management_get_contract_result() noexcept;
  common_contract success;
  gen_exp e;

  _company_management_get_contract_result__isset __isset;

  void __set_success(const common_contract& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_contract_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_contract_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_contract_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_contract_presult__isset {
  _company_management_get_contract_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_contract_presult__isset;

class company_management_get_contract_presult {
 public:


  virtual ~company_management_get_contract_presult() noexcept;
  common_contract* success;
  gen_exp e;

  _company_management_get_contract_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_set_work_time_args__isset {
  _company_management_set_work_time_args__isset() : ssid(false), start_work_time(false), end_work_time(false) {}
  bool ssid :1;
  bool start_work_time :1;
  bool end_work_time :1;
} _company_management_set_work_time_args__isset;

class company_management_set_work_time_args {
 public:

  company_management_set_work_time_args(const company_management_set_work_time_args&);
  company_management_set_work_time_args& operator=(const company_management_set_work_time_args&);
  company_management_set_work_time_args() : ssid(), start_work_time(0), end_work_time(0) {
  }

  virtual ~company_management_set_work_time_args() noexcept;
  std::string ssid;
  int64_t start_work_time;
  int64_t end_work_time;

  _company_management_set_work_time_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_start_work_time(const int64_t val);

  void __set_end_work_time(const int64_t val);

  bool operator == (const company_management_set_work_time_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(start_work_time == rhs.start_work_time))
      return false;
    if (!(end_work_time == rhs.end_work_time))
      return false;
    return true;
  }
  bool operator != (const company_management_set_work_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_work_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_set_work_time_pargs {
 public:


  virtual ~company_management_set_work_time_pargs() noexcept;
  const std::string* ssid;
  const int64_t* start_work_time;
  const int64_t* end_work_time;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_work_time_result__isset {
  _company_management_set_work_time_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_work_time_result__isset;

class company_management_set_work_time_result {
 public:

  company_management_set_work_time_result(const company_management_set_work_time_result&);
  company_management_set_work_time_result& operator=(const company_management_set_work_time_result&);
  company_management_set_work_time_result() : success(0) {
  }

  virtual ~company_management_set_work_time_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_set_work_time_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_set_work_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_set_work_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_work_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_work_time_presult__isset {
  _company_management_set_work_time_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_work_time_presult__isset;

class company_management_set_work_time_presult {
 public:


  virtual ~company_management_set_work_time_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_set_work_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_work_time_args__isset {
  _company_management_get_work_time_args__isset() : company_name(false) {}
  bool company_name :1;
} _company_management_get_work_time_args__isset;

class company_management_get_work_time_args {
 public:

  company_management_get_work_time_args(const company_management_get_work_time_args&);
  company_management_get_work_time_args& operator=(const company_management_get_work_time_args&);
  company_management_get_work_time_args() : company_name() {
  }

  virtual ~company_management_get_work_time_args() noexcept;
  std::string company_name;

  _company_management_get_work_time_args__isset __isset;

  void __set_company_name(const std::string& val);

  bool operator == (const company_management_get_work_time_args & rhs) const
  {
    if (!(company_name == rhs.company_name))
      return false;
    return true;
  }
  bool operator != (const company_management_get_work_time_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_work_time_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_work_time_pargs {
 public:


  virtual ~company_management_get_work_time_pargs() noexcept;
  const std::string* company_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_work_time_result__isset {
  _company_management_get_work_time_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_work_time_result__isset;

class company_management_get_work_time_result {
 public:

  company_management_get_work_time_result(const company_management_get_work_time_result&);
  company_management_get_work_time_result& operator=(const company_management_get_work_time_result&);
  company_management_get_work_time_result() {
  }

  virtual ~company_management_get_work_time_result() noexcept;
  company_work_time success;
  gen_exp e;

  _company_management_get_work_time_result__isset __isset;

  void __set_success(const company_work_time& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_work_time_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_work_time_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_work_time_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_work_time_presult__isset {
  _company_management_get_work_time_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_work_time_presult__isset;

class company_management_get_work_time_presult {
 public:


  virtual ~company_management_get_work_time_presult() noexcept;
  company_work_time* success;
  gen_exp e;

  _company_management_get_work_time_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_company_position_config_args__isset {
  _company_management_get_company_position_config_args__isset() : company_name(false) {}
  bool company_name :1;
} _company_management_get_company_position_config_args__isset;

class company_management_get_company_position_config_args {
 public:

  company_management_get_company_position_config_args(const company_management_get_company_position_config_args&);
  company_management_get_company_position_config_args& operator=(const company_management_get_company_position_config_args&);
  company_management_get_company_position_config_args() : company_name() {
  }

  virtual ~company_management_get_company_position_config_args() noexcept;
  std::string company_name;

  _company_management_get_company_position_config_args__isset __isset;

  void __set_company_name(const std::string& val);

  bool operator == (const company_management_get_company_position_config_args & rhs) const
  {
    if (!(company_name == rhs.company_name))
      return false;
    return true;
  }
  bool operator != (const company_management_get_company_position_config_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_company_position_config_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_company_position_config_pargs {
 public:


  virtual ~company_management_get_company_position_config_pargs() noexcept;
  const std::string* company_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_company_position_config_result__isset {
  _company_management_get_company_position_config_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_company_position_config_result__isset;

class company_management_get_company_position_config_result {
 public:

  company_management_get_company_position_config_result(const company_management_get_company_position_config_result&);
  company_management_get_company_position_config_result& operator=(const company_management_get_company_position_config_result&);
  company_management_get_company_position_config_result() {
  }

  virtual ~company_management_get_company_position_config_result() noexcept;
  company_positon_lat_lag success;
  gen_exp e;

  _company_management_get_company_position_config_result__isset __isset;

  void __set_success(const company_positon_lat_lag& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_company_position_config_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_company_position_config_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_company_position_config_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_company_position_config_presult__isset {
  _company_management_get_company_position_config_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_company_position_config_presult__isset;

class company_management_get_company_position_config_presult {
 public:


  virtual ~company_management_get_company_position_config_presult() noexcept;
  company_positon_lat_lag* success;
  gen_exp e;

  _company_management_get_company_position_config_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_set_third_info_args__isset {
  _company_management_set_third_info_args__isset() : _info(false), ssid(false) {}
  bool _info :1;
  bool ssid :1;
} _company_management_set_third_info_args__isset;

class company_management_set_third_info_args {
 public:

  company_management_set_third_info_args(const company_management_set_third_info_args&);
  company_management_set_third_info_args& operator=(const company_management_set_third_info_args&);
  company_management_set_third_info_args() : ssid() {
  }

  virtual ~company_management_set_third_info_args() noexcept;
  third_dev_info _info;
  std::string ssid;

  _company_management_set_third_info_args__isset __isset;

  void __set__info(const third_dev_info& val);

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_set_third_info_args & rhs) const
  {
    if (!(_info == rhs._info))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_set_third_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_third_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_set_third_info_pargs {
 public:


  virtual ~company_management_set_third_info_pargs() noexcept;
  const third_dev_info* _info;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_third_info_result__isset {
  _company_management_set_third_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_third_info_result__isset;

class company_management_set_third_info_result {
 public:

  company_management_set_third_info_result(const company_management_set_third_info_result&);
  company_management_set_third_info_result& operator=(const company_management_set_third_info_result&);
  company_management_set_third_info_result() : success(0) {
  }

  virtual ~company_management_set_third_info_result() noexcept;
  bool success;
  gen_exp e;

  _company_management_set_third_info_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_set_third_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_set_third_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_set_third_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_set_third_info_presult__isset {
  _company_management_set_third_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_set_third_info_presult__isset;

class company_management_set_third_info_presult {
 public:


  virtual ~company_management_set_third_info_presult() noexcept;
  bool* success;
  gen_exp e;

  _company_management_set_third_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_third_info_args__isset {
  _company_management_get_third_info_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_third_info_args__isset;

class company_management_get_third_info_args {
 public:

  company_management_get_third_info_args(const company_management_get_third_info_args&);
  company_management_get_third_info_args& operator=(const company_management_get_third_info_args&);
  company_management_get_third_info_args() : ssid() {
  }

  virtual ~company_management_get_third_info_args() noexcept;
  std::string ssid;

  _company_management_get_third_info_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_third_info_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_third_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_third_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_third_info_pargs {
 public:


  virtual ~company_management_get_third_info_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_third_info_result__isset {
  _company_management_get_third_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_third_info_result__isset;

class company_management_get_third_info_result {
 public:

  company_management_get_third_info_result(const company_management_get_third_info_result&);
  company_management_get_third_info_result& operator=(const company_management_get_third_info_result&);
  company_management_get_third_info_result() {
  }

  virtual ~company_management_get_third_info_result() noexcept;
  third_dev_info success;
  gen_exp e;

  _company_management_get_third_info_result__isset __isset;

  void __set_success(const third_dev_info& val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_third_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_third_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_third_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_third_info_presult__isset {
  _company_management_get_third_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_third_info_presult__isset;

class company_management_get_third_info_presult {
 public:


  virtual ~company_management_get_third_info_presult() noexcept;
  third_dev_info* success;
  gen_exp e;

  _company_management_get_third_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _company_management_get_related_company_args__isset {
  _company_management_get_related_company_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_related_company_args__isset;

class company_management_get_related_company_args {
 public:

  company_management_get_related_company_args(const company_management_get_related_company_args&);
  company_management_get_related_company_args& operator=(const company_management_get_related_company_args&);
  company_management_get_related_company_args() : ssid() {
  }

  virtual ~company_management_get_related_company_args() noexcept;
  std::string ssid;

  _company_management_get_related_company_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_related_company_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_related_company_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_related_company_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_related_company_pargs {
 public:


  virtual ~company_management_get_related_company_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_related_company_result__isset {
  _company_management_get_related_company_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_related_company_result__isset;

class company_management_get_related_company_result {
 public:

  company_management_get_related_company_result(const company_management_get_related_company_result&);
  company_management_get_related_company_result& operator=(const company_management_get_related_company_result&);
  company_management_get_related_company_result() {
  }

  virtual ~company_management_get_related_company_result() noexcept;
  std::vector<std::string>  success;
  gen_exp e;

  _company_management_get_related_company_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const company_management_get_related_company_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const company_management_get_related_company_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_related_company_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_related_company_presult__isset {
  _company_management_get_related_company_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _company_management_get_related_company_presult__isset;

class company_management_get_related_company_presult {
 public:


  virtual ~company_management_get_related_company_presult() noexcept;
  std::vector<std::string> * success;
  gen_exp e;

  _company_management_get_related_company_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class company_managementClient : virtual public company_managementIf {
 public:
  company_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  company_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_all_type(std::vector<int64_t> & _return, const std::string& ssid);
  void send_get_all_type(const std::string& ssid);
  void recv_get_all_type(std::vector<int64_t> & _return);
  int64_t add_type(const std::string& name, const int64_t price, const std::string& last, const std::string& ssid);
  void send_add_type(const std::string& name, const int64_t price, const std::string& last, const std::string& ssid);
  int64_t recv_add_type();
  bool edit_type(const stuff_detail& stuff, const std::string& ssid);
  void send_edit_type(const stuff_detail& stuff, const std::string& ssid);
  bool recv_edit_type();
  void remove_type(const stuff_detail& stuff, const std::string& ssid);
  void send_remove_type(const stuff_detail& stuff, const std::string& ssid);
  void recv_remove_type();
  bool readd_type(const stuff_detail& stuff, const std::string& ssid);
  void send_readd_type(const stuff_detail& stuff, const std::string& ssid);
  bool recv_readd_type();
  void get_all_apply(std::vector<user_apply> & _return, const std::string& ssid);
  void send_get_all_apply(const std::string& ssid);
  void recv_get_all_apply(std::vector<user_apply> & _return);
  bool approve_apply(const int64_t apply_id, const std::string& ssid, const bool approve);
  void send_approve_apply(const int64_t apply_id, const std::string& ssid, const bool approve);
  bool recv_approve_apply();
  void generate_statistics(std::string& _return, const std::string& ssid, const int64_t begin_date, const int64_t end_date);
  void send_generate_statistics(const std::string& ssid, const int64_t begin_date, const int64_t end_date);
  void recv_generate_statistics(std::string& _return);
  bool set_notice(const std::string& ssid, const std::string& notice);
  void send_set_notice(const std::string& ssid, const std::string& notice);
  bool recv_set_notice();
  void get_notice(std::string& _return, const std::string& company_name);
  void send_get_notice(const std::string& company_name);
  void recv_get_notice(std::string& _return);
  void clear_notice(const std::string& ssid);
  void send_clear_notice(const std::string& ssid);
  void recv_clear_notice();
  void get_all_compay_user(std::vector<user_info> & _return, const std::string& ssid);
  void send_get_all_compay_user(const std::string& ssid);
  void recv_get_all_compay_user(std::vector<user_info> & _return);
  bool remove_user_from_company(const std::string& ssid, const int64_t user_id);
  void send_remove_user_from_company(const std::string& ssid, const int64_t user_id);
  bool recv_remove_user_from_company();
  void get_company_logo(std::string& _return, const std::string& ssid);
  void send_get_company_logo(const std::string& ssid);
  void recv_get_company_logo(std::string& _return);
  bool set_address(const std::string& ssid, const std::string& address);
  void send_set_address(const std::string& ssid, const std::string& address);
  bool recv_set_address();
  void get_address(std::string& _return, const std::string& ssid);
  void send_get_address(const std::string& ssid);
  void recv_get_address(std::string& _return);
  bool set_contact(const std::string& ssid, const std::string& contact);
  void send_set_contact(const std::string& ssid, const std::string& contact);
  bool recv_set_contact();
  void get_contact(std::string& _return, const std::string& ssid);
  void send_get_contact(const std::string& ssid);
  void recv_get_contact(std::string& _return);
  void get_address_contact(company_address_contact_info& _return, const std::string& company_name);
  void send_get_address_contact(const std::string& company_name);
  void recv_get_address_contact(company_address_contact_info& _return);
  bool add_attachment(const std::string& ssid, const std::string& base64content, const bool is_pdf);
  void send_add_attachment(const std::string& ssid, const std::string& base64content, const bool is_pdf);
  bool recv_add_attachment();
  void del_attachment(const std::string& ssid, const int64_t id);
  void send_del_attachment(const std::string& ssid, const int64_t id);
  void recv_del_attachment();
  void get_all_attachment(std::vector<company_attachment> & _return, const std::string& ssid);
  void send_get_all_attachment(const std::string& ssid);
  void recv_get_all_attachment(std::vector<company_attachment> & _return);
  void get_attachment(std::string& _return, const std::string& company_name);
  void send_get_attachment(const std::string& company_name);
  void recv_get_attachment(std::string& _return);
  void get_real_access(std::vector<real_access_record> & _return, const std::string& ssid);
  void send_get_real_access(const std::string& ssid);
  void recv_get_real_access(std::vector<real_access_record> & _return);
  void get_all_access(std::vector<real_access_record> & _return, const std::string& ssid);
  void send_get_all_access(const std::string& ssid);
  void recv_get_all_access(std::vector<real_access_record> & _return);
  bool add_contract(const std::string& ssid, const common_contract& contract);
  void send_add_contract(const std::string& ssid, const common_contract& contract);
  bool recv_add_contract();
  bool update_contract(const std::string& ssid, const common_contract& contract);
  void send_update_contract(const std::string& ssid, const common_contract& contract);
  bool recv_update_contract();
  void del_contract(const std::string& ssid, const int64_t id);
  void send_del_contract(const std::string& ssid, const int64_t id);
  void recv_del_contract();
  void get_all_contract(std::vector<common_contract> & _return, const std::string& ssid);
  void send_get_all_contract(const std::string& ssid);
  void recv_get_all_contract(std::vector<common_contract> & _return);
  void get_contract(common_contract& _return, const std::string& a_side_company, const std::string& b_side_company);
  void send_get_contract(const std::string& a_side_company, const std::string& b_side_company);
  void recv_get_contract(common_contract& _return);
  bool set_work_time(const std::string& ssid, const int64_t start_work_time, const int64_t end_work_time);
  void send_set_work_time(const std::string& ssid, const int64_t start_work_time, const int64_t end_work_time);
  bool recv_set_work_time();
  void get_work_time(company_work_time& _return, const std::string& company_name);
  void send_get_work_time(const std::string& company_name);
  void recv_get_work_time(company_work_time& _return);
  void get_company_position_config(company_positon_lat_lag& _return, const std::string& company_name);
  void send_get_company_position_config(const std::string& company_name);
  void recv_get_company_position_config(company_positon_lat_lag& _return);
  bool set_third_info(const third_dev_info& _info, const std::string& ssid);
  void send_set_third_info(const third_dev_info& _info, const std::string& ssid);
  bool recv_set_third_info();
  void get_third_info(third_dev_info& _return, const std::string& ssid);
  void send_get_third_info(const std::string& ssid);
  void recv_get_third_info(third_dev_info& _return);
  void get_related_company(std::vector<std::string> & _return, const std::string& ssid);
  void send_get_related_company(const std::string& ssid);
  void recv_get_related_company(std::vector<std::string> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class company_managementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<company_managementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (company_managementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_all_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_edit_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_readd_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_apply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_approve_apply(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_generate_statistics(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_notice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_notice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clear_notice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_compay_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_user_from_company(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_company_logo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_address(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_address(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_contact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_contact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_address_contact(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_attachment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_attachment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_attachment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_attachment(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_real_access(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_access(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_contract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_contract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_contract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_contract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_contract(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_work_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_work_time(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_company_position_config(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_third_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_third_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_related_company(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  company_managementProcessor(::std::shared_ptr<company_managementIf> iface) :
    iface_(iface) {
    processMap_["get_all_type"] = &company_managementProcessor::process_get_all_type;
    processMap_["add_type"] = &company_managementProcessor::process_add_type;
    processMap_["edit_type"] = &company_managementProcessor::process_edit_type;
    processMap_["remove_type"] = &company_managementProcessor::process_remove_type;
    processMap_["readd_type"] = &company_managementProcessor::process_readd_type;
    processMap_["get_all_apply"] = &company_managementProcessor::process_get_all_apply;
    processMap_["approve_apply"] = &company_managementProcessor::process_approve_apply;
    processMap_["generate_statistics"] = &company_managementProcessor::process_generate_statistics;
    processMap_["set_notice"] = &company_managementProcessor::process_set_notice;
    processMap_["get_notice"] = &company_managementProcessor::process_get_notice;
    processMap_["clear_notice"] = &company_managementProcessor::process_clear_notice;
    processMap_["get_all_compay_user"] = &company_managementProcessor::process_get_all_compay_user;
    processMap_["remove_user_from_company"] = &company_managementProcessor::process_remove_user_from_company;
    processMap_["get_company_logo"] = &company_managementProcessor::process_get_company_logo;
    processMap_["set_address"] = &company_managementProcessor::process_set_address;
    processMap_["get_address"] = &company_managementProcessor::process_get_address;
    processMap_["set_contact"] = &company_managementProcessor::process_set_contact;
    processMap_["get_contact"] = &company_managementProcessor::process_get_contact;
    processMap_["get_address_contact"] = &company_managementProcessor::process_get_address_contact;
    processMap_["add_attachment"] = &company_managementProcessor::process_add_attachment;
    processMap_["del_attachment"] = &company_managementProcessor::process_del_attachment;
    processMap_["get_all_attachment"] = &company_managementProcessor::process_get_all_attachment;
    processMap_["get_attachment"] = &company_managementProcessor::process_get_attachment;
    processMap_["get_real_access"] = &company_managementProcessor::process_get_real_access;
    processMap_["get_all_access"] = &company_managementProcessor::process_get_all_access;
    processMap_["add_contract"] = &company_managementProcessor::process_add_contract;
    processMap_["update_contract"] = &company_managementProcessor::process_update_contract;
    processMap_["del_contract"] = &company_managementProcessor::process_del_contract;
    processMap_["get_all_contract"] = &company_managementProcessor::process_get_all_contract;
    processMap_["get_contract"] = &company_managementProcessor::process_get_contract;
    processMap_["set_work_time"] = &company_managementProcessor::process_set_work_time;
    processMap_["get_work_time"] = &company_managementProcessor::process_get_work_time;
    processMap_["get_company_position_config"] = &company_managementProcessor::process_get_company_position_config;
    processMap_["set_third_info"] = &company_managementProcessor::process_set_third_info;
    processMap_["get_third_info"] = &company_managementProcessor::process_get_third_info;
    processMap_["get_related_company"] = &company_managementProcessor::process_get_related_company;
  }

  virtual ~company_managementProcessor() {}
};

class company_managementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  company_managementProcessorFactory(const ::std::shared_ptr< company_managementIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< company_managementIfFactory > handlerFactory_;
};

class company_managementMultiface : virtual public company_managementIf {
 public:
  company_managementMultiface(std::vector<std::shared_ptr<company_managementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~company_managementMultiface() {}
 protected:
  std::vector<std::shared_ptr<company_managementIf> > ifaces_;
  company_managementMultiface() {}
  void add(::std::shared_ptr<company_managementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_all_type(std::vector<int64_t> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_type(_return, ssid);
    }
    ifaces_[i]->get_all_type(_return, ssid);
    return;
  }

  int64_t add_type(const std::string& name, const int64_t price, const std::string& last, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_type(name, price, last, ssid);
    }
    return ifaces_[i]->add_type(name, price, last, ssid);
  }

  bool edit_type(const stuff_detail& stuff, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->edit_type(stuff, ssid);
    }
    return ifaces_[i]->edit_type(stuff, ssid);
  }

  void remove_type(const stuff_detail& stuff, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_type(stuff, ssid);
    }
    ifaces_[i]->remove_type(stuff, ssid);
  }

  bool readd_type(const stuff_detail& stuff, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->readd_type(stuff, ssid);
    }
    return ifaces_[i]->readd_type(stuff, ssid);
  }

  void get_all_apply(std::vector<user_apply> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_apply(_return, ssid);
    }
    ifaces_[i]->get_all_apply(_return, ssid);
    return;
  }

  bool approve_apply(const int64_t apply_id, const std::string& ssid, const bool approve) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->approve_apply(apply_id, ssid, approve);
    }
    return ifaces_[i]->approve_apply(apply_id, ssid, approve);
  }

  void generate_statistics(std::string& _return, const std::string& ssid, const int64_t begin_date, const int64_t end_date) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->generate_statistics(_return, ssid, begin_date, end_date);
    }
    ifaces_[i]->generate_statistics(_return, ssid, begin_date, end_date);
    return;
  }

  bool set_notice(const std::string& ssid, const std::string& notice) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_notice(ssid, notice);
    }
    return ifaces_[i]->set_notice(ssid, notice);
  }

  void get_notice(std::string& _return, const std::string& company_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_notice(_return, company_name);
    }
    ifaces_[i]->get_notice(_return, company_name);
    return;
  }

  void clear_notice(const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clear_notice(ssid);
    }
    ifaces_[i]->clear_notice(ssid);
  }

  void get_all_compay_user(std::vector<user_info> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_compay_user(_return, ssid);
    }
    ifaces_[i]->get_all_compay_user(_return, ssid);
    return;
  }

  bool remove_user_from_company(const std::string& ssid, const int64_t user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_user_from_company(ssid, user_id);
    }
    return ifaces_[i]->remove_user_from_company(ssid, user_id);
  }

  void get_company_logo(std::string& _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_company_logo(_return, ssid);
    }
    ifaces_[i]->get_company_logo(_return, ssid);
    return;
  }

  bool set_address(const std::string& ssid, const std::string& address) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_address(ssid, address);
    }
    return ifaces_[i]->set_address(ssid, address);
  }

  void get_address(std::string& _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_address(_return, ssid);
    }
    ifaces_[i]->get_address(_return, ssid);
    return;
  }

  bool set_contact(const std::string& ssid, const std::string& contact) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_contact(ssid, contact);
    }
    return ifaces_[i]->set_contact(ssid, contact);
  }

  void get_contact(std::string& _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_contact(_return, ssid);
    }
    ifaces_[i]->get_contact(_return, ssid);
    return;
  }

  void get_address_contact(company_address_contact_info& _return, const std::string& company_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_address_contact(_return, company_name);
    }
    ifaces_[i]->get_address_contact(_return, company_name);
    return;
  }

  bool add_attachment(const std::string& ssid, const std::string& base64content, const bool is_pdf) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_attachment(ssid, base64content, is_pdf);
    }
    return ifaces_[i]->add_attachment(ssid, base64content, is_pdf);
  }

  void del_attachment(const std::string& ssid, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_attachment(ssid, id);
    }
    ifaces_[i]->del_attachment(ssid, id);
  }

  void get_all_attachment(std::vector<company_attachment> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_attachment(_return, ssid);
    }
    ifaces_[i]->get_all_attachment(_return, ssid);
    return;
  }

  void get_attachment(std::string& _return, const std::string& company_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_attachment(_return, company_name);
    }
    ifaces_[i]->get_attachment(_return, company_name);
    return;
  }

  void get_real_access(std::vector<real_access_record> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_real_access(_return, ssid);
    }
    ifaces_[i]->get_real_access(_return, ssid);
    return;
  }

  void get_all_access(std::vector<real_access_record> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_access(_return, ssid);
    }
    ifaces_[i]->get_all_access(_return, ssid);
    return;
  }

  bool add_contract(const std::string& ssid, const common_contract& contract) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_contract(ssid, contract);
    }
    return ifaces_[i]->add_contract(ssid, contract);
  }

  bool update_contract(const std::string& ssid, const common_contract& contract) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_contract(ssid, contract);
    }
    return ifaces_[i]->update_contract(ssid, contract);
  }

  void del_contract(const std::string& ssid, const int64_t id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_contract(ssid, id);
    }
    ifaces_[i]->del_contract(ssid, id);
  }

  void get_all_contract(std::vector<common_contract> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_contract(_return, ssid);
    }
    ifaces_[i]->get_all_contract(_return, ssid);
    return;
  }

  void get_contract(common_contract& _return, const std::string& a_side_company, const std::string& b_side_company) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_contract(_return, a_side_company, b_side_company);
    }
    ifaces_[i]->get_contract(_return, a_side_company, b_side_company);
    return;
  }

  bool set_work_time(const std::string& ssid, const int64_t start_work_time, const int64_t end_work_time) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_work_time(ssid, start_work_time, end_work_time);
    }
    return ifaces_[i]->set_work_time(ssid, start_work_time, end_work_time);
  }

  void get_work_time(company_work_time& _return, const std::string& company_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_work_time(_return, company_name);
    }
    ifaces_[i]->get_work_time(_return, company_name);
    return;
  }

  void get_company_position_config(company_positon_lat_lag& _return, const std::string& company_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_company_position_config(_return, company_name);
    }
    ifaces_[i]->get_company_position_config(_return, company_name);
    return;
  }

  bool set_third_info(const third_dev_info& _info, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_third_info(_info, ssid);
    }
    return ifaces_[i]->set_third_info(_info, ssid);
  }

  void get_third_info(third_dev_info& _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_third_info(_return, ssid);
    }
    ifaces_[i]->get_third_info(_return, ssid);
    return;
  }

  void get_related_company(std::vector<std::string> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_related_company(_return, ssid);
    }
    ifaces_[i]->get_related_company(_return, ssid);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class company_managementConcurrentClient : virtual public company_managementIf {
 public:
  company_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  company_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_all_type(std::vector<int64_t> & _return, const std::string& ssid);
  int32_t send_get_all_type(const std::string& ssid);
  void recv_get_all_type(std::vector<int64_t> & _return, const int32_t seqid);
  int64_t add_type(const std::string& name, const int64_t price, const std::string& last, const std::string& ssid);
  int32_t send_add_type(const std::string& name, const int64_t price, const std::string& last, const std::string& ssid);
  int64_t recv_add_type(const int32_t seqid);
  bool edit_type(const stuff_detail& stuff, const std::string& ssid);
  int32_t send_edit_type(const stuff_detail& stuff, const std::string& ssid);
  bool recv_edit_type(const int32_t seqid);
  void remove_type(const stuff_detail& stuff, const std::string& ssid);
  int32_t send_remove_type(const stuff_detail& stuff, const std::string& ssid);
  void recv_remove_type(const int32_t seqid);
  bool readd_type(const stuff_detail& stuff, const std::string& ssid);
  int32_t send_readd_type(const stuff_detail& stuff, const std::string& ssid);
  bool recv_readd_type(const int32_t seqid);
  void get_all_apply(std::vector<user_apply> & _return, const std::string& ssid);
  int32_t send_get_all_apply(const std::string& ssid);
  void recv_get_all_apply(std::vector<user_apply> & _return, const int32_t seqid);
  bool approve_apply(const int64_t apply_id, const std::string& ssid, const bool approve);
  int32_t send_approve_apply(const int64_t apply_id, const std::string& ssid, const bool approve);
  bool recv_approve_apply(const int32_t seqid);
  void generate_statistics(std::string& _return, const std::string& ssid, const int64_t begin_date, const int64_t end_date);
  int32_t send_generate_statistics(const std::string& ssid, const int64_t begin_date, const int64_t end_date);
  void recv_generate_statistics(std::string& _return, const int32_t seqid);
  bool set_notice(const std::string& ssid, const std::string& notice);
  int32_t send_set_notice(const std::string& ssid, const std::string& notice);
  bool recv_set_notice(const int32_t seqid);
  void get_notice(std::string& _return, const std::string& company_name);
  int32_t send_get_notice(const std::string& company_name);
  void recv_get_notice(std::string& _return, const int32_t seqid);
  void clear_notice(const std::string& ssid);
  int32_t send_clear_notice(const std::string& ssid);
  void recv_clear_notice(const int32_t seqid);
  void get_all_compay_user(std::vector<user_info> & _return, const std::string& ssid);
  int32_t send_get_all_compay_user(const std::string& ssid);
  void recv_get_all_compay_user(std::vector<user_info> & _return, const int32_t seqid);
  bool remove_user_from_company(const std::string& ssid, const int64_t user_id);
  int32_t send_remove_user_from_company(const std::string& ssid, const int64_t user_id);
  bool recv_remove_user_from_company(const int32_t seqid);
  void get_company_logo(std::string& _return, const std::string& ssid);
  int32_t send_get_company_logo(const std::string& ssid);
  void recv_get_company_logo(std::string& _return, const int32_t seqid);
  bool set_address(const std::string& ssid, const std::string& address);
  int32_t send_set_address(const std::string& ssid, const std::string& address);
  bool recv_set_address(const int32_t seqid);
  void get_address(std::string& _return, const std::string& ssid);
  int32_t send_get_address(const std::string& ssid);
  void recv_get_address(std::string& _return, const int32_t seqid);
  bool set_contact(const std::string& ssid, const std::string& contact);
  int32_t send_set_contact(const std::string& ssid, const std::string& contact);
  bool recv_set_contact(const int32_t seqid);
  void get_contact(std::string& _return, const std::string& ssid);
  int32_t send_get_contact(const std::string& ssid);
  void recv_get_contact(std::string& _return, const int32_t seqid);
  void get_address_contact(company_address_contact_info& _return, const std::string& company_name);
  int32_t send_get_address_contact(const std::string& company_name);
  void recv_get_address_contact(company_address_contact_info& _return, const int32_t seqid);
  bool add_attachment(const std::string& ssid, const std::string& base64content, const bool is_pdf);
  int32_t send_add_attachment(const std::string& ssid, const std::string& base64content, const bool is_pdf);
  bool recv_add_attachment(const int32_t seqid);
  void del_attachment(const std::string& ssid, const int64_t id);
  int32_t send_del_attachment(const std::string& ssid, const int64_t id);
  void recv_del_attachment(const int32_t seqid);
  void get_all_attachment(std::vector<company_attachment> & _return, const std::string& ssid);
  int32_t send_get_all_attachment(const std::string& ssid);
  void recv_get_all_attachment(std::vector<company_attachment> & _return, const int32_t seqid);
  void get_attachment(std::string& _return, const std::string& company_name);
  int32_t send_get_attachment(const std::string& company_name);
  void recv_get_attachment(std::string& _return, const int32_t seqid);
  void get_real_access(std::vector<real_access_record> & _return, const std::string& ssid);
  int32_t send_get_real_access(const std::string& ssid);
  void recv_get_real_access(std::vector<real_access_record> & _return, const int32_t seqid);
  void get_all_access(std::vector<real_access_record> & _return, const std::string& ssid);
  int32_t send_get_all_access(const std::string& ssid);
  void recv_get_all_access(std::vector<real_access_record> & _return, const int32_t seqid);
  bool add_contract(const std::string& ssid, const common_contract& contract);
  int32_t send_add_contract(const std::string& ssid, const common_contract& contract);
  bool recv_add_contract(const int32_t seqid);
  bool update_contract(const std::string& ssid, const common_contract& contract);
  int32_t send_update_contract(const std::string& ssid, const common_contract& contract);
  bool recv_update_contract(const int32_t seqid);
  void del_contract(const std::string& ssid, const int64_t id);
  int32_t send_del_contract(const std::string& ssid, const int64_t id);
  void recv_del_contract(const int32_t seqid);
  void get_all_contract(std::vector<common_contract> & _return, const std::string& ssid);
  int32_t send_get_all_contract(const std::string& ssid);
  void recv_get_all_contract(std::vector<common_contract> & _return, const int32_t seqid);
  void get_contract(common_contract& _return, const std::string& a_side_company, const std::string& b_side_company);
  int32_t send_get_contract(const std::string& a_side_company, const std::string& b_side_company);
  void recv_get_contract(common_contract& _return, const int32_t seqid);
  bool set_work_time(const std::string& ssid, const int64_t start_work_time, const int64_t end_work_time);
  int32_t send_set_work_time(const std::string& ssid, const int64_t start_work_time, const int64_t end_work_time);
  bool recv_set_work_time(const int32_t seqid);
  void get_work_time(company_work_time& _return, const std::string& company_name);
  int32_t send_get_work_time(const std::string& company_name);
  void recv_get_work_time(company_work_time& _return, const int32_t seqid);
  void get_company_position_config(company_positon_lat_lag& _return, const std::string& company_name);
  int32_t send_get_company_position_config(const std::string& company_name);
  void recv_get_company_position_config(company_positon_lat_lag& _return, const int32_t seqid);
  bool set_third_info(const third_dev_info& _info, const std::string& ssid);
  int32_t send_set_third_info(const third_dev_info& _info, const std::string& ssid);
  bool recv_set_third_info(const int32_t seqid);
  void get_third_info(third_dev_info& _return, const std::string& ssid);
  int32_t send_get_third_info(const std::string& ssid);
  void recv_get_third_info(third_dev_info& _return, const int32_t seqid);
  void get_related_company(std::vector<std::string> & _return, const std::string& ssid);
  int32_t send_get_related_company(const std::string& ssid);
  void recv_get_related_company(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
