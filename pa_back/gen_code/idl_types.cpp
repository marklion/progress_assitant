/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "idl_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




gen_exp::~gen_exp() noexcept {
}


void gen_exp::__set_msg(const std::string& val) {
  this->msg = val;
}
std::ostream& operator<<(std::ostream& out, const gen_exp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t gen_exp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t gen_exp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("gen_exp");

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(gen_exp &a, gen_exp &b) {
  using ::std::swap;
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

gen_exp::gen_exp(const gen_exp& other0) : TException() {
  msg = other0.msg;
  __isset = other0.__isset;
}
gen_exp& gen_exp::operator=(const gen_exp& other1) {
  msg = other1.msg;
  __isset = other1.__isset;
  return *this;
}
void gen_exp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "gen_exp(";
  out << "msg=" << to_string(msg);
  out << ")";
}

const char* gen_exp::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: gen_exp";
  }
}


user_info::~user_info() noexcept {
}


void user_info::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void user_info::__set_name(const std::string& val) {
  this->name = val;
}

void user_info::__set_logo(const std::string& val) {
  this->logo = val;
}

void user_info::__set_company(const std::string& val) {
  this->company = val;
}

void user_info::__set_buyer(const bool val) {
  this->buyer = val;
}

void user_info::__set_phone(const std::string& val) {
  this->phone = val;
}
std::ostream& operator<<(std::ostream& out, const user_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t user_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logo);
          this->__isset.logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->buyer);
          this->__isset.buyer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t user_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("user_info");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->logo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyer", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->buyer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(user_info &a, user_info &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.name, b.name);
  swap(a.logo, b.logo);
  swap(a.company, b.company);
  swap(a.buyer, b.buyer);
  swap(a.phone, b.phone);
  swap(a.__isset, b.__isset);
}

user_info::user_info(const user_info& other2) {
  user_id = other2.user_id;
  name = other2.name;
  logo = other2.logo;
  company = other2.company;
  buyer = other2.buyer;
  phone = other2.phone;
  __isset = other2.__isset;
}
user_info& user_info::operator=(const user_info& other3) {
  user_id = other3.user_id;
  name = other3.name;
  logo = other3.logo;
  company = other3.company;
  buyer = other3.buyer;
  phone = other3.phone;
  __isset = other3.__isset;
  return *this;
}
void user_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "user_info(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "logo=" << to_string(logo);
  out << ", " << "company=" << to_string(company);
  out << ", " << "buyer=" << to_string(buyer);
  out << ", " << "phone=" << to_string(phone);
  out << ")";
}


driver_info::~driver_info() noexcept {
}


void driver_info::__set_name(const std::string& val) {
  this->name = val;
}

void driver_info::__set_phone(const std::string& val) {
  this->phone = val;
}

void driver_info::__set_id(const int64_t val) {
  this->id = val;
}
std::ostream& operator<<(std::ostream& out, const driver_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t driver_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t driver_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("driver_info");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(driver_info &a, driver_info &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.phone, b.phone);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

driver_info::driver_info(const driver_info& other4) {
  name = other4.name;
  phone = other4.phone;
  id = other4.id;
  __isset = other4.__isset;
}
driver_info& driver_info::operator=(const driver_info& other5) {
  name = other5.name;
  phone = other5.phone;
  id = other5.id;
  __isset = other5.__isset;
  return *this;
}
void driver_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "driver_info(";
  out << "name=" << to_string(name);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


vichele_info_t::~vichele_info_t() noexcept {
}


void vichele_info_t::__set_number(const std::string& val) {
  this->number = val;
}

void vichele_info_t::__set_id(const int64_t val) {
  this->id = val;
}
std::ostream& operator<<(std::ostream& out, const vichele_info_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vichele_info_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->number);
          this->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t vichele_info_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vichele_info_t");

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vichele_info_t &a, vichele_info_t &b) {
  using ::std::swap;
  swap(a.number, b.number);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

vichele_info_t::vichele_info_t(const vichele_info_t& other6) {
  number = other6.number;
  id = other6.id;
  __isset = other6.__isset;
}
vichele_info_t& vichele_info_t::operator=(const vichele_info_t& other7) {
  number = other7.number;
  id = other7.id;
  __isset = other7.__isset;
  return *this;
}
void vichele_info_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vichele_info_t(";
  out << "number=" << to_string(number);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


stuff_detail::~stuff_detail() noexcept {
}


void stuff_detail::__set_name(const std::string& val) {
  this->name = val;
}

void stuff_detail::__set_last(const std::string& val) {
  this->last = val;
}

void stuff_detail::__set_price(const int64_t val) {
  this->price = val;
}

void stuff_detail::__set_company(const std::string& val) {
  this->company = val;
}

void stuff_detail::__set_type_id(const int64_t val) {
  this->type_id = val;
}

void stuff_detail::__set_saling(const bool val) {
  this->saling = val;
}

void stuff_detail::__set_company_address(const std::string& val) {
  this->company_address = val;
}

void stuff_detail::__set_company_contact(const std::string& val) {
  this->company_contact = val;
}
std::ostream& operator<<(std::ostream& out, const stuff_detail& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t stuff_detail::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last);
          this->__isset.last = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->saling);
          this->__isset.saling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company_address);
          this->__isset.company_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company_contact);
          this->__isset.company_contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stuff_detail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("stuff_detail");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->last);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saling", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->saling);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company_address", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->company_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company_contact", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->company_contact);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stuff_detail &a, stuff_detail &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.last, b.last);
  swap(a.price, b.price);
  swap(a.company, b.company);
  swap(a.type_id, b.type_id);
  swap(a.saling, b.saling);
  swap(a.company_address, b.company_address);
  swap(a.company_contact, b.company_contact);
  swap(a.__isset, b.__isset);
}

stuff_detail::stuff_detail(const stuff_detail& other8) {
  name = other8.name;
  last = other8.last;
  price = other8.price;
  company = other8.company;
  type_id = other8.type_id;
  saling = other8.saling;
  company_address = other8.company_address;
  company_contact = other8.company_contact;
  __isset = other8.__isset;
}
stuff_detail& stuff_detail::operator=(const stuff_detail& other9) {
  name = other9.name;
  last = other9.last;
  price = other9.price;
  company = other9.company;
  type_id = other9.type_id;
  saling = other9.saling;
  company_address = other9.company_address;
  company_contact = other9.company_contact;
  __isset = other9.__isset;
  return *this;
}
void stuff_detail::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "stuff_detail(";
  out << "name=" << to_string(name);
  out << ", " << "last=" << to_string(last);
  out << ", " << "price=" << to_string(price);
  out << ", " << "company=" << to_string(company);
  out << ", " << "type_id=" << to_string(type_id);
  out << ", " << "saling=" << to_string(saling);
  out << ", " << "company_address=" << to_string(company_address);
  out << ", " << "company_contact=" << to_string(company_contact);
  out << ")";
}


user_apply::~user_apply() noexcept {
}


void user_apply::__set_name(const std::string& val) {
  this->name = val;
}

void user_apply::__set_phone(const std::string& val) {
  this->phone = val;
}

void user_apply::__set_logo(const std::string& val) {
  this->logo = val;
}

void user_apply::__set_apply_id(const int64_t val) {
  this->apply_id = val;
}

void user_apply::__set_status(const int64_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const user_apply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t user_apply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logo);
          this->__isset.logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->apply_id);
          this->__isset.apply_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t user_apply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("user_apply");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->logo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("apply_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->apply_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(user_apply &a, user_apply &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.phone, b.phone);
  swap(a.logo, b.logo);
  swap(a.apply_id, b.apply_id);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

user_apply::user_apply(const user_apply& other10) {
  name = other10.name;
  phone = other10.phone;
  logo = other10.logo;
  apply_id = other10.apply_id;
  status = other10.status;
  __isset = other10.__isset;
}
user_apply& user_apply::operator=(const user_apply& other11) {
  name = other11.name;
  phone = other11.phone;
  logo = other11.logo;
  apply_id = other11.apply_id;
  status = other11.status;
  __isset = other11.__isset;
  return *this;
}
void user_apply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "user_apply(";
  out << "name=" << to_string(name);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "logo=" << to_string(logo);
  out << ", " << "apply_id=" << to_string(apply_id);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


company_address_contact_info::~company_address_contact_info() noexcept {
}


void company_address_contact_info::__set_address(const std::string& val) {
  this->address = val;
}

void company_address_contact_info::__set_contact(const std::string& val) {
  this->contact = val;
}
std::ostream& operator<<(std::ostream& out, const company_address_contact_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t company_address_contact_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->address);
          this->__isset.address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->contact);
          this->__isset.contact = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t company_address_contact_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("company_address_contact_info");

  xfer += oprot->writeFieldBegin("address", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("contact", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->contact);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(company_address_contact_info &a, company_address_contact_info &b) {
  using ::std::swap;
  swap(a.address, b.address);
  swap(a.contact, b.contact);
  swap(a.__isset, b.__isset);
}

company_address_contact_info::company_address_contact_info(const company_address_contact_info& other12) {
  address = other12.address;
  contact = other12.contact;
  __isset = other12.__isset;
}
company_address_contact_info& company_address_contact_info::operator=(const company_address_contact_info& other13) {
  address = other13.address;
  contact = other13.contact;
  __isset = other13.__isset;
  return *this;
}
void company_address_contact_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "company_address_contact_info(";
  out << "address=" << to_string(address);
  out << ", " << "contact=" << to_string(contact);
  out << ")";
}


company_attachment::~company_attachment() noexcept {
}


void company_attachment::__set_id(const int64_t val) {
  this->id = val;
}

void company_attachment::__set_path(const std::string& val) {
  this->path = val;
}

void company_attachment::__set_pic_path(const std::string& val) {
  this->pic_path = val;
}
std::ostream& operator<<(std::ostream& out, const company_attachment& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t company_attachment::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pic_path);
          this->__isset.pic_path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t company_attachment::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("company_attachment");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("path", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pic_path", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pic_path);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(company_attachment &a, company_attachment &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.path, b.path);
  swap(a.pic_path, b.pic_path);
  swap(a.__isset, b.__isset);
}

company_attachment::company_attachment(const company_attachment& other14) {
  id = other14.id;
  path = other14.path;
  pic_path = other14.pic_path;
  __isset = other14.__isset;
}
company_attachment& company_attachment::operator=(const company_attachment& other15) {
  id = other15.id;
  path = other15.path;
  pic_path = other15.pic_path;
  __isset = other15.__isset;
  return *this;
}
void company_attachment::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "company_attachment(";
  out << "id=" << to_string(id);
  out << ", " << "path=" << to_string(path);
  out << ", " << "pic_path=" << to_string(pic_path);
  out << ")";
}


plan_status_rule::~plan_status_rule() noexcept {
}


void plan_status_rule::__set_name(const std::string& val) {
  this->name = val;
}

void plan_status_rule::__set_author(const std::string& val) {
  this->author = val;
}

void plan_status_rule::__set_timestamp(const std::string& val) {
  this->timestamp = val;
}

void plan_status_rule::__set_comment(const std::string& val) {
  this->comment = val;
}

void plan_status_rule::__set_index(const int64_t val) {
  this->index = val;
}

void plan_status_rule::__set_prompt(const std::string& val) {
  this->prompt = val;
}
std::ostream& operator<<(std::ostream& out, const plan_status_rule& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t plan_status_rule::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->author);
          this->__isset.author = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->prompt);
          this->__isset.prompt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t plan_status_rule::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("plan_status_rule");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("author", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->author);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("prompt", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->prompt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(plan_status_rule &a, plan_status_rule &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.author, b.author);
  swap(a.timestamp, b.timestamp);
  swap(a.comment, b.comment);
  swap(a.index, b.index);
  swap(a.prompt, b.prompt);
  swap(a.__isset, b.__isset);
}

plan_status_rule::plan_status_rule(const plan_status_rule& other16) {
  name = other16.name;
  author = other16.author;
  timestamp = other16.timestamp;
  comment = other16.comment;
  index = other16.index;
  prompt = other16.prompt;
  __isset = other16.__isset;
}
plan_status_rule& plan_status_rule::operator=(const plan_status_rule& other17) {
  name = other17.name;
  author = other17.author;
  timestamp = other17.timestamp;
  comment = other17.comment;
  index = other17.index;
  prompt = other17.prompt;
  __isset = other17.__isset;
  return *this;
}
void plan_status_rule::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "plan_status_rule(";
  out << "name=" << to_string(name);
  out << ", " << "author=" << to_string(author);
  out << ", " << "timestamp=" << to_string(timestamp);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "index=" << to_string(index);
  out << ", " << "prompt=" << to_string(prompt);
  out << ")";
}


common_contract::~common_contract() noexcept {
}


void common_contract::__set_a_side_company(const std::string& val) {
  this->a_side_company = val;
}

void common_contract::__set_b_side_company(const std::string& val) {
  this->b_side_company = val;
}

void common_contract::__set_start_time(const std::string& val) {
  this->start_time = val;
}

void common_contract::__set_end_time(const std::string& val) {
  this->end_time = val;
}

void common_contract::__set_number(const std::string& val) {
  this->number = val;
}

void common_contract::__set_id(const int64_t val) {
  this->id = val;
}

void common_contract::__set_status(const int64_t val) {
  this->status = val;
}

void common_contract::__set_customer_code(const std::string& val) {
  this->customer_code = val;
}

void common_contract::__set_balance(const double val) {
  this->balance = val;
}
std::ostream& operator<<(std::ostream& out, const common_contract& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t common_contract::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->a_side_company);
          this->__isset.a_side_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->b_side_company);
          this->__isset.b_side_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->start_time);
          this->__isset.start_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->end_time);
          this->__isset.end_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->number);
          this->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customer_code);
          this->__isset.customer_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->balance);
          this->__isset.balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t common_contract::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("common_contract");

  xfer += oprot->writeFieldBegin("a_side_company", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->a_side_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("b_side_company", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->b_side_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->start_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_time", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->end_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customer_code", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->customer_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("balance", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->balance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(common_contract &a, common_contract &b) {
  using ::std::swap;
  swap(a.a_side_company, b.a_side_company);
  swap(a.b_side_company, b.b_side_company);
  swap(a.start_time, b.start_time);
  swap(a.end_time, b.end_time);
  swap(a.number, b.number);
  swap(a.id, b.id);
  swap(a.status, b.status);
  swap(a.customer_code, b.customer_code);
  swap(a.balance, b.balance);
  swap(a.__isset, b.__isset);
}

common_contract::common_contract(const common_contract& other18) {
  a_side_company = other18.a_side_company;
  b_side_company = other18.b_side_company;
  start_time = other18.start_time;
  end_time = other18.end_time;
  number = other18.number;
  id = other18.id;
  status = other18.status;
  customer_code = other18.customer_code;
  balance = other18.balance;
  __isset = other18.__isset;
}
common_contract& common_contract::operator=(const common_contract& other19) {
  a_side_company = other19.a_side_company;
  b_side_company = other19.b_side_company;
  start_time = other19.start_time;
  end_time = other19.end_time;
  number = other19.number;
  id = other19.id;
  status = other19.status;
  customer_code = other19.customer_code;
  balance = other19.balance;
  __isset = other19.__isset;
  return *this;
}
void common_contract::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "common_contract(";
  out << "a_side_company=" << to_string(a_side_company);
  out << ", " << "b_side_company=" << to_string(b_side_company);
  out << ", " << "start_time=" << to_string(start_time);
  out << ", " << "end_time=" << to_string(end_time);
  out << ", " << "number=" << to_string(number);
  out << ", " << "id=" << to_string(id);
  out << ", " << "status=" << to_string(status);
  out << ", " << "customer_code=" << to_string(customer_code);
  out << ", " << "balance=" << to_string(balance);
  out << ")";
}


real_access_record::~real_access_record() noexcept {
}


void real_access_record::__set_name(const std::string& val) {
  this->name = val;
}

void real_access_record::__set_logo(const std::string& val) {
  this->logo = val;
}

void real_access_record::__set_phone(const std::string& val) {
  this->phone = val;
}

void real_access_record::__set_company_name(const std::string& val) {
  this->company_name = val;
}

void real_access_record::__set_attachment(const std::string& val) {
  this->attachment = val;
}
std::ostream& operator<<(std::ostream& out, const real_access_record& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t real_access_record::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logo);
          this->__isset.logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company_name);
          this->__isset.company_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->attachment);
          this->__isset.attachment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t real_access_record::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("real_access_record");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logo", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->logo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->company_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("attachment", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->attachment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(real_access_record &a, real_access_record &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.logo, b.logo);
  swap(a.phone, b.phone);
  swap(a.company_name, b.company_name);
  swap(a.attachment, b.attachment);
  swap(a.__isset, b.__isset);
}

real_access_record::real_access_record(const real_access_record& other20) {
  name = other20.name;
  logo = other20.logo;
  phone = other20.phone;
  company_name = other20.company_name;
  attachment = other20.attachment;
  __isset = other20.__isset;
}
real_access_record& real_access_record::operator=(const real_access_record& other21) {
  name = other21.name;
  logo = other21.logo;
  phone = other21.phone;
  company_name = other21.company_name;
  attachment = other21.attachment;
  __isset = other21.__isset;
  return *this;
}
void real_access_record::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "real_access_record(";
  out << "name=" << to_string(name);
  out << ", " << "logo=" << to_string(logo);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "company_name=" << to_string(company_name);
  out << ", " << "attachment=" << to_string(attachment);
  out << ")";
}


company_work_time::~company_work_time() noexcept {
}


void company_work_time::__set_start_time(const int64_t val) {
  this->start_time = val;
}

void company_work_time::__set_end_time(const int64_t val) {
  this->end_time = val;
}
std::ostream& operator<<(std::ostream& out, const company_work_time& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t company_work_time::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->start_time);
          this->__isset.start_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->end_time);
          this->__isset.end_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t company_work_time::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("company_work_time");

  xfer += oprot->writeFieldBegin("start_time", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->start_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("end_time", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->end_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(company_work_time &a, company_work_time &b) {
  using ::std::swap;
  swap(a.start_time, b.start_time);
  swap(a.end_time, b.end_time);
  swap(a.__isset, b.__isset);
}

company_work_time::company_work_time(const company_work_time& other22) {
  start_time = other22.start_time;
  end_time = other22.end_time;
  __isset = other22.__isset;
}
company_work_time& company_work_time::operator=(const company_work_time& other23) {
  start_time = other23.start_time;
  end_time = other23.end_time;
  __isset = other23.__isset;
  return *this;
}
void company_work_time::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "company_work_time(";
  out << "start_time=" << to_string(start_time);
  out << ", " << "end_time=" << to_string(end_time);
  out << ")";
}


company_positon_lat_lag::~company_positon_lat_lag() noexcept {
}


void company_positon_lat_lag::__set_lat(const double val) {
  this->lat = val;
}

void company_positon_lat_lag::__set_lag(const double val) {
  this->lag = val;
}

void company_positon_lat_lag::__set_distance(const double val) {
  this->distance = val;
}
std::ostream& operator<<(std::ostream& out, const company_positon_lat_lag& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t company_positon_lat_lag::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lat);
          this->__isset.lat = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->lag);
          this->__isset.lag = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->distance);
          this->__isset.distance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t company_positon_lat_lag::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("company_positon_lat_lag");

  xfer += oprot->writeFieldBegin("lat", ::apache::thrift::protocol::T_DOUBLE, 1);
  xfer += oprot->writeDouble(this->lat);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("lag", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->lag);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("distance", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->distance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(company_positon_lat_lag &a, company_positon_lat_lag &b) {
  using ::std::swap;
  swap(a.lat, b.lat);
  swap(a.lag, b.lag);
  swap(a.distance, b.distance);
  swap(a.__isset, b.__isset);
}

company_positon_lat_lag::company_positon_lat_lag(const company_positon_lat_lag& other24) {
  lat = other24.lat;
  lag = other24.lag;
  distance = other24.distance;
  __isset = other24.__isset;
}
company_positon_lat_lag& company_positon_lat_lag::operator=(const company_positon_lat_lag& other25) {
  lat = other25.lat;
  lag = other25.lag;
  distance = other25.distance;
  __isset = other25.__isset;
  return *this;
}
void company_positon_lat_lag::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "company_positon_lat_lag(";
  out << "lat=" << to_string(lat);
  out << ", " << "lag=" << to_string(lag);
  out << ", " << "distance=" << to_string(distance);
  out << ")";
}


third_dev_info::~third_dev_info() noexcept {
}


void third_dev_info::__set_key(const std::string& val) {
  this->key = val;
}

void third_dev_info::__set_url(const std::string& val) {
  this->url = val;
}
std::ostream& operator<<(std::ostream& out, const third_dev_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t third_dev_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t third_dev_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("third_dev_info");

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(third_dev_info &a, third_dev_info &b) {
  using ::std::swap;
  swap(a.key, b.key);
  swap(a.url, b.url);
  swap(a.__isset, b.__isset);
}

third_dev_info::third_dev_info(const third_dev_info& other26) {
  key = other26.key;
  url = other26.url;
  __isset = other26.__isset;
}
third_dev_info& third_dev_info::operator=(const third_dev_info& other27) {
  key = other27.key;
  url = other27.url;
  __isset = other27.__isset;
  return *this;
}
void third_dev_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "third_dev_info(";
  out << "key=" << to_string(key);
  out << ", " << "url=" << to_string(url);
  out << ")";
}


plan_confirm_info::~plan_confirm_info() noexcept {
}


void plan_confirm_info::__set_timestamp(const std::string& val) {
  this->timestamp = val;
}

void plan_confirm_info::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const plan_confirm_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t plan_confirm_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t plan_confirm_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("plan_confirm_info");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(plan_confirm_info &a, plan_confirm_info &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

plan_confirm_info::plan_confirm_info(const plan_confirm_info& other28) {
  timestamp = other28.timestamp;
  name = other28.name;
  __isset = other28.__isset;
}
plan_confirm_info& plan_confirm_info::operator=(const plan_confirm_info& other29) {
  timestamp = other29.timestamp;
  name = other29.name;
  __isset = other29.__isset;
  return *this;
}
void plan_confirm_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "plan_confirm_info(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


pay_confirm_info::~pay_confirm_info() noexcept {
}


void pay_confirm_info::__set_timestamp(const std::string& val) {
  this->timestamp = val;
}

void pay_confirm_info::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const pay_confirm_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t pay_confirm_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t pay_confirm_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("pay_confirm_info");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(pay_confirm_info &a, pay_confirm_info &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

pay_confirm_info::pay_confirm_info(const pay_confirm_info& other30) {
  timestamp = other30.timestamp;
  name = other30.name;
  __isset = other30.__isset;
}
pay_confirm_info& pay_confirm_info::operator=(const pay_confirm_info& other31) {
  timestamp = other31.timestamp;
  name = other31.name;
  __isset = other31.__isset;
  return *this;
}
void pay_confirm_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "pay_confirm_info(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


vichele_in_plan::~vichele_in_plan() noexcept {
}


void vichele_in_plan::__set_main_vichele(const std::string& val) {
  this->main_vichele = val;
}

void vichele_in_plan::__set_behind_vichele(const std::string& val) {
  this->behind_vichele = val;
}

void vichele_in_plan::__set_driver_name(const std::string& val) {
  this->driver_name = val;
}

void vichele_in_plan::__set_driver_phone(const std::string& val) {
  this->driver_phone = val;
}

void vichele_in_plan::__set_count(const double val) {
  this->count = val;
}

void vichele_in_plan::__set_drop_address(const std::string& val) {
  this->drop_address = val;
}

void vichele_in_plan::__set_use_for(const std::string& val) {
  this->use_for = val;
}

void vichele_in_plan::__set_vichele_id(const int64_t val) {
  this->vichele_id = val;
}

void vichele_in_plan::__set_finish(const bool val) {
  this->finish = val;
}

void vichele_in_plan::__set_deliver_timestamp(const std::string& val) {
  this->deliver_timestamp = val;
}

void vichele_in_plan::__set_register_timestamp(const std::string& val) {
  this->register_timestamp = val;
}

void vichele_in_plan::__set_register_number(const std::string& val) {
  this->register_number = val;
}

void vichele_in_plan::__set_enter_location(const std::string& val) {
  this->enter_location = val;
}

void vichele_in_plan::__set_p_time(const std::string& val) {
  this->p_time = val;
}

void vichele_in_plan::__set_p_weight(const double val) {
  this->p_weight = val;
}

void vichele_in_plan::__set_m_weight(const double val) {
  this->m_weight = val;
}
std::ostream& operator<<(std::ostream& out, const vichele_in_plan& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vichele_in_plan::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->main_vichele);
          this->__isset.main_vichele = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->behind_vichele);
          this->__isset.behind_vichele = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_name);
          this->__isset.driver_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_phone);
          this->__isset.driver_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->drop_address);
          this->__isset.drop_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->use_for);
          this->__isset.use_for = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->vichele_id);
          this->__isset.vichele_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->finish);
          this->__isset.finish = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deliver_timestamp);
          this->__isset.deliver_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->register_timestamp);
          this->__isset.register_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->register_number);
          this->__isset.register_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->enter_location);
          this->__isset.enter_location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->p_time);
          this->__isset.p_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p_weight);
          this->__isset.p_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->m_weight);
          this->__isset.m_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t vichele_in_plan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vichele_in_plan");

  xfer += oprot->writeFieldBegin("main_vichele", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->main_vichele);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("behind_vichele", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->behind_vichele);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->driver_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_phone", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->driver_phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_address", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->drop_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_for", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->use_for);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vichele_id", ::apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->vichele_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("finish", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->finish);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("deliver_timestamp", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->deliver_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_timestamp", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->register_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_number", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->register_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enter_location", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->enter_location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_time", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->p_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_weight", ::apache::thrift::protocol::T_DOUBLE, 15);
  xfer += oprot->writeDouble(this->p_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m_weight", ::apache::thrift::protocol::T_DOUBLE, 16);
  xfer += oprot->writeDouble(this->m_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vichele_in_plan &a, vichele_in_plan &b) {
  using ::std::swap;
  swap(a.main_vichele, b.main_vichele);
  swap(a.behind_vichele, b.behind_vichele);
  swap(a.driver_name, b.driver_name);
  swap(a.driver_phone, b.driver_phone);
  swap(a.count, b.count);
  swap(a.drop_address, b.drop_address);
  swap(a.use_for, b.use_for);
  swap(a.vichele_id, b.vichele_id);
  swap(a.finish, b.finish);
  swap(a.deliver_timestamp, b.deliver_timestamp);
  swap(a.register_timestamp, b.register_timestamp);
  swap(a.register_number, b.register_number);
  swap(a.enter_location, b.enter_location);
  swap(a.p_time, b.p_time);
  swap(a.p_weight, b.p_weight);
  swap(a.m_weight, b.m_weight);
  swap(a.__isset, b.__isset);
}

vichele_in_plan::vichele_in_plan(const vichele_in_plan& other32) {
  main_vichele = other32.main_vichele;
  behind_vichele = other32.behind_vichele;
  driver_name = other32.driver_name;
  driver_phone = other32.driver_phone;
  count = other32.count;
  drop_address = other32.drop_address;
  use_for = other32.use_for;
  vichele_id = other32.vichele_id;
  finish = other32.finish;
  deliver_timestamp = other32.deliver_timestamp;
  register_timestamp = other32.register_timestamp;
  register_number = other32.register_number;
  enter_location = other32.enter_location;
  p_time = other32.p_time;
  p_weight = other32.p_weight;
  m_weight = other32.m_weight;
  __isset = other32.__isset;
}
vichele_in_plan& vichele_in_plan::operator=(const vichele_in_plan& other33) {
  main_vichele = other33.main_vichele;
  behind_vichele = other33.behind_vichele;
  driver_name = other33.driver_name;
  driver_phone = other33.driver_phone;
  count = other33.count;
  drop_address = other33.drop_address;
  use_for = other33.use_for;
  vichele_id = other33.vichele_id;
  finish = other33.finish;
  deliver_timestamp = other33.deliver_timestamp;
  register_timestamp = other33.register_timestamp;
  register_number = other33.register_number;
  enter_location = other33.enter_location;
  p_time = other33.p_time;
  p_weight = other33.p_weight;
  m_weight = other33.m_weight;
  __isset = other33.__isset;
  return *this;
}
void vichele_in_plan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vichele_in_plan(";
  out << "main_vichele=" << to_string(main_vichele);
  out << ", " << "behind_vichele=" << to_string(behind_vichele);
  out << ", " << "driver_name=" << to_string(driver_name);
  out << ", " << "driver_phone=" << to_string(driver_phone);
  out << ", " << "count=" << to_string(count);
  out << ", " << "drop_address=" << to_string(drop_address);
  out << ", " << "use_for=" << to_string(use_for);
  out << ", " << "vichele_id=" << to_string(vichele_id);
  out << ", " << "finish=" << to_string(finish);
  out << ", " << "deliver_timestamp=" << to_string(deliver_timestamp);
  out << ", " << "register_timestamp=" << to_string(register_timestamp);
  out << ", " << "register_number=" << to_string(register_number);
  out << ", " << "enter_location=" << to_string(enter_location);
  out << ", " << "p_time=" << to_string(p_time);
  out << ", " << "p_weight=" << to_string(p_weight);
  out << ", " << "m_weight=" << to_string(m_weight);
  out << ")";
}


stuff_plan::~stuff_plan() noexcept {
}


void stuff_plan::__set_type_id(const int64_t val) {
  this->type_id = val;
}

void stuff_plan::__set_count(const double val) {
  this->count = val;
}

void stuff_plan::__set_vichele_info(const std::vector<vichele_in_plan> & val) {
  this->vichele_info = val;
}

void stuff_plan::__set_plan_id(const int64_t val) {
  this->plan_id = val;
}

void stuff_plan::__set_plan_time(const std::string& val) {
  this->plan_time = val;
}

void stuff_plan::__set_created_time(const int64_t val) {
  this->created_time = val;
}

void stuff_plan::__set_name(const std::string& val) {
  this->name = val;
}

void stuff_plan::__set_price(const double val) {
  this->price = val;
}

void stuff_plan::__set_status(const int64_t val) {
  this->status = val;
}

void stuff_plan::__set_proxy_company(const std::string& val) {
  this->proxy_company = val;
}

void stuff_plan::__set_created_user_name(const std::string& val) {
  this->created_user_name = val;
}

void stuff_plan::__set_buy_company(const std::string& val) {
  this->buy_company = val;
}

void stuff_plan::__set_sale_company(const std::string& val) {
  this->sale_company = val;
}

void stuff_plan::__set_comment(const std::string& val) {
  this->comment = val;
}

void stuff_plan::__set_is_cancel(const bool val) {
  this->is_cancel = val;
}
std::ostream& operator<<(std::ostream& out, const stuff_plan& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t stuff_plan::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vichele_info.clear();
            uint32_t _size34;
            ::apache::thrift::protocol::TType _etype37;
            xfer += iprot->readListBegin(_etype37, _size34);
            this->vichele_info.resize(_size34);
            uint32_t _i38;
            for (_i38 = 0; _i38 < _size34; ++_i38)
            {
              xfer += this->vichele_info[_i38].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vichele_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_id);
          this->__isset.plan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plan_time);
          this->__isset.plan_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created_time);
          this->__isset.created_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->proxy_company);
          this->__isset.proxy_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->created_user_name);
          this->__isset.created_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buy_company);
          this->__isset.buy_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sale_company);
          this->__isset.sale_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_cancel);
          this->__isset.is_cancel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stuff_plan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("stuff_plan");

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vichele_info", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vichele_info.size()));
    std::vector<vichele_in_plan> ::const_iterator _iter39;
    for (_iter39 = this->vichele_info.begin(); _iter39 != this->vichele_info.end(); ++_iter39)
    {
      xfer += (*_iter39).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->plan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_time", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->plan_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_time", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->created_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proxy_company", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->proxy_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_user_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->created_user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buy_company", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->buy_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sale_company", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->sale_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_cancel", ::apache::thrift::protocol::T_BOOL, 15);
  xfer += oprot->writeBool(this->is_cancel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stuff_plan &a, stuff_plan &b) {
  using ::std::swap;
  swap(a.type_id, b.type_id);
  swap(a.count, b.count);
  swap(a.vichele_info, b.vichele_info);
  swap(a.plan_id, b.plan_id);
  swap(a.plan_time, b.plan_time);
  swap(a.created_time, b.created_time);
  swap(a.name, b.name);
  swap(a.price, b.price);
  swap(a.status, b.status);
  swap(a.proxy_company, b.proxy_company);
  swap(a.created_user_name, b.created_user_name);
  swap(a.buy_company, b.buy_company);
  swap(a.sale_company, b.sale_company);
  swap(a.comment, b.comment);
  swap(a.is_cancel, b.is_cancel);
  swap(a.__isset, b.__isset);
}

stuff_plan::stuff_plan(const stuff_plan& other40) {
  type_id = other40.type_id;
  count = other40.count;
  vichele_info = other40.vichele_info;
  plan_id = other40.plan_id;
  plan_time = other40.plan_time;
  created_time = other40.created_time;
  name = other40.name;
  price = other40.price;
  status = other40.status;
  proxy_company = other40.proxy_company;
  created_user_name = other40.created_user_name;
  buy_company = other40.buy_company;
  sale_company = other40.sale_company;
  comment = other40.comment;
  is_cancel = other40.is_cancel;
  __isset = other40.__isset;
}
stuff_plan& stuff_plan::operator=(const stuff_plan& other41) {
  type_id = other41.type_id;
  count = other41.count;
  vichele_info = other41.vichele_info;
  plan_id = other41.plan_id;
  plan_time = other41.plan_time;
  created_time = other41.created_time;
  name = other41.name;
  price = other41.price;
  status = other41.status;
  proxy_company = other41.proxy_company;
  created_user_name = other41.created_user_name;
  buy_company = other41.buy_company;
  sale_company = other41.sale_company;
  comment = other41.comment;
  is_cancel = other41.is_cancel;
  __isset = other41.__isset;
  return *this;
}
void stuff_plan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "stuff_plan(";
  out << "type_id=" << to_string(type_id);
  out << ", " << "count=" << to_string(count);
  out << ", " << "vichele_info=" << to_string(vichele_info);
  out << ", " << "plan_id=" << to_string(plan_id);
  out << ", " << "plan_time=" << to_string(plan_time);
  out << ", " << "created_time=" << to_string(created_time);
  out << ", " << "name=" << to_string(name);
  out << ", " << "price=" << to_string(price);
  out << ", " << "status=" << to_string(status);
  out << ", " << "proxy_company=" << to_string(proxy_company);
  out << ", " << "created_user_name=" << to_string(created_user_name);
  out << ", " << "buy_company=" << to_string(buy_company);
  out << ", " << "sale_company=" << to_string(sale_company);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "is_cancel=" << to_string(is_cancel);
  out << ")";
}


plan_status::~plan_status() noexcept {
}


void plan_status::__set_plan_id(const int64_t val) {
  this->plan_id = val;
}

void plan_status::__set_status(const int64_t val) {
  this->status = val;
}

void plan_status::__set_plan_time(const int64_t val) {
  this->plan_time = val;
}

void plan_status::__set_conflict_reason(const std::string& val) {
  this->conflict_reason = val;
}

void plan_status::__set_status_prompt(const std::string& val) {
  this->status_prompt = val;
}

void plan_status::__set_is_cancel(const bool val) {
  this->is_cancel = val;
}

void plan_status::__set_stuff_type(const std::string& val) {
  this->stuff_type = val;
}
std::ostream& operator<<(std::ostream& out, const plan_status& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t plan_status::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_id);
          this->__isset.plan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_time);
          this->__isset.plan_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->conflict_reason);
          this->__isset.conflict_reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status_prompt);
          this->__isset.status_prompt = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_cancel);
          this->__isset.is_cancel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuff_type);
          this->__isset.stuff_type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t plan_status::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("plan_status");

  xfer += oprot->writeFieldBegin("plan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->plan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_time", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->plan_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("conflict_reason", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->conflict_reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status_prompt", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->status_prompt);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_cancel", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->is_cancel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stuff_type", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->stuff_type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(plan_status &a, plan_status &b) {
  using ::std::swap;
  swap(a.plan_id, b.plan_id);
  swap(a.status, b.status);
  swap(a.plan_time, b.plan_time);
  swap(a.conflict_reason, b.conflict_reason);
  swap(a.status_prompt, b.status_prompt);
  swap(a.is_cancel, b.is_cancel);
  swap(a.stuff_type, b.stuff_type);
  swap(a.__isset, b.__isset);
}

plan_status::plan_status(const plan_status& other42) {
  plan_id = other42.plan_id;
  status = other42.status;
  plan_time = other42.plan_time;
  conflict_reason = other42.conflict_reason;
  status_prompt = other42.status_prompt;
  is_cancel = other42.is_cancel;
  stuff_type = other42.stuff_type;
  __isset = other42.__isset;
}
plan_status& plan_status::operator=(const plan_status& other43) {
  plan_id = other43.plan_id;
  status = other43.status;
  plan_time = other43.plan_time;
  conflict_reason = other43.conflict_reason;
  status_prompt = other43.status_prompt;
  is_cancel = other43.is_cancel;
  stuff_type = other43.stuff_type;
  __isset = other43.__isset;
  return *this;
}
void plan_status::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "plan_status(";
  out << "plan_id=" << to_string(plan_id);
  out << ", " << "status=" << to_string(status);
  out << ", " << "plan_time=" << to_string(plan_time);
  out << ", " << "conflict_reason=" << to_string(conflict_reason);
  out << ", " << "status_prompt=" << to_string(status_prompt);
  out << ", " << "is_cancel=" << to_string(is_cancel);
  out << ", " << "stuff_type=" << to_string(stuff_type);
  out << ")";
}


plan_number_id::~plan_number_id() noexcept {
}


void plan_number_id::__set_id(const int64_t val) {
  this->id = val;
}

void plan_number_id::__set_number(const std::string& val) {
  this->number = val;
}
std::ostream& operator<<(std::ostream& out, const plan_number_id& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t plan_number_id::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->number);
          this->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t plan_number_id::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("plan_number_id");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(plan_number_id &a, plan_number_id &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.number, b.number);
  swap(a.__isset, b.__isset);
}

plan_number_id::plan_number_id(const plan_number_id& other44) {
  id = other44.id;
  number = other44.number;
  __isset = other44.__isset;
}
plan_number_id& plan_number_id::operator=(const plan_number_id& other45) {
  id = other45.id;
  number = other45.number;
  __isset = other45.__isset;
  return *this;
}
void plan_number_id::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "plan_number_id(";
  out << "id=" << to_string(id);
  out << ", " << "number=" << to_string(number);
  out << ")";
}


deliver_info::~deliver_info() noexcept {
}


void deliver_info::__set_id(const int64_t val) {
  this->id = val;
}

void deliver_info::__set_count(const double val) {
  this->count = val;
}

void deliver_info::__set_p_weight(const double val) {
  this->p_weight = val;
}

void deliver_info::__set_m_weight(const double val) {
  this->m_weight = val;
}

void deliver_info::__set_p_time(const std::string& val) {
  this->p_time = val;
}

void deliver_info::__set_m_time(const std::string& val) {
  this->m_time = val;
}
std::ostream& operator<<(std::ostream& out, const deliver_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t deliver_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p_weight);
          this->__isset.p_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->m_weight);
          this->__isset.m_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->p_time);
          this->__isset.p_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->m_time);
          this->__isset.m_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t deliver_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("deliver_info");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_weight", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->p_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m_weight", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->m_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_time", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->p_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m_time", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->m_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(deliver_info &a, deliver_info &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.count, b.count);
  swap(a.p_weight, b.p_weight);
  swap(a.m_weight, b.m_weight);
  swap(a.p_time, b.p_time);
  swap(a.m_time, b.m_time);
  swap(a.__isset, b.__isset);
}

deliver_info::deliver_info(const deliver_info& other46) {
  id = other46.id;
  count = other46.count;
  p_weight = other46.p_weight;
  m_weight = other46.m_weight;
  p_time = other46.p_time;
  m_time = other46.m_time;
  __isset = other46.__isset;
}
deliver_info& deliver_info::operator=(const deliver_info& other47) {
  id = other47.id;
  count = other47.count;
  p_weight = other47.p_weight;
  m_weight = other47.m_weight;
  p_time = other47.p_time;
  m_time = other47.m_time;
  __isset = other47.__isset;
  return *this;
}
void deliver_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "deliver_info(";
  out << "id=" << to_string(id);
  out << ", " << "count=" << to_string(count);
  out << ", " << "p_weight=" << to_string(p_weight);
  out << ", " << "m_weight=" << to_string(m_weight);
  out << ", " << "p_time=" << to_string(p_time);
  out << ", " << "m_time=" << to_string(m_time);
  out << ")";
}


vichele_statistics::~vichele_statistics() noexcept {
}


void vichele_statistics::__set_company(const std::string& val) {
  this->company = val;
}

void vichele_statistics::__set_main_vichele(const std::string& val) {
  this->main_vichele = val;
}

void vichele_statistics::__set_behind_vichele(const std::string& val) {
  this->behind_vichele = val;
}

void vichele_statistics::__set_driver_name(const std::string& val) {
  this->driver_name = val;
}

void vichele_statistics::__set_driver_phone(const std::string& val) {
  this->driver_phone = val;
}

void vichele_statistics::__set_delivered(const bool val) {
  this->delivered = val;
}

void vichele_statistics::__set_plan_id(const int64_t val) {
  this->plan_id = val;
}

void vichele_statistics::__set_plan_order(const std::string& val) {
  this->plan_order = val;
}
std::ostream& operator<<(std::ostream& out, const vichele_statistics& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vichele_statistics::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->main_vichele);
          this->__isset.main_vichele = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->behind_vichele);
          this->__isset.behind_vichele = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_name);
          this->__isset.driver_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_phone);
          this->__isset.driver_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->delivered);
          this->__isset.delivered = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_id);
          this->__isset.plan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plan_order);
          this->__isset.plan_order = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t vichele_statistics::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vichele_statistics");

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("main_vichele", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->main_vichele);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("behind_vichele", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->behind_vichele);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->driver_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_phone", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->driver_phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("delivered", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->delivered);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_id", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->plan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_order", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->plan_order);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vichele_statistics &a, vichele_statistics &b) {
  using ::std::swap;
  swap(a.company, b.company);
  swap(a.main_vichele, b.main_vichele);
  swap(a.behind_vichele, b.behind_vichele);
  swap(a.driver_name, b.driver_name);
  swap(a.driver_phone, b.driver_phone);
  swap(a.delivered, b.delivered);
  swap(a.plan_id, b.plan_id);
  swap(a.plan_order, b.plan_order);
  swap(a.__isset, b.__isset);
}

vichele_statistics::vichele_statistics(const vichele_statistics& other48) {
  company = other48.company;
  main_vichele = other48.main_vichele;
  behind_vichele = other48.behind_vichele;
  driver_name = other48.driver_name;
  driver_phone = other48.driver_phone;
  delivered = other48.delivered;
  plan_id = other48.plan_id;
  plan_order = other48.plan_order;
  __isset = other48.__isset;
}
vichele_statistics& vichele_statistics::operator=(const vichele_statistics& other49) {
  company = other49.company;
  main_vichele = other49.main_vichele;
  behind_vichele = other49.behind_vichele;
  driver_name = other49.driver_name;
  driver_phone = other49.driver_phone;
  delivered = other49.delivered;
  plan_id = other49.plan_id;
  plan_order = other49.plan_order;
  __isset = other49.__isset;
  return *this;
}
void vichele_statistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vichele_statistics(";
  out << "company=" << to_string(company);
  out << ", " << "main_vichele=" << to_string(main_vichele);
  out << ", " << "behind_vichele=" << to_string(behind_vichele);
  out << ", " << "driver_name=" << to_string(driver_name);
  out << ", " << "driver_phone=" << to_string(driver_phone);
  out << ", " << "delivered=" << to_string(delivered);
  out << ", " << "plan_id=" << to_string(plan_id);
  out << ", " << "plan_order=" << to_string(plan_order);
  out << ")";
}


vichele_stuff_statistics::~vichele_stuff_statistics() noexcept {
}


void vichele_stuff_statistics::__set_vichele(const vichele_statistics& val) {
  this->vichele = val;
}

void vichele_stuff_statistics::__set_stuff_name(const std::string& val) {
  this->stuff_name = val;
}
std::ostream& operator<<(std::ostream& out, const vichele_stuff_statistics& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vichele_stuff_statistics::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->vichele.read(iprot);
          this->__isset.vichele = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuff_name);
          this->__isset.stuff_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t vichele_stuff_statistics::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vichele_stuff_statistics");

  xfer += oprot->writeFieldBegin("vichele", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->vichele.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stuff_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->stuff_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vichele_stuff_statistics &a, vichele_stuff_statistics &b) {
  using ::std::swap;
  swap(a.vichele, b.vichele);
  swap(a.stuff_name, b.stuff_name);
  swap(a.__isset, b.__isset);
}

vichele_stuff_statistics::vichele_stuff_statistics(const vichele_stuff_statistics& other50) {
  vichele = other50.vichele;
  stuff_name = other50.stuff_name;
  __isset = other50.__isset;
}
vichele_stuff_statistics& vichele_stuff_statistics::operator=(const vichele_stuff_statistics& other51) {
  vichele = other51.vichele;
  stuff_name = other51.stuff_name;
  __isset = other51.__isset;
  return *this;
}
void vichele_stuff_statistics::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vichele_stuff_statistics(";
  out << "vichele=" << to_string(vichele);
  out << ", " << "stuff_name=" << to_string(stuff_name);
  out << ")";
}


vichele_search_result::~vichele_search_result() noexcept {
}


void vichele_search_result::__set_plan_info(const plan_number_id& val) {
  this->plan_info = val;
}

void vichele_search_result::__set_vichele_numbers(const std::string& val) {
  this->vichele_numbers = val;
}

void vichele_search_result::__set_plan_time(const std::string& val) {
  this->plan_time = val;
}

void vichele_search_result::__set_status(const std::string& val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const vichele_search_result& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vichele_search_result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->plan_info.read(iprot);
          this->__isset.plan_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vichele_numbers);
          this->__isset.vichele_numbers = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plan_time);
          this->__isset.plan_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t vichele_search_result::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vichele_search_result");

  xfer += oprot->writeFieldBegin("plan_info", ::apache::thrift::protocol::T_STRUCT, 1);
  xfer += this->plan_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vichele_numbers", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->vichele_numbers);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_time", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->plan_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vichele_search_result &a, vichele_search_result &b) {
  using ::std::swap;
  swap(a.plan_info, b.plan_info);
  swap(a.vichele_numbers, b.vichele_numbers);
  swap(a.plan_time, b.plan_time);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

vichele_search_result::vichele_search_result(const vichele_search_result& other52) {
  plan_info = other52.plan_info;
  vichele_numbers = other52.vichele_numbers;
  plan_time = other52.plan_time;
  status = other52.status;
  __isset = other52.__isset;
}
vichele_search_result& vichele_search_result::operator=(const vichele_search_result& other53) {
  plan_info = other53.plan_info;
  vichele_numbers = other53.vichele_numbers;
  plan_time = other53.plan_time;
  status = other53.status;
  __isset = other53.__isset;
  return *this;
}
void vichele_search_result::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vichele_search_result(";
  out << "plan_info=" << to_string(plan_info);
  out << ", " << "vichele_numbers=" << to_string(vichele_numbers);
  out << ", " << "plan_time=" << to_string(plan_time);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


company_plan_brief::~company_plan_brief() noexcept {
}


void company_plan_brief::__set_today_plan_count(const int64_t val) {
  this->today_plan_count = val;
}

void company_plan_brief::__set_today_vichele_count(const int64_t val) {
  this->today_vichele_count = val;
}

void company_plan_brief::__set_tomorrow_plan_count(const int64_t val) {
  this->tomorrow_plan_count = val;
}

void company_plan_brief::__set_tomorrow_vichele_count(const int64_t val) {
  this->tomorrow_vichele_count = val;
}
std::ostream& operator<<(std::ostream& out, const company_plan_brief& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t company_plan_brief::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->today_plan_count);
          this->__isset.today_plan_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->today_vichele_count);
          this->__isset.today_vichele_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tomorrow_plan_count);
          this->__isset.tomorrow_plan_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->tomorrow_vichele_count);
          this->__isset.tomorrow_vichele_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t company_plan_brief::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("company_plan_brief");

  xfer += oprot->writeFieldBegin("today_plan_count", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->today_plan_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("today_vichele_count", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->today_vichele_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tomorrow_plan_count", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->tomorrow_plan_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("tomorrow_vichele_count", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->tomorrow_vichele_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(company_plan_brief &a, company_plan_brief &b) {
  using ::std::swap;
  swap(a.today_plan_count, b.today_plan_count);
  swap(a.today_vichele_count, b.today_vichele_count);
  swap(a.tomorrow_plan_count, b.tomorrow_plan_count);
  swap(a.tomorrow_vichele_count, b.tomorrow_vichele_count);
  swap(a.__isset, b.__isset);
}

company_plan_brief::company_plan_brief(const company_plan_brief& other54) {
  today_plan_count = other54.today_plan_count;
  today_vichele_count = other54.today_vichele_count;
  tomorrow_plan_count = other54.tomorrow_plan_count;
  tomorrow_vichele_count = other54.tomorrow_vichele_count;
  __isset = other54.__isset;
}
company_plan_brief& company_plan_brief::operator=(const company_plan_brief& other55) {
  today_plan_count = other55.today_plan_count;
  today_vichele_count = other55.today_vichele_count;
  tomorrow_plan_count = other55.tomorrow_plan_count;
  tomorrow_vichele_count = other55.tomorrow_vichele_count;
  __isset = other55.__isset;
  return *this;
}
void company_plan_brief::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "company_plan_brief(";
  out << "today_plan_count=" << to_string(today_plan_count);
  out << ", " << "today_vichele_count=" << to_string(today_vichele_count);
  out << ", " << "tomorrow_plan_count=" << to_string(tomorrow_plan_count);
  out << ", " << "tomorrow_vichele_count=" << to_string(tomorrow_vichele_count);
  out << ")";
}


today_driver_info::~today_driver_info() noexcept {
}


void today_driver_info::__set_id(const int64_t val) {
  this->id = val;
}

void today_driver_info::__set_destination_company(const std::string& val) {
  this->destination_company = val;
}

void today_driver_info::__set_destination_address(const std::string& val) {
  this->destination_address = val;
}

void today_driver_info::__set_order_company(const std::string& val) {
  this->order_company = val;
}

void today_driver_info::__set_main_vichele(const std::string& val) {
  this->main_vichele = val;
}

void today_driver_info::__set_behind_vichele(const std::string& val) {
  this->behind_vichele = val;
}

void today_driver_info::__set_stuff_name(const std::string& val) {
  this->stuff_name = val;
}

void today_driver_info::__set_register_timestamp(const std::string& val) {
  this->register_timestamp = val;
}

void today_driver_info::__set_register_number(const std::string& val) {
  this->register_number = val;
}

void today_driver_info::__set_enter_location(const std::string& val) {
  this->enter_location = val;
}

void today_driver_info::__set_is_registered(const bool val) {
  this->is_registered = val;
}
std::ostream& operator<<(std::ostream& out, const today_driver_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t today_driver_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destination_company);
          this->__isset.destination_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destination_address);
          this->__isset.destination_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->order_company);
          this->__isset.order_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->main_vichele);
          this->__isset.main_vichele = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->behind_vichele);
          this->__isset.behind_vichele = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuff_name);
          this->__isset.stuff_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->register_timestamp);
          this->__isset.register_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->register_number);
          this->__isset.register_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->enter_location);
          this->__isset.enter_location = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_registered);
          this->__isset.is_registered = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t today_driver_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("today_driver_info");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination_company", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->destination_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination_address", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->destination_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("order_company", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->order_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("main_vichele", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->main_vichele);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("behind_vichele", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->behind_vichele);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stuff_name", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->stuff_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_timestamp", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->register_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("register_number", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->register_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enter_location", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->enter_location);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_registered", ::apache::thrift::protocol::T_BOOL, 11);
  xfer += oprot->writeBool(this->is_registered);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(today_driver_info &a, today_driver_info &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.destination_company, b.destination_company);
  swap(a.destination_address, b.destination_address);
  swap(a.order_company, b.order_company);
  swap(a.main_vichele, b.main_vichele);
  swap(a.behind_vichele, b.behind_vichele);
  swap(a.stuff_name, b.stuff_name);
  swap(a.register_timestamp, b.register_timestamp);
  swap(a.register_number, b.register_number);
  swap(a.enter_location, b.enter_location);
  swap(a.is_registered, b.is_registered);
  swap(a.__isset, b.__isset);
}

today_driver_info::today_driver_info(const today_driver_info& other56) {
  id = other56.id;
  destination_company = other56.destination_company;
  destination_address = other56.destination_address;
  order_company = other56.order_company;
  main_vichele = other56.main_vichele;
  behind_vichele = other56.behind_vichele;
  stuff_name = other56.stuff_name;
  register_timestamp = other56.register_timestamp;
  register_number = other56.register_number;
  enter_location = other56.enter_location;
  is_registered = other56.is_registered;
  __isset = other56.__isset;
}
today_driver_info& today_driver_info::operator=(const today_driver_info& other57) {
  id = other57.id;
  destination_company = other57.destination_company;
  destination_address = other57.destination_address;
  order_company = other57.order_company;
  main_vichele = other57.main_vichele;
  behind_vichele = other57.behind_vichele;
  stuff_name = other57.stuff_name;
  register_timestamp = other57.register_timestamp;
  register_number = other57.register_number;
  enter_location = other57.enter_location;
  is_registered = other57.is_registered;
  __isset = other57.__isset;
  return *this;
}
void today_driver_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "today_driver_info(";
  out << "id=" << to_string(id);
  out << ", " << "destination_company=" << to_string(destination_company);
  out << ", " << "destination_address=" << to_string(destination_address);
  out << ", " << "order_company=" << to_string(order_company);
  out << ", " << "main_vichele=" << to_string(main_vichele);
  out << ", " << "behind_vichele=" << to_string(behind_vichele);
  out << ", " << "stuff_name=" << to_string(stuff_name);
  out << ", " << "register_timestamp=" << to_string(register_timestamp);
  out << ", " << "register_number=" << to_string(register_number);
  out << ", " << "enter_location=" << to_string(enter_location);
  out << ", " << "is_registered=" << to_string(is_registered);
  out << ")";
}


driver_detail_info::~driver_detail_info() noexcept {
}


void driver_detail_info::__set_phone(const std::string& val) {
  this->phone = val;
}

void driver_detail_info::__set_id(const std::string& val) {
  this->id = val;
}
std::ostream& operator<<(std::ostream& out, const driver_detail_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t driver_detail_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t driver_detail_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("driver_detail_info");

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(driver_detail_info &a, driver_detail_info &b) {
  using ::std::swap;
  swap(a.phone, b.phone);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

driver_detail_info::driver_detail_info(const driver_detail_info& other58) {
  phone = other58.phone;
  id = other58.id;
  __isset = other58.__isset;
}
driver_detail_info& driver_detail_info::operator=(const driver_detail_info& other59) {
  phone = other59.phone;
  id = other59.id;
  __isset = other59.__isset;
  return *this;
}
void driver_detail_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "driver_detail_info(";
  out << "phone=" << to_string(phone);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


api_extra_transformation::~api_extra_transformation() noexcept {
}


void api_extra_transformation::__set_driver_name(const std::string& val) {
  this->driver_name = val;
}

void api_extra_transformation::__set_driver_phone(const std::string& val) {
  this->driver_phone = val;
}

void api_extra_transformation::__set_driver_id(const std::string& val) {
  this->driver_id = val;
}
std::ostream& operator<<(std::ostream& out, const api_extra_transformation& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t api_extra_transformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_name);
          this->__isset.driver_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_phone);
          this->__isset.driver_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_id);
          this->__isset.driver_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t api_extra_transformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("api_extra_transformation");

  xfer += oprot->writeFieldBegin("driver_name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->driver_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_phone", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->driver_phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_id", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->driver_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(api_extra_transformation &a, api_extra_transformation &b) {
  using ::std::swap;
  swap(a.driver_name, b.driver_name);
  swap(a.driver_phone, b.driver_phone);
  swap(a.driver_id, b.driver_id);
  swap(a.__isset, b.__isset);
}

api_extra_transformation::api_extra_transformation(const api_extra_transformation& other60) {
  driver_name = other60.driver_name;
  driver_phone = other60.driver_phone;
  driver_id = other60.driver_id;
  __isset = other60.__isset;
}
api_extra_transformation& api_extra_transformation::operator=(const api_extra_transformation& other61) {
  driver_name = other61.driver_name;
  driver_phone = other61.driver_phone;
  driver_id = other61.driver_id;
  __isset = other61.__isset;
  return *this;
}
void api_extra_transformation::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "api_extra_transformation(";
  out << "driver_name=" << to_string(driver_name);
  out << ", " << "driver_phone=" << to_string(driver_phone);
  out << ", " << "driver_id=" << to_string(driver_id);
  out << ")";
}


api_transformation_info::~api_transformation_info() noexcept {
}


void api_transformation_info::__set_id(const int64_t val) {
  this->id = val;
}

void api_transformation_info::__set_main_vichele_number(const std::string& val) {
  this->main_vichele_number = val;
}

void api_transformation_info::__set_behind_vichele_number(const std::string& val) {
  this->behind_vichele_number = val;
}

void api_transformation_info::__set_stuff_name(const std::string& val) {
  this->stuff_name = val;
}

void api_transformation_info::__set_enter_count(const double val) {
  this->enter_count = val;
}

void api_transformation_info::__set_exit_count(const double val) {
  this->exit_count = val;
}

void api_transformation_info::__set_company_name(const std::string& val) {
  this->company_name = val;
}

void api_transformation_info::__set_extra_info(const api_extra_transformation& val) {
  this->extra_info = val;
}

void api_transformation_info::__set_is_sale(const bool val) {
  this->is_sale = val;
}
std::ostream& operator<<(std::ostream& out, const api_transformation_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t api_transformation_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->main_vichele_number);
          this->__isset.main_vichele_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->behind_vichele_number);
          this->__isset.behind_vichele_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuff_name);
          this->__isset.stuff_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->enter_count);
          this->__isset.enter_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->exit_count);
          this->__isset.exit_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company_name);
          this->__isset.company_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->extra_info.read(iprot);
          this->__isset.extra_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->is_sale);
          this->__isset.is_sale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t api_transformation_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("api_transformation_info");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("main_vichele_number", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->main_vichele_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("behind_vichele_number", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->behind_vichele_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stuff_name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->stuff_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enter_count", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->enter_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("exit_count", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->exit_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company_name", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->company_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("extra_info", ::apache::thrift::protocol::T_STRUCT, 8);
  xfer += this->extra_info.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("is_sale", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->is_sale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(api_transformation_info &a, api_transformation_info &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.main_vichele_number, b.main_vichele_number);
  swap(a.behind_vichele_number, b.behind_vichele_number);
  swap(a.stuff_name, b.stuff_name);
  swap(a.enter_count, b.enter_count);
  swap(a.exit_count, b.exit_count);
  swap(a.company_name, b.company_name);
  swap(a.extra_info, b.extra_info);
  swap(a.is_sale, b.is_sale);
  swap(a.__isset, b.__isset);
}

api_transformation_info::api_transformation_info(const api_transformation_info& other62) {
  id = other62.id;
  main_vichele_number = other62.main_vichele_number;
  behind_vichele_number = other62.behind_vichele_number;
  stuff_name = other62.stuff_name;
  enter_count = other62.enter_count;
  exit_count = other62.exit_count;
  company_name = other62.company_name;
  extra_info = other62.extra_info;
  is_sale = other62.is_sale;
  __isset = other62.__isset;
}
api_transformation_info& api_transformation_info::operator=(const api_transformation_info& other63) {
  id = other63.id;
  main_vichele_number = other63.main_vichele_number;
  behind_vichele_number = other63.behind_vichele_number;
  stuff_name = other63.stuff_name;
  enter_count = other63.enter_count;
  exit_count = other63.exit_count;
  company_name = other63.company_name;
  extra_info = other63.extra_info;
  is_sale = other63.is_sale;
  __isset = other63.__isset;
  return *this;
}
void api_transformation_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "api_transformation_info(";
  out << "id=" << to_string(id);
  out << ", " << "main_vichele_number=" << to_string(main_vichele_number);
  out << ", " << "behind_vichele_number=" << to_string(behind_vichele_number);
  out << ", " << "stuff_name=" << to_string(stuff_name);
  out << ", " << "enter_count=" << to_string(enter_count);
  out << ", " << "exit_count=" << to_string(exit_count);
  out << ", " << "company_name=" << to_string(company_name);
  out << ", " << "extra_info=" << to_string(extra_info);
  out << ", " << "is_sale=" << to_string(is_sale);
  out << ")";
}


call_vehicle_req::~call_vehicle_req() noexcept {
}


void call_vehicle_req::__set_plateNo(const std::string& val) {
  this->plateNo = val;
}

void call_vehicle_req::__set_driverName(const std::string& val) {
  this->driverName = val;
}

void call_vehicle_req::__set_index(const int64_t val) {
  this->index = val;
}

void call_vehicle_req::__set_stationName(const std::string& val) {
  this->stationName = val;
}
std::ostream& operator<<(std::ostream& out, const call_vehicle_req& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t call_vehicle_req::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plateNo);
          this->__isset.plateNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driverName);
          this->__isset.driverName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->index);
          this->__isset.index = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stationName);
          this->__isset.stationName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t call_vehicle_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("call_vehicle_req");

  xfer += oprot->writeFieldBegin("plateNo", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->plateNo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->driverName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("index", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->index);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stationName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->stationName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(call_vehicle_req &a, call_vehicle_req &b) {
  using ::std::swap;
  swap(a.plateNo, b.plateNo);
  swap(a.driverName, b.driverName);
  swap(a.index, b.index);
  swap(a.stationName, b.stationName);
  swap(a.__isset, b.__isset);
}

call_vehicle_req::call_vehicle_req(const call_vehicle_req& other64) {
  plateNo = other64.plateNo;
  driverName = other64.driverName;
  index = other64.index;
  stationName = other64.stationName;
  __isset = other64.__isset;
}
call_vehicle_req& call_vehicle_req::operator=(const call_vehicle_req& other65) {
  plateNo = other65.plateNo;
  driverName = other65.driverName;
  index = other65.index;
  stationName = other65.stationName;
  __isset = other65.__isset;
  return *this;
}
void call_vehicle_req::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "call_vehicle_req(";
  out << "plateNo=" << to_string(plateNo);
  out << ", " << "driverName=" << to_string(driverName);
  out << ", " << "index=" << to_string(index);
  out << ", " << "stationName=" << to_string(stationName);
  out << ")";
}


meta_stuff_info::~meta_stuff_info() noexcept {
}


void meta_stuff_info::__set_stuffId(const std::string& val) {
  this->stuffId = val;
}

void meta_stuff_info::__set_stuffName(const std::string& val) {
  this->stuffName = val;
}

void meta_stuff_info::__set_weight(const double val) {
  this->weight = val;
}
std::ostream& operator<<(std::ostream& out, const meta_stuff_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t meta_stuff_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuffId);
          this->__isset.stuffId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuffName);
          this->__isset.stuffName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->weight);
          this->__isset.weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t meta_stuff_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("meta_stuff_info");

  xfer += oprot->writeFieldBegin("stuffId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->stuffId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stuffName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->stuffName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("weight", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(meta_stuff_info &a, meta_stuff_info &b) {
  using ::std::swap;
  swap(a.stuffId, b.stuffId);
  swap(a.stuffName, b.stuffName);
  swap(a.weight, b.weight);
  swap(a.__isset, b.__isset);
}

meta_stuff_info::meta_stuff_info(const meta_stuff_info& other66) {
  stuffId = other66.stuffId;
  stuffName = other66.stuffName;
  weight = other66.weight;
  __isset = other66.__isset;
}
meta_stuff_info& meta_stuff_info::operator=(const meta_stuff_info& other67) {
  stuffId = other67.stuffId;
  stuffName = other67.stuffName;
  weight = other67.weight;
  __isset = other67.__isset;
  return *this;
}
void meta_stuff_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "meta_stuff_info(";
  out << "stuffId=" << to_string(stuffId);
  out << ", " << "stuffName=" << to_string(stuffName);
  out << ", " << "weight=" << to_string(weight);
  out << ")";
}


vehicle_info_resp::~vehicle_info_resp() noexcept {
}


void vehicle_info_resp::__set_id(const std::string& val) {
  this->id = val;
}

void vehicle_info_resp::__set_plateNo(const std::string& val) {
  this->plateNo = val;
}

void vehicle_info_resp::__set_backPlateNo(const std::string& val) {
  this->backPlateNo = val;
}

void vehicle_info_resp::__set_stuffName(const std::string& val) {
  this->stuffName = val;
}

void vehicle_info_resp::__set_stuffId(const std::string& val) {
  this->stuffId = val;
}

void vehicle_info_resp::__set_enterWeight(const double val) {
  this->enterWeight = val;
}

void vehicle_info_resp::__set_companyName(const std::string& val) {
  this->companyName = val;
}

void vehicle_info_resp::__set_driverName(const std::string& val) {
  this->driverName = val;
}

void vehicle_info_resp::__set_isSale(const bool val) {
  this->isSale = val;
}

void vehicle_info_resp::__set_price(const double val) {
  this->price = val;
}

void vehicle_info_resp::__set_customerId(const std::string& val) {
  this->customerId = val;
}

void vehicle_info_resp::__set_orderNo(const std::string& val) {
  this->orderNo = val;
}

void vehicle_info_resp::__set_multiStuff(const std::vector<meta_stuff_info> & val) {
  this->multiStuff = val;
}

void vehicle_info_resp::__set_isMulti(const bool val) {
  this->isMulti = val;
}

void vehicle_info_resp::__set_createTime(const std::string& val) {
  this->createTime = val;
}

void vehicle_info_resp::__set_driverPhone(const std::string& val) {
  this->driverPhone = val;
}

void vehicle_info_resp::__set_driverId(const std::string& val) {
  this->driverId = val;
}

void vehicle_info_resp::__set_supplierName(const std::string& val) {
  this->supplierName = val;
}

void vehicle_info_resp::__set_supplierId(const std::string& val) {
  this->supplierId = val;
}

void vehicle_info_resp::__set_vehicleTeamName(const std::string& val) {
  this->vehicleTeamName = val;
}

void vehicle_info_resp::__set_vehicleTeamId(const std::string& val) {
  this->vehicleTeamId = val;
}
std::ostream& operator<<(std::ostream& out, const vehicle_info_resp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vehicle_info_resp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plateNo);
          this->__isset.plateNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->backPlateNo);
          this->__isset.backPlateNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuffName);
          this->__isset.stuffName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuffId);
          this->__isset.stuffId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->enterWeight);
          this->__isset.enterWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->companyName);
          this->__isset.companyName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driverName);
          this->__isset.driverName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isSale);
          this->__isset.isSale = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customerId);
          this->__isset.customerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->orderNo);
          this->__isset.orderNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->multiStuff.clear();
            uint32_t _size68;
            ::apache::thrift::protocol::TType _etype71;
            xfer += iprot->readListBegin(_etype71, _size68);
            this->multiStuff.resize(_size68);
            uint32_t _i72;
            for (_i72 = 0; _i72 < _size68; ++_i72)
            {
              xfer += this->multiStuff[_i72].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.multiStuff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isMulti);
          this->__isset.isMulti = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->createTime);
          this->__isset.createTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driverPhone);
          this->__isset.driverPhone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driverId);
          this->__isset.driverId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->supplierName);
          this->__isset.supplierName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->supplierId);
          this->__isset.supplierId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vehicleTeamName);
          this->__isset.vehicleTeamName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->vehicleTeamId);
          this->__isset.vehicleTeamId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t vehicle_info_resp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vehicle_info_resp");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plateNo", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->plateNo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("backPlateNo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->backPlateNo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stuffName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->stuffName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stuffId", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->stuffId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("enterWeight", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->enterWeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("companyName", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->companyName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverName", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->driverName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isSale", ::apache::thrift::protocol::T_BOOL, 9);
  xfer += oprot->writeBool(this->isSale);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerId", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->customerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("orderNo", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->orderNo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("multiStuff", ::apache::thrift::protocol::T_LIST, 13);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->multiStuff.size()));
    std::vector<meta_stuff_info> ::const_iterator _iter73;
    for (_iter73 = this->multiStuff.begin(); _iter73 != this->multiStuff.end(); ++_iter73)
    {
      xfer += (*_iter73).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("isMulti", ::apache::thrift::protocol::T_BOOL, 14);
  xfer += oprot->writeBool(this->isMulti);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("createTime", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->createTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverPhone", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->driverPhone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driverId", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->driverId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supplierName", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->supplierName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("supplierId", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->supplierId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleTeamName", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->vehicleTeamName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vehicleTeamId", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->vehicleTeamId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vehicle_info_resp &a, vehicle_info_resp &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.plateNo, b.plateNo);
  swap(a.backPlateNo, b.backPlateNo);
  swap(a.stuffName, b.stuffName);
  swap(a.stuffId, b.stuffId);
  swap(a.enterWeight, b.enterWeight);
  swap(a.companyName, b.companyName);
  swap(a.driverName, b.driverName);
  swap(a.isSale, b.isSale);
  swap(a.price, b.price);
  swap(a.customerId, b.customerId);
  swap(a.orderNo, b.orderNo);
  swap(a.multiStuff, b.multiStuff);
  swap(a.isMulti, b.isMulti);
  swap(a.createTime, b.createTime);
  swap(a.driverPhone, b.driverPhone);
  swap(a.driverId, b.driverId);
  swap(a.supplierName, b.supplierName);
  swap(a.supplierId, b.supplierId);
  swap(a.vehicleTeamName, b.vehicleTeamName);
  swap(a.vehicleTeamId, b.vehicleTeamId);
  swap(a.__isset, b.__isset);
}

vehicle_info_resp::vehicle_info_resp(const vehicle_info_resp& other74) {
  id = other74.id;
  plateNo = other74.plateNo;
  backPlateNo = other74.backPlateNo;
  stuffName = other74.stuffName;
  stuffId = other74.stuffId;
  enterWeight = other74.enterWeight;
  companyName = other74.companyName;
  driverName = other74.driverName;
  isSale = other74.isSale;
  price = other74.price;
  customerId = other74.customerId;
  orderNo = other74.orderNo;
  multiStuff = other74.multiStuff;
  isMulti = other74.isMulti;
  createTime = other74.createTime;
  driverPhone = other74.driverPhone;
  driverId = other74.driverId;
  supplierName = other74.supplierName;
  supplierId = other74.supplierId;
  vehicleTeamName = other74.vehicleTeamName;
  vehicleTeamId = other74.vehicleTeamId;
  __isset = other74.__isset;
}
vehicle_info_resp& vehicle_info_resp::operator=(const vehicle_info_resp& other75) {
  id = other75.id;
  plateNo = other75.plateNo;
  backPlateNo = other75.backPlateNo;
  stuffName = other75.stuffName;
  stuffId = other75.stuffId;
  enterWeight = other75.enterWeight;
  companyName = other75.companyName;
  driverName = other75.driverName;
  isSale = other75.isSale;
  price = other75.price;
  customerId = other75.customerId;
  orderNo = other75.orderNo;
  multiStuff = other75.multiStuff;
  isMulti = other75.isMulti;
  createTime = other75.createTime;
  driverPhone = other75.driverPhone;
  driverId = other75.driverId;
  supplierName = other75.supplierName;
  supplierId = other75.supplierId;
  vehicleTeamName = other75.vehicleTeamName;
  vehicleTeamId = other75.vehicleTeamId;
  __isset = other75.__isset;
  return *this;
}
void vehicle_info_resp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vehicle_info_resp(";
  out << "id=" << to_string(id);
  out << ", " << "plateNo=" << to_string(plateNo);
  out << ", " << "backPlateNo=" << to_string(backPlateNo);
  out << ", " << "stuffName=" << to_string(stuffName);
  out << ", " << "stuffId=" << to_string(stuffId);
  out << ", " << "enterWeight=" << to_string(enterWeight);
  out << ", " << "companyName=" << to_string(companyName);
  out << ", " << "driverName=" << to_string(driverName);
  out << ", " << "isSale=" << to_string(isSale);
  out << ", " << "price=" << to_string(price);
  out << ", " << "customerId=" << to_string(customerId);
  out << ", " << "orderNo=" << to_string(orderNo);
  out << ", " << "multiStuff=" << to_string(multiStuff);
  out << ", " << "isMulti=" << to_string(isMulti);
  out << ", " << "createTime=" << to_string(createTime);
  out << ", " << "driverPhone=" << to_string(driverPhone);
  out << ", " << "driverId=" << to_string(driverId);
  out << ", " << "supplierName=" << to_string(supplierName);
  out << ", " << "supplierId=" << to_string(supplierId);
  out << ", " << "vehicleTeamName=" << to_string(vehicleTeamName);
  out << ", " << "vehicleTeamId=" << to_string(vehicleTeamId);
  out << ")";
}


push_weight_req::~push_weight_req() noexcept {
}


void push_weight_req::__set_id(const std::string& val) {
  this->id = val;
}

void push_weight_req::__set_plateNo(const std::string& val) {
  this->plateNo = val;
}

void push_weight_req::__set_customerId(const std::string& val) {
  this->customerId = val;
}

void push_weight_req::__set_customerName(const std::string& val) {
  this->customerName = val;
}

void push_weight_req::__set_stuffName(const std::string& val) {
  this->stuffName = val;
}

void push_weight_req::__set_pWeight(const double val) {
  this->pWeight = val;
}

void push_weight_req::__set_mWeight(const double val) {
  this->mWeight = val;
}

void push_weight_req::__set_pTime(const std::string& val) {
  this->pTime = val;
}

void push_weight_req::__set_mTime(const std::string& val) {
  this->mTime = val;
}

void push_weight_req::__set_jWeight(const double val) {
  this->jWeight = val;
}
std::ostream& operator<<(std::ostream& out, const push_weight_req& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t push_weight_req::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plateNo);
          this->__isset.plateNo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customerId);
          this->__isset.customerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customerName);
          this->__isset.customerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuffName);
          this->__isset.stuffName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->pWeight);
          this->__isset.pWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->mWeight);
          this->__isset.mWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pTime);
          this->__isset.pTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mTime);
          this->__isset.mTime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->jWeight);
          this->__isset.jWeight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t push_weight_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("push_weight_req");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plateNo", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->plateNo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerId", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->customerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerName", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->customerName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stuffName", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->stuffName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pWeight", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->pWeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mWeight", ::apache::thrift::protocol::T_DOUBLE, 7);
  xfer += oprot->writeDouble(this->mWeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pTime", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->pTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mTime", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->mTime);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("jWeight", ::apache::thrift::protocol::T_DOUBLE, 10);
  xfer += oprot->writeDouble(this->jWeight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(push_weight_req &a, push_weight_req &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.plateNo, b.plateNo);
  swap(a.customerId, b.customerId);
  swap(a.customerName, b.customerName);
  swap(a.stuffName, b.stuffName);
  swap(a.pWeight, b.pWeight);
  swap(a.mWeight, b.mWeight);
  swap(a.pTime, b.pTime);
  swap(a.mTime, b.mTime);
  swap(a.jWeight, b.jWeight);
  swap(a.__isset, b.__isset);
}

push_weight_req::push_weight_req(const push_weight_req& other76) {
  id = other76.id;
  plateNo = other76.plateNo;
  customerId = other76.customerId;
  customerName = other76.customerName;
  stuffName = other76.stuffName;
  pWeight = other76.pWeight;
  mWeight = other76.mWeight;
  pTime = other76.pTime;
  mTime = other76.mTime;
  jWeight = other76.jWeight;
  __isset = other76.__isset;
}
push_weight_req& push_weight_req::operator=(const push_weight_req& other77) {
  id = other77.id;
  plateNo = other77.plateNo;
  customerId = other77.customerId;
  customerName = other77.customerName;
  stuffName = other77.stuffName;
  pWeight = other77.pWeight;
  mWeight = other77.mWeight;
  pTime = other77.pTime;
  mTime = other77.mTime;
  jWeight = other77.jWeight;
  __isset = other77.__isset;
  return *this;
}
void push_weight_req::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "push_weight_req(";
  out << "id=" << to_string(id);
  out << ", " << "plateNo=" << to_string(plateNo);
  out << ", " << "customerId=" << to_string(customerId);
  out << ", " << "customerName=" << to_string(customerName);
  out << ", " << "stuffName=" << to_string(stuffName);
  out << ", " << "pWeight=" << to_string(pWeight);
  out << ", " << "mWeight=" << to_string(mWeight);
  out << ", " << "pTime=" << to_string(pTime);
  out << ", " << "mTime=" << to_string(mTime);
  out << ", " << "jWeight=" << to_string(jWeight);
  out << ")";
}


push_base_req::~push_base_req() noexcept {
}


void push_base_req::__set_id(const std::string& val) {
  this->id = val;
}

void push_base_req::__set_name(const std::string& val) {
  this->name = val;
}

void push_base_req::__set_pid(const std::string& val) {
  this->pid = val;
}

void push_base_req::__set_unit(const std::string& val) {
  this->unit = val;
}

void push_base_req::__set_type(const std::string& val) {
  this->type = val;
}

void push_base_req::__set_code(const std::string& val) {
  this->code = val;
}
std::ostream& operator<<(std::ostream& out, const push_base_req& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t push_base_req::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          this->__isset.pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->unit);
          this->__isset.unit = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->code);
          this->__isset.code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t push_base_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("push_base_req");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("unit", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->unit);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("code", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(push_base_req &a, push_base_req &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.name, b.name);
  swap(a.pid, b.pid);
  swap(a.unit, b.unit);
  swap(a.type, b.type);
  swap(a.code, b.code);
  swap(a.__isset, b.__isset);
}

push_base_req::push_base_req(const push_base_req& other78) {
  id = other78.id;
  name = other78.name;
  pid = other78.pid;
  unit = other78.unit;
  type = other78.type;
  code = other78.code;
  __isset = other78.__isset;
}
push_base_req& push_base_req::operator=(const push_base_req& other79) {
  id = other79.id;
  name = other79.name;
  pid = other79.pid;
  unit = other79.unit;
  type = other79.type;
  code = other79.code;
  __isset = other79.__isset;
  return *this;
}
void push_base_req::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "push_base_req(";
  out << "id=" << to_string(id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "pid=" << to_string(pid);
  out << ", " << "unit=" << to_string(unit);
  out << ", " << "type=" << to_string(type);
  out << ", " << "code=" << to_string(code);
  out << ")";
}


push_balance_req::~push_balance_req() noexcept {
}


void push_balance_req::__set_customerId(const std::string& val) {
  this->customerId = val;
}

void push_balance_req::__set_customerName(const std::string& val) {
  this->customerName = val;
}

void push_balance_req::__set_balance(const double val) {
  this->balance = val;
}
std::ostream& operator<<(std::ostream& out, const push_balance_req& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t push_balance_req::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customerId);
          this->__isset.customerId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->customerName);
          this->__isset.customerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->balance);
          this->__isset.balance = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t push_balance_req::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("push_balance_req");

  xfer += oprot->writeFieldBegin("customerId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->customerId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("customerName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->customerName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("balance", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->balance);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(push_balance_req &a, push_balance_req &b) {
  using ::std::swap;
  swap(a.customerId, b.customerId);
  swap(a.customerName, b.customerName);
  swap(a.balance, b.balance);
  swap(a.__isset, b.__isset);
}

push_balance_req::push_balance_req(const push_balance_req& other80) {
  customerId = other80.customerId;
  customerName = other80.customerName;
  balance = other80.balance;
  __isset = other80.__isset;
}
push_balance_req& push_balance_req::operator=(const push_balance_req& other81) {
  customerId = other81.customerId;
  customerName = other81.customerName;
  balance = other81.balance;
  __isset = other81.__isset;
  return *this;
}
void push_balance_req::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "push_balance_req(";
  out << "customerId=" << to_string(customerId);
  out << ", " << "customerName=" << to_string(customerName);
  out << ", " << "balance=" << to_string(balance);
  out << ")";
}


vichele_stay_alone::~vichele_stay_alone() noexcept {
}


void vichele_stay_alone::__set_id(const int64_t val) {
  this->id = val;
}

void vichele_stay_alone::__set_stuff_name(const std::string& val) {
  this->stuff_name = val;
}

void vichele_stay_alone::__set_company_name(const std::string& val) {
  this->company_name = val;
}

void vichele_stay_alone::__set_main_vichele_number(const std::string& val) {
  this->main_vichele_number = val;
}

void vichele_stay_alone::__set_behind_vichele_number(const std::string& val) {
  this->behind_vichele_number = val;
}

void vichele_stay_alone::__set_count(const double val) {
  this->count = val;
}

void vichele_stay_alone::__set_comment(const std::string& val) {
  this->comment = val;
}

void vichele_stay_alone::__set_date(const std::string& val) {
  this->date = val;
}

void vichele_stay_alone::__set_destination(const std::string& val) {
  this->destination = val;
}

void vichele_stay_alone::__set_status(const int64_t val) {
  this->status = val;
}

void vichele_stay_alone::__set_creator_name(const std::string& val) {
  this->creator_name = val;
}

void vichele_stay_alone::__set_creator_phone(const std::string& val) {
  this->creator_phone = val;
}

void vichele_stay_alone::__set_repeated(const bool val) {
  this->repeated = val;
}

void vichele_stay_alone::__set_driver_name(const std::string& val) {
  this->driver_name = val;
}

void vichele_stay_alone::__set_driver_phone(const std::string& val) {
  this->driver_phone = val;
}

void vichele_stay_alone::__set_driver_id(const std::string& val) {
  this->driver_id = val;
}

void vichele_stay_alone::__set_transfor_company(const std::string& val) {
  this->transfor_company = val;
}

void vichele_stay_alone::__set_p_time(const std::string& val) {
  this->p_time = val;
}

void vichele_stay_alone::__set_m_time(const std::string& val) {
  this->m_time = val;
}

void vichele_stay_alone::__set_p_weight(const double val) {
  this->p_weight = val;
}

void vichele_stay_alone::__set_m_weight(const double val) {
  this->m_weight = val;
}

void vichele_stay_alone::__set_j_weight(const double val) {
  this->j_weight = val;
}
std::ostream& operator<<(std::ostream& out, const vichele_stay_alone& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vichele_stay_alone::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stuff_name);
          this->__isset.stuff_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company_name);
          this->__isset.company_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->main_vichele_number);
          this->__isset.main_vichele_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->behind_vichele_number);
          this->__isset.behind_vichele_number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->date);
          this->__isset.date = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->destination);
          this->__isset.destination = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->creator_name);
          this->__isset.creator_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->creator_phone);
          this->__isset.creator_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->repeated);
          this->__isset.repeated = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_name);
          this->__isset.driver_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_phone);
          this->__isset.driver_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_id);
          this->__isset.driver_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->transfor_company);
          this->__isset.transfor_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->p_time);
          this->__isset.p_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->m_time);
          this->__isset.m_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->p_weight);
          this->__isset.p_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->m_weight);
          this->__isset.m_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->j_weight);
          this->__isset.j_weight = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t vichele_stay_alone::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vichele_stay_alone");

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("stuff_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->stuff_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->company_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("main_vichele_number", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->main_vichele_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("behind_vichele_number", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->behind_vichele_number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("date", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->date);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("destination", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->destination);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creator_name", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->creator_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("creator_phone", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->creator_phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("repeated", ::apache::thrift::protocol::T_BOOL, 13);
  xfer += oprot->writeBool(this->repeated);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_name", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->driver_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_phone", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->driver_phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_id", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->driver_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("transfor_company", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->transfor_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_time", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->p_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m_time", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->m_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("p_weight", ::apache::thrift::protocol::T_DOUBLE, 20);
  xfer += oprot->writeDouble(this->p_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("m_weight", ::apache::thrift::protocol::T_DOUBLE, 21);
  xfer += oprot->writeDouble(this->m_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("j_weight", ::apache::thrift::protocol::T_DOUBLE, 22);
  xfer += oprot->writeDouble(this->j_weight);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vichele_stay_alone &a, vichele_stay_alone &b) {
  using ::std::swap;
  swap(a.id, b.id);
  swap(a.stuff_name, b.stuff_name);
  swap(a.company_name, b.company_name);
  swap(a.main_vichele_number, b.main_vichele_number);
  swap(a.behind_vichele_number, b.behind_vichele_number);
  swap(a.count, b.count);
  swap(a.comment, b.comment);
  swap(a.date, b.date);
  swap(a.destination, b.destination);
  swap(a.status, b.status);
  swap(a.creator_name, b.creator_name);
  swap(a.creator_phone, b.creator_phone);
  swap(a.repeated, b.repeated);
  swap(a.driver_name, b.driver_name);
  swap(a.driver_phone, b.driver_phone);
  swap(a.driver_id, b.driver_id);
  swap(a.transfor_company, b.transfor_company);
  swap(a.p_time, b.p_time);
  swap(a.m_time, b.m_time);
  swap(a.p_weight, b.p_weight);
  swap(a.m_weight, b.m_weight);
  swap(a.j_weight, b.j_weight);
  swap(a.__isset, b.__isset);
}

vichele_stay_alone::vichele_stay_alone(const vichele_stay_alone& other82) {
  id = other82.id;
  stuff_name = other82.stuff_name;
  company_name = other82.company_name;
  main_vichele_number = other82.main_vichele_number;
  behind_vichele_number = other82.behind_vichele_number;
  count = other82.count;
  comment = other82.comment;
  date = other82.date;
  destination = other82.destination;
  status = other82.status;
  creator_name = other82.creator_name;
  creator_phone = other82.creator_phone;
  repeated = other82.repeated;
  driver_name = other82.driver_name;
  driver_phone = other82.driver_phone;
  driver_id = other82.driver_id;
  transfor_company = other82.transfor_company;
  p_time = other82.p_time;
  m_time = other82.m_time;
  p_weight = other82.p_weight;
  m_weight = other82.m_weight;
  j_weight = other82.j_weight;
  __isset = other82.__isset;
}
vichele_stay_alone& vichele_stay_alone::operator=(const vichele_stay_alone& other83) {
  id = other83.id;
  stuff_name = other83.stuff_name;
  company_name = other83.company_name;
  main_vichele_number = other83.main_vichele_number;
  behind_vichele_number = other83.behind_vichele_number;
  count = other83.count;
  comment = other83.comment;
  date = other83.date;
  destination = other83.destination;
  status = other83.status;
  creator_name = other83.creator_name;
  creator_phone = other83.creator_phone;
  repeated = other83.repeated;
  driver_name = other83.driver_name;
  driver_phone = other83.driver_phone;
  driver_id = other83.driver_id;
  transfor_company = other83.transfor_company;
  p_time = other83.p_time;
  m_time = other83.m_time;
  p_weight = other83.p_weight;
  m_weight = other83.m_weight;
  j_weight = other83.j_weight;
  __isset = other83.__isset;
  return *this;
}
void vichele_stay_alone::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vichele_stay_alone(";
  out << "id=" << to_string(id);
  out << ", " << "stuff_name=" << to_string(stuff_name);
  out << ", " << "company_name=" << to_string(company_name);
  out << ", " << "main_vichele_number=" << to_string(main_vichele_number);
  out << ", " << "behind_vichele_number=" << to_string(behind_vichele_number);
  out << ", " << "count=" << to_string(count);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "date=" << to_string(date);
  out << ", " << "destination=" << to_string(destination);
  out << ", " << "status=" << to_string(status);
  out << ", " << "creator_name=" << to_string(creator_name);
  out << ", " << "creator_phone=" << to_string(creator_phone);
  out << ", " << "repeated=" << to_string(repeated);
  out << ", " << "driver_name=" << to_string(driver_name);
  out << ", " << "driver_phone=" << to_string(driver_phone);
  out << ", " << "driver_id=" << to_string(driver_id);
  out << ", " << "transfor_company=" << to_string(transfor_company);
  out << ", " << "p_time=" << to_string(p_time);
  out << ", " << "m_time=" << to_string(m_time);
  out << ", " << "p_weight=" << to_string(p_weight);
  out << ", " << "m_weight=" << to_string(m_weight);
  out << ", " << "j_weight=" << to_string(j_weight);
  out << ")";
}


silent_user_info::~silent_user_info() noexcept {
}


void silent_user_info::__set_name(const std::string& val) {
  this->name = val;
}

void silent_user_info::__set_phone(const std::string& val) {
  this->phone = val;
}
std::ostream& operator<<(std::ostream& out, const silent_user_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t silent_user_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t silent_user_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("silent_user_info");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(silent_user_info &a, silent_user_info &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.phone, b.phone);
  swap(a.__isset, b.__isset);
}

silent_user_info::silent_user_info(const silent_user_info& other84) {
  name = other84.name;
  phone = other84.phone;
  __isset = other84.__isset;
}
silent_user_info& silent_user_info::operator=(const silent_user_info& other85) {
  name = other85.name;
  phone = other85.phone;
  __isset = other85.__isset;
  return *this;
}
void silent_user_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "silent_user_info(";
  out << "name=" << to_string(name);
  out << ", " << "phone=" << to_string(phone);
  out << ")";
}


