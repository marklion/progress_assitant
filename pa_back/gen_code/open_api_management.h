/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef open_api_management_H
#define open_api_management_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "idl_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class open_api_managementIf {
 public:
  virtual ~open_api_managementIf() {}
  virtual bool register_api_user(const std::string& company_name, const std::string& email, const std::string& password) = 0;
  virtual bool verify_email_code(const std::string& email, const std::string& code) = 0;
  virtual bool unregister_api_user(const std::string& email, const std::string& password) = 0;
  virtual void get_token(std::string& _return, const std::string& email, const std::string& password) = 0;
  virtual void get_today_transformation(std::vector<api_transformation_info> & _return, const std::string& token) = 0;
  virtual bool push_exit_count(const int64_t id, const double count, const bool is_sale, const std::string& token) = 0;
  virtual bool push_arrange(const int64_t id, const std::string& order, const bool is_sale, const std::string& location, const std::string& token) = 0;
  virtual bool proc_call_vehicle(const call_vehicle_req& _req, const std::string& token) = 0;
  virtual void proc_vehicle_info(vehicle_info_resp& _return, const std::string& plateNo, const std::string& driverId, const std::string& token) = 0;
  virtual void proc_all_vehicle_info(std::vector<vehicle_info_resp> & _return, const std::string& token) = 0;
};

class open_api_managementIfFactory {
 public:
  typedef open_api_managementIf Handler;

  virtual ~open_api_managementIfFactory() {}

  virtual open_api_managementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(open_api_managementIf* /* handler */) = 0;
};

class open_api_managementIfSingletonFactory : virtual public open_api_managementIfFactory {
 public:
  open_api_managementIfSingletonFactory(const ::std::shared_ptr<open_api_managementIf>& iface) : iface_(iface) {}
  virtual ~open_api_managementIfSingletonFactory() {}

  virtual open_api_managementIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(open_api_managementIf* /* handler */) {}

 protected:
  ::std::shared_ptr<open_api_managementIf> iface_;
};

class open_api_managementNull : virtual public open_api_managementIf {
 public:
  virtual ~open_api_managementNull() {}
  bool register_api_user(const std::string& /* company_name */, const std::string& /* email */, const std::string& /* password */) {
    bool _return = false;
    return _return;
  }
  bool verify_email_code(const std::string& /* email */, const std::string& /* code */) {
    bool _return = false;
    return _return;
  }
  bool unregister_api_user(const std::string& /* email */, const std::string& /* password */) {
    bool _return = false;
    return _return;
  }
  void get_token(std::string& /* _return */, const std::string& /* email */, const std::string& /* password */) {
    return;
  }
  void get_today_transformation(std::vector<api_transformation_info> & /* _return */, const std::string& /* token */) {
    return;
  }
  bool push_exit_count(const int64_t /* id */, const double /* count */, const bool /* is_sale */, const std::string& /* token */) {
    bool _return = false;
    return _return;
  }
  bool push_arrange(const int64_t /* id */, const std::string& /* order */, const bool /* is_sale */, const std::string& /* location */, const std::string& /* token */) {
    bool _return = false;
    return _return;
  }
  bool proc_call_vehicle(const call_vehicle_req& /* _req */, const std::string& /* token */) {
    bool _return = false;
    return _return;
  }
  void proc_vehicle_info(vehicle_info_resp& /* _return */, const std::string& /* plateNo */, const std::string& /* driverId */, const std::string& /* token */) {
    return;
  }
  void proc_all_vehicle_info(std::vector<vehicle_info_resp> & /* _return */, const std::string& /* token */) {
    return;
  }
};

typedef struct _open_api_management_register_api_user_args__isset {
  _open_api_management_register_api_user_args__isset() : company_name(false), email(false), password(false) {}
  bool company_name :1;
  bool email :1;
  bool password :1;
} _open_api_management_register_api_user_args__isset;

class open_api_management_register_api_user_args {
 public:

  open_api_management_register_api_user_args(const open_api_management_register_api_user_args&);
  open_api_management_register_api_user_args& operator=(const open_api_management_register_api_user_args&);
  open_api_management_register_api_user_args() : company_name(), email(), password() {
  }

  virtual ~open_api_management_register_api_user_args() noexcept;
  std::string company_name;
  std::string email;
  std::string password;

  _open_api_management_register_api_user_args__isset __isset;

  void __set_company_name(const std::string& val);

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const open_api_management_register_api_user_args & rhs) const
  {
    if (!(company_name == rhs.company_name))
      return false;
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const open_api_management_register_api_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_register_api_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_register_api_user_pargs {
 public:


  virtual ~open_api_management_register_api_user_pargs() noexcept;
  const std::string* company_name;
  const std::string* email;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_register_api_user_result__isset {
  _open_api_management_register_api_user_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_register_api_user_result__isset;

class open_api_management_register_api_user_result {
 public:

  open_api_management_register_api_user_result(const open_api_management_register_api_user_result&);
  open_api_management_register_api_user_result& operator=(const open_api_management_register_api_user_result&);
  open_api_management_register_api_user_result() : success(0) {
  }

  virtual ~open_api_management_register_api_user_result() noexcept;
  bool success;
  gen_exp e;

  _open_api_management_register_api_user_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_register_api_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_register_api_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_register_api_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_register_api_user_presult__isset {
  _open_api_management_register_api_user_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_register_api_user_presult__isset;

class open_api_management_register_api_user_presult {
 public:


  virtual ~open_api_management_register_api_user_presult() noexcept;
  bool* success;
  gen_exp e;

  _open_api_management_register_api_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _open_api_management_verify_email_code_args__isset {
  _open_api_management_verify_email_code_args__isset() : email(false), code(false) {}
  bool email :1;
  bool code :1;
} _open_api_management_verify_email_code_args__isset;

class open_api_management_verify_email_code_args {
 public:

  open_api_management_verify_email_code_args(const open_api_management_verify_email_code_args&);
  open_api_management_verify_email_code_args& operator=(const open_api_management_verify_email_code_args&);
  open_api_management_verify_email_code_args() : email(), code() {
  }

  virtual ~open_api_management_verify_email_code_args() noexcept;
  std::string email;
  std::string code;

  _open_api_management_verify_email_code_args__isset __isset;

  void __set_email(const std::string& val);

  void __set_code(const std::string& val);

  bool operator == (const open_api_management_verify_email_code_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const open_api_management_verify_email_code_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_verify_email_code_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_verify_email_code_pargs {
 public:


  virtual ~open_api_management_verify_email_code_pargs() noexcept;
  const std::string* email;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_verify_email_code_result__isset {
  _open_api_management_verify_email_code_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_verify_email_code_result__isset;

class open_api_management_verify_email_code_result {
 public:

  open_api_management_verify_email_code_result(const open_api_management_verify_email_code_result&);
  open_api_management_verify_email_code_result& operator=(const open_api_management_verify_email_code_result&);
  open_api_management_verify_email_code_result() : success(0) {
  }

  virtual ~open_api_management_verify_email_code_result() noexcept;
  bool success;
  gen_exp e;

  _open_api_management_verify_email_code_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_verify_email_code_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_verify_email_code_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_verify_email_code_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_verify_email_code_presult__isset {
  _open_api_management_verify_email_code_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_verify_email_code_presult__isset;

class open_api_management_verify_email_code_presult {
 public:


  virtual ~open_api_management_verify_email_code_presult() noexcept;
  bool* success;
  gen_exp e;

  _open_api_management_verify_email_code_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _open_api_management_unregister_api_user_args__isset {
  _open_api_management_unregister_api_user_args__isset() : email(false), password(false) {}
  bool email :1;
  bool password :1;
} _open_api_management_unregister_api_user_args__isset;

class open_api_management_unregister_api_user_args {
 public:

  open_api_management_unregister_api_user_args(const open_api_management_unregister_api_user_args&);
  open_api_management_unregister_api_user_args& operator=(const open_api_management_unregister_api_user_args&);
  open_api_management_unregister_api_user_args() : email(), password() {
  }

  virtual ~open_api_management_unregister_api_user_args() noexcept;
  std::string email;
  std::string password;

  _open_api_management_unregister_api_user_args__isset __isset;

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const open_api_management_unregister_api_user_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const open_api_management_unregister_api_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_unregister_api_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_unregister_api_user_pargs {
 public:


  virtual ~open_api_management_unregister_api_user_pargs() noexcept;
  const std::string* email;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_unregister_api_user_result__isset {
  _open_api_management_unregister_api_user_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_unregister_api_user_result__isset;

class open_api_management_unregister_api_user_result {
 public:

  open_api_management_unregister_api_user_result(const open_api_management_unregister_api_user_result&);
  open_api_management_unregister_api_user_result& operator=(const open_api_management_unregister_api_user_result&);
  open_api_management_unregister_api_user_result() : success(0) {
  }

  virtual ~open_api_management_unregister_api_user_result() noexcept;
  bool success;
  gen_exp e;

  _open_api_management_unregister_api_user_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_unregister_api_user_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_unregister_api_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_unregister_api_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_unregister_api_user_presult__isset {
  _open_api_management_unregister_api_user_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_unregister_api_user_presult__isset;

class open_api_management_unregister_api_user_presult {
 public:


  virtual ~open_api_management_unregister_api_user_presult() noexcept;
  bool* success;
  gen_exp e;

  _open_api_management_unregister_api_user_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _open_api_management_get_token_args__isset {
  _open_api_management_get_token_args__isset() : email(false), password(false) {}
  bool email :1;
  bool password :1;
} _open_api_management_get_token_args__isset;

class open_api_management_get_token_args {
 public:

  open_api_management_get_token_args(const open_api_management_get_token_args&);
  open_api_management_get_token_args& operator=(const open_api_management_get_token_args&);
  open_api_management_get_token_args() : email(), password() {
  }

  virtual ~open_api_management_get_token_args() noexcept;
  std::string email;
  std::string password;

  _open_api_management_get_token_args__isset __isset;

  void __set_email(const std::string& val);

  void __set_password(const std::string& val);

  bool operator == (const open_api_management_get_token_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(password == rhs.password))
      return false;
    return true;
  }
  bool operator != (const open_api_management_get_token_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_get_token_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_get_token_pargs {
 public:


  virtual ~open_api_management_get_token_pargs() noexcept;
  const std::string* email;
  const std::string* password;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_get_token_result__isset {
  _open_api_management_get_token_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_get_token_result__isset;

class open_api_management_get_token_result {
 public:

  open_api_management_get_token_result(const open_api_management_get_token_result&);
  open_api_management_get_token_result& operator=(const open_api_management_get_token_result&);
  open_api_management_get_token_result() : success() {
  }

  virtual ~open_api_management_get_token_result() noexcept;
  std::string success;
  gen_exp e;

  _open_api_management_get_token_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_get_token_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_get_token_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_get_token_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_get_token_presult__isset {
  _open_api_management_get_token_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_get_token_presult__isset;

class open_api_management_get_token_presult {
 public:


  virtual ~open_api_management_get_token_presult() noexcept;
  std::string* success;
  gen_exp e;

  _open_api_management_get_token_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _open_api_management_get_today_transformation_args__isset {
  _open_api_management_get_today_transformation_args__isset() : token(false) {}
  bool token :1;
} _open_api_management_get_today_transformation_args__isset;

class open_api_management_get_today_transformation_args {
 public:

  open_api_management_get_today_transformation_args(const open_api_management_get_today_transformation_args&);
  open_api_management_get_today_transformation_args& operator=(const open_api_management_get_today_transformation_args&);
  open_api_management_get_today_transformation_args() : token() {
  }

  virtual ~open_api_management_get_today_transformation_args() noexcept;
  std::string token;

  _open_api_management_get_today_transformation_args__isset __isset;

  void __set_token(const std::string& val);

  bool operator == (const open_api_management_get_today_transformation_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const open_api_management_get_today_transformation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_get_today_transformation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_get_today_transformation_pargs {
 public:


  virtual ~open_api_management_get_today_transformation_pargs() noexcept;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_get_today_transformation_result__isset {
  _open_api_management_get_today_transformation_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_get_today_transformation_result__isset;

class open_api_management_get_today_transformation_result {
 public:

  open_api_management_get_today_transformation_result(const open_api_management_get_today_transformation_result&);
  open_api_management_get_today_transformation_result& operator=(const open_api_management_get_today_transformation_result&);
  open_api_management_get_today_transformation_result() {
  }

  virtual ~open_api_management_get_today_transformation_result() noexcept;
  std::vector<api_transformation_info>  success;
  gen_exp e;

  _open_api_management_get_today_transformation_result__isset __isset;

  void __set_success(const std::vector<api_transformation_info> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_get_today_transformation_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_get_today_transformation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_get_today_transformation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_get_today_transformation_presult__isset {
  _open_api_management_get_today_transformation_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_get_today_transformation_presult__isset;

class open_api_management_get_today_transformation_presult {
 public:


  virtual ~open_api_management_get_today_transformation_presult() noexcept;
  std::vector<api_transformation_info> * success;
  gen_exp e;

  _open_api_management_get_today_transformation_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _open_api_management_push_exit_count_args__isset {
  _open_api_management_push_exit_count_args__isset() : id(false), count(false), is_sale(false), token(false) {}
  bool id :1;
  bool count :1;
  bool is_sale :1;
  bool token :1;
} _open_api_management_push_exit_count_args__isset;

class open_api_management_push_exit_count_args {
 public:

  open_api_management_push_exit_count_args(const open_api_management_push_exit_count_args&);
  open_api_management_push_exit_count_args& operator=(const open_api_management_push_exit_count_args&);
  open_api_management_push_exit_count_args() : id(0), count(0), is_sale(0), token() {
  }

  virtual ~open_api_management_push_exit_count_args() noexcept;
  int64_t id;
  double count;
  bool is_sale;
  std::string token;

  _open_api_management_push_exit_count_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_count(const double val);

  void __set_is_sale(const bool val);

  void __set_token(const std::string& val);

  bool operator == (const open_api_management_push_exit_count_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(count == rhs.count))
      return false;
    if (!(is_sale == rhs.is_sale))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const open_api_management_push_exit_count_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_push_exit_count_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_push_exit_count_pargs {
 public:


  virtual ~open_api_management_push_exit_count_pargs() noexcept;
  const int64_t* id;
  const double* count;
  const bool* is_sale;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_push_exit_count_result__isset {
  _open_api_management_push_exit_count_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_push_exit_count_result__isset;

class open_api_management_push_exit_count_result {
 public:

  open_api_management_push_exit_count_result(const open_api_management_push_exit_count_result&);
  open_api_management_push_exit_count_result& operator=(const open_api_management_push_exit_count_result&);
  open_api_management_push_exit_count_result() : success(0) {
  }

  virtual ~open_api_management_push_exit_count_result() noexcept;
  bool success;
  gen_exp e;

  _open_api_management_push_exit_count_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_push_exit_count_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_push_exit_count_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_push_exit_count_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_push_exit_count_presult__isset {
  _open_api_management_push_exit_count_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_push_exit_count_presult__isset;

class open_api_management_push_exit_count_presult {
 public:


  virtual ~open_api_management_push_exit_count_presult() noexcept;
  bool* success;
  gen_exp e;

  _open_api_management_push_exit_count_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _open_api_management_push_arrange_args__isset {
  _open_api_management_push_arrange_args__isset() : id(false), order(false), is_sale(false), location(false), token(false) {}
  bool id :1;
  bool order :1;
  bool is_sale :1;
  bool location :1;
  bool token :1;
} _open_api_management_push_arrange_args__isset;

class open_api_management_push_arrange_args {
 public:

  open_api_management_push_arrange_args(const open_api_management_push_arrange_args&);
  open_api_management_push_arrange_args& operator=(const open_api_management_push_arrange_args&);
  open_api_management_push_arrange_args() : id(0), order(), is_sale(0), location(), token() {
  }

  virtual ~open_api_management_push_arrange_args() noexcept;
  int64_t id;
  std::string order;
  bool is_sale;
  std::string location;
  std::string token;

  _open_api_management_push_arrange_args__isset __isset;

  void __set_id(const int64_t val);

  void __set_order(const std::string& val);

  void __set_is_sale(const bool val);

  void __set_location(const std::string& val);

  void __set_token(const std::string& val);

  bool operator == (const open_api_management_push_arrange_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(order == rhs.order))
      return false;
    if (!(is_sale == rhs.is_sale))
      return false;
    if (!(location == rhs.location))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const open_api_management_push_arrange_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_push_arrange_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_push_arrange_pargs {
 public:


  virtual ~open_api_management_push_arrange_pargs() noexcept;
  const int64_t* id;
  const std::string* order;
  const bool* is_sale;
  const std::string* location;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_push_arrange_result__isset {
  _open_api_management_push_arrange_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_push_arrange_result__isset;

class open_api_management_push_arrange_result {
 public:

  open_api_management_push_arrange_result(const open_api_management_push_arrange_result&);
  open_api_management_push_arrange_result& operator=(const open_api_management_push_arrange_result&);
  open_api_management_push_arrange_result() : success(0) {
  }

  virtual ~open_api_management_push_arrange_result() noexcept;
  bool success;
  gen_exp e;

  _open_api_management_push_arrange_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_push_arrange_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_push_arrange_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_push_arrange_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_push_arrange_presult__isset {
  _open_api_management_push_arrange_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_push_arrange_presult__isset;

class open_api_management_push_arrange_presult {
 public:


  virtual ~open_api_management_push_arrange_presult() noexcept;
  bool* success;
  gen_exp e;

  _open_api_management_push_arrange_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _open_api_management_proc_call_vehicle_args__isset {
  _open_api_management_proc_call_vehicle_args__isset() : _req(false), token(false) {}
  bool _req :1;
  bool token :1;
} _open_api_management_proc_call_vehicle_args__isset;

class open_api_management_proc_call_vehicle_args {
 public:

  open_api_management_proc_call_vehicle_args(const open_api_management_proc_call_vehicle_args&);
  open_api_management_proc_call_vehicle_args& operator=(const open_api_management_proc_call_vehicle_args&);
  open_api_management_proc_call_vehicle_args() : token() {
  }

  virtual ~open_api_management_proc_call_vehicle_args() noexcept;
  call_vehicle_req _req;
  std::string token;

  _open_api_management_proc_call_vehicle_args__isset __isset;

  void __set__req(const call_vehicle_req& val);

  void __set_token(const std::string& val);

  bool operator == (const open_api_management_proc_call_vehicle_args & rhs) const
  {
    if (!(_req == rhs._req))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const open_api_management_proc_call_vehicle_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_proc_call_vehicle_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_proc_call_vehicle_pargs {
 public:


  virtual ~open_api_management_proc_call_vehicle_pargs() noexcept;
  const call_vehicle_req* _req;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_proc_call_vehicle_result__isset {
  _open_api_management_proc_call_vehicle_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_proc_call_vehicle_result__isset;

class open_api_management_proc_call_vehicle_result {
 public:

  open_api_management_proc_call_vehicle_result(const open_api_management_proc_call_vehicle_result&);
  open_api_management_proc_call_vehicle_result& operator=(const open_api_management_proc_call_vehicle_result&);
  open_api_management_proc_call_vehicle_result() : success(0) {
  }

  virtual ~open_api_management_proc_call_vehicle_result() noexcept;
  bool success;
  gen_exp e;

  _open_api_management_proc_call_vehicle_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_proc_call_vehicle_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_proc_call_vehicle_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_proc_call_vehicle_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_proc_call_vehicle_presult__isset {
  _open_api_management_proc_call_vehicle_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_proc_call_vehicle_presult__isset;

class open_api_management_proc_call_vehicle_presult {
 public:


  virtual ~open_api_management_proc_call_vehicle_presult() noexcept;
  bool* success;
  gen_exp e;

  _open_api_management_proc_call_vehicle_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _open_api_management_proc_vehicle_info_args__isset {
  _open_api_management_proc_vehicle_info_args__isset() : plateNo(false), driverId(false), token(false) {}
  bool plateNo :1;
  bool driverId :1;
  bool token :1;
} _open_api_management_proc_vehicle_info_args__isset;

class open_api_management_proc_vehicle_info_args {
 public:

  open_api_management_proc_vehicle_info_args(const open_api_management_proc_vehicle_info_args&);
  open_api_management_proc_vehicle_info_args& operator=(const open_api_management_proc_vehicle_info_args&);
  open_api_management_proc_vehicle_info_args() : plateNo(), driverId(), token() {
  }

  virtual ~open_api_management_proc_vehicle_info_args() noexcept;
  std::string plateNo;
  std::string driverId;
  std::string token;

  _open_api_management_proc_vehicle_info_args__isset __isset;

  void __set_plateNo(const std::string& val);

  void __set_driverId(const std::string& val);

  void __set_token(const std::string& val);

  bool operator == (const open_api_management_proc_vehicle_info_args & rhs) const
  {
    if (!(plateNo == rhs.plateNo))
      return false;
    if (!(driverId == rhs.driverId))
      return false;
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const open_api_management_proc_vehicle_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_proc_vehicle_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_proc_vehicle_info_pargs {
 public:


  virtual ~open_api_management_proc_vehicle_info_pargs() noexcept;
  const std::string* plateNo;
  const std::string* driverId;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_proc_vehicle_info_result__isset {
  _open_api_management_proc_vehicle_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_proc_vehicle_info_result__isset;

class open_api_management_proc_vehicle_info_result {
 public:

  open_api_management_proc_vehicle_info_result(const open_api_management_proc_vehicle_info_result&);
  open_api_management_proc_vehicle_info_result& operator=(const open_api_management_proc_vehicle_info_result&);
  open_api_management_proc_vehicle_info_result() {
  }

  virtual ~open_api_management_proc_vehicle_info_result() noexcept;
  vehicle_info_resp success;
  gen_exp e;

  _open_api_management_proc_vehicle_info_result__isset __isset;

  void __set_success(const vehicle_info_resp& val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_proc_vehicle_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_proc_vehicle_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_proc_vehicle_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_proc_vehicle_info_presult__isset {
  _open_api_management_proc_vehicle_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_proc_vehicle_info_presult__isset;

class open_api_management_proc_vehicle_info_presult {
 public:


  virtual ~open_api_management_proc_vehicle_info_presult() noexcept;
  vehicle_info_resp* success;
  gen_exp e;

  _open_api_management_proc_vehicle_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _open_api_management_proc_all_vehicle_info_args__isset {
  _open_api_management_proc_all_vehicle_info_args__isset() : token(false) {}
  bool token :1;
} _open_api_management_proc_all_vehicle_info_args__isset;

class open_api_management_proc_all_vehicle_info_args {
 public:

  open_api_management_proc_all_vehicle_info_args(const open_api_management_proc_all_vehicle_info_args&);
  open_api_management_proc_all_vehicle_info_args& operator=(const open_api_management_proc_all_vehicle_info_args&);
  open_api_management_proc_all_vehicle_info_args() : token() {
  }

  virtual ~open_api_management_proc_all_vehicle_info_args() noexcept;
  std::string token;

  _open_api_management_proc_all_vehicle_info_args__isset __isset;

  void __set_token(const std::string& val);

  bool operator == (const open_api_management_proc_all_vehicle_info_args & rhs) const
  {
    if (!(token == rhs.token))
      return false;
    return true;
  }
  bool operator != (const open_api_management_proc_all_vehicle_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_proc_all_vehicle_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class open_api_management_proc_all_vehicle_info_pargs {
 public:


  virtual ~open_api_management_proc_all_vehicle_info_pargs() noexcept;
  const std::string* token;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_proc_all_vehicle_info_result__isset {
  _open_api_management_proc_all_vehicle_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_proc_all_vehicle_info_result__isset;

class open_api_management_proc_all_vehicle_info_result {
 public:

  open_api_management_proc_all_vehicle_info_result(const open_api_management_proc_all_vehicle_info_result&);
  open_api_management_proc_all_vehicle_info_result& operator=(const open_api_management_proc_all_vehicle_info_result&);
  open_api_management_proc_all_vehicle_info_result() {
  }

  virtual ~open_api_management_proc_all_vehicle_info_result() noexcept;
  std::vector<vehicle_info_resp>  success;
  gen_exp e;

  _open_api_management_proc_all_vehicle_info_result__isset __isset;

  void __set_success(const std::vector<vehicle_info_resp> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const open_api_management_proc_all_vehicle_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const open_api_management_proc_all_vehicle_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const open_api_management_proc_all_vehicle_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _open_api_management_proc_all_vehicle_info_presult__isset {
  _open_api_management_proc_all_vehicle_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _open_api_management_proc_all_vehicle_info_presult__isset;

class open_api_management_proc_all_vehicle_info_presult {
 public:


  virtual ~open_api_management_proc_all_vehicle_info_presult() noexcept;
  std::vector<vehicle_info_resp> * success;
  gen_exp e;

  _open_api_management_proc_all_vehicle_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class open_api_managementClient : virtual public open_api_managementIf {
 public:
  open_api_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  open_api_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool register_api_user(const std::string& company_name, const std::string& email, const std::string& password);
  void send_register_api_user(const std::string& company_name, const std::string& email, const std::string& password);
  bool recv_register_api_user();
  bool verify_email_code(const std::string& email, const std::string& code);
  void send_verify_email_code(const std::string& email, const std::string& code);
  bool recv_verify_email_code();
  bool unregister_api_user(const std::string& email, const std::string& password);
  void send_unregister_api_user(const std::string& email, const std::string& password);
  bool recv_unregister_api_user();
  void get_token(std::string& _return, const std::string& email, const std::string& password);
  void send_get_token(const std::string& email, const std::string& password);
  void recv_get_token(std::string& _return);
  void get_today_transformation(std::vector<api_transformation_info> & _return, const std::string& token);
  void send_get_today_transformation(const std::string& token);
  void recv_get_today_transformation(std::vector<api_transformation_info> & _return);
  bool push_exit_count(const int64_t id, const double count, const bool is_sale, const std::string& token);
  void send_push_exit_count(const int64_t id, const double count, const bool is_sale, const std::string& token);
  bool recv_push_exit_count();
  bool push_arrange(const int64_t id, const std::string& order, const bool is_sale, const std::string& location, const std::string& token);
  void send_push_arrange(const int64_t id, const std::string& order, const bool is_sale, const std::string& location, const std::string& token);
  bool recv_push_arrange();
  bool proc_call_vehicle(const call_vehicle_req& _req, const std::string& token);
  void send_proc_call_vehicle(const call_vehicle_req& _req, const std::string& token);
  bool recv_proc_call_vehicle();
  void proc_vehicle_info(vehicle_info_resp& _return, const std::string& plateNo, const std::string& driverId, const std::string& token);
  void send_proc_vehicle_info(const std::string& plateNo, const std::string& driverId, const std::string& token);
  void recv_proc_vehicle_info(vehicle_info_resp& _return);
  void proc_all_vehicle_info(std::vector<vehicle_info_resp> & _return, const std::string& token);
  void send_proc_all_vehicle_info(const std::string& token);
  void recv_proc_all_vehicle_info(std::vector<vehicle_info_resp> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class open_api_managementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<open_api_managementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (open_api_managementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_register_api_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_email_code(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unregister_api_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_token(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_today_transformation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_push_exit_count(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_push_arrange(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_call_vehicle(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_vehicle_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_proc_all_vehicle_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  open_api_managementProcessor(::std::shared_ptr<open_api_managementIf> iface) :
    iface_(iface) {
    processMap_["register_api_user"] = &open_api_managementProcessor::process_register_api_user;
    processMap_["verify_email_code"] = &open_api_managementProcessor::process_verify_email_code;
    processMap_["unregister_api_user"] = &open_api_managementProcessor::process_unregister_api_user;
    processMap_["get_token"] = &open_api_managementProcessor::process_get_token;
    processMap_["get_today_transformation"] = &open_api_managementProcessor::process_get_today_transformation;
    processMap_["push_exit_count"] = &open_api_managementProcessor::process_push_exit_count;
    processMap_["push_arrange"] = &open_api_managementProcessor::process_push_arrange;
    processMap_["proc_call_vehicle"] = &open_api_managementProcessor::process_proc_call_vehicle;
    processMap_["proc_vehicle_info"] = &open_api_managementProcessor::process_proc_vehicle_info;
    processMap_["proc_all_vehicle_info"] = &open_api_managementProcessor::process_proc_all_vehicle_info;
  }

  virtual ~open_api_managementProcessor() {}
};

class open_api_managementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  open_api_managementProcessorFactory(const ::std::shared_ptr< open_api_managementIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< open_api_managementIfFactory > handlerFactory_;
};

class open_api_managementMultiface : virtual public open_api_managementIf {
 public:
  open_api_managementMultiface(std::vector<std::shared_ptr<open_api_managementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~open_api_managementMultiface() {}
 protected:
  std::vector<std::shared_ptr<open_api_managementIf> > ifaces_;
  open_api_managementMultiface() {}
  void add(::std::shared_ptr<open_api_managementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool register_api_user(const std::string& company_name, const std::string& email, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_api_user(company_name, email, password);
    }
    return ifaces_[i]->register_api_user(company_name, email, password);
  }

  bool verify_email_code(const std::string& email, const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_email_code(email, code);
    }
    return ifaces_[i]->verify_email_code(email, code);
  }

  bool unregister_api_user(const std::string& email, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unregister_api_user(email, password);
    }
    return ifaces_[i]->unregister_api_user(email, password);
  }

  void get_token(std::string& _return, const std::string& email, const std::string& password) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_token(_return, email, password);
    }
    ifaces_[i]->get_token(_return, email, password);
    return;
  }

  void get_today_transformation(std::vector<api_transformation_info> & _return, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_today_transformation(_return, token);
    }
    ifaces_[i]->get_today_transformation(_return, token);
    return;
  }

  bool push_exit_count(const int64_t id, const double count, const bool is_sale, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push_exit_count(id, count, is_sale, token);
    }
    return ifaces_[i]->push_exit_count(id, count, is_sale, token);
  }

  bool push_arrange(const int64_t id, const std::string& order, const bool is_sale, const std::string& location, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->push_arrange(id, order, is_sale, location, token);
    }
    return ifaces_[i]->push_arrange(id, order, is_sale, location, token);
  }

  bool proc_call_vehicle(const call_vehicle_req& _req, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_call_vehicle(_req, token);
    }
    return ifaces_[i]->proc_call_vehicle(_req, token);
  }

  void proc_vehicle_info(vehicle_info_resp& _return, const std::string& plateNo, const std::string& driverId, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_vehicle_info(_return, plateNo, driverId, token);
    }
    ifaces_[i]->proc_vehicle_info(_return, plateNo, driverId, token);
    return;
  }

  void proc_all_vehicle_info(std::vector<vehicle_info_resp> & _return, const std::string& token) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->proc_all_vehicle_info(_return, token);
    }
    ifaces_[i]->proc_all_vehicle_info(_return, token);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class open_api_managementConcurrentClient : virtual public open_api_managementIf {
 public:
  open_api_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  open_api_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool register_api_user(const std::string& company_name, const std::string& email, const std::string& password);
  int32_t send_register_api_user(const std::string& company_name, const std::string& email, const std::string& password);
  bool recv_register_api_user(const int32_t seqid);
  bool verify_email_code(const std::string& email, const std::string& code);
  int32_t send_verify_email_code(const std::string& email, const std::string& code);
  bool recv_verify_email_code(const int32_t seqid);
  bool unregister_api_user(const std::string& email, const std::string& password);
  int32_t send_unregister_api_user(const std::string& email, const std::string& password);
  bool recv_unregister_api_user(const int32_t seqid);
  void get_token(std::string& _return, const std::string& email, const std::string& password);
  int32_t send_get_token(const std::string& email, const std::string& password);
  void recv_get_token(std::string& _return, const int32_t seqid);
  void get_today_transformation(std::vector<api_transformation_info> & _return, const std::string& token);
  int32_t send_get_today_transformation(const std::string& token);
  void recv_get_today_transformation(std::vector<api_transformation_info> & _return, const int32_t seqid);
  bool push_exit_count(const int64_t id, const double count, const bool is_sale, const std::string& token);
  int32_t send_push_exit_count(const int64_t id, const double count, const bool is_sale, const std::string& token);
  bool recv_push_exit_count(const int32_t seqid);
  bool push_arrange(const int64_t id, const std::string& order, const bool is_sale, const std::string& location, const std::string& token);
  int32_t send_push_arrange(const int64_t id, const std::string& order, const bool is_sale, const std::string& location, const std::string& token);
  bool recv_push_arrange(const int32_t seqid);
  bool proc_call_vehicle(const call_vehicle_req& _req, const std::string& token);
  int32_t send_proc_call_vehicle(const call_vehicle_req& _req, const std::string& token);
  bool recv_proc_call_vehicle(const int32_t seqid);
  void proc_vehicle_info(vehicle_info_resp& _return, const std::string& plateNo, const std::string& driverId, const std::string& token);
  int32_t send_proc_vehicle_info(const std::string& plateNo, const std::string& driverId, const std::string& token);
  void recv_proc_vehicle_info(vehicle_info_resp& _return, const int32_t seqid);
  void proc_all_vehicle_info(std::vector<vehicle_info_resp> & _return, const std::string& token);
  int32_t send_proc_all_vehicle_info(const std::string& token);
  void recv_proc_all_vehicle_info(std::vector<vehicle_info_resp> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
