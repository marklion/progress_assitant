/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef vichele_management_H
#define vichele_management_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "idl_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class vichele_managementIf {
 public:
  virtual ~vichele_managementIf() {}
  virtual bool create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info) = 0;
  virtual bool delete_vichele_info(const std::string& open_id, const int64_t vichele_id) = 0;
  virtual bool update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info) = 0;
  virtual void get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& open_id, const int64_t ancher) = 0;
  virtual void silent_login(std::string& _return, const std::string& code) = 0;
  virtual bool verify_login(const std::string& open_id) = 0;
  virtual void get_silent_user_info(silent_user_info& _return, const std::string& open_id) = 0;
  virtual void set_silent_user_info(const std::string& open_id, const silent_user_info& info) = 0;
  virtual void get_input_history(std::vector<std::string> & _return, const std::string& open_id, const vichele_stay_alone& search_key) = 0;
  virtual void get_company_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& enter_date, const std::string& stuff_name, const std::string& supplier_name, const std::string& vichele_number) = 0;
  virtual bool confirm_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const std::vector<std::string> & company_for_select, const bool all_select) = 0;
  virtual bool cancel_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const bool all_select) = 0;
  virtual bool create_vichele_team(const std::string& open_id, const vichele_team& team_info) = 0;
  virtual bool update_vichele_team(const std::string& open_id, const vichele_team& team_info) = 0;
  virtual bool del_vichele_team(const std::string& open_id, const int64_t team_id) = 0;
  virtual void get_all_vichele_team(std::vector<vichele_team> & _return, const std::string& open_id) = 0;
  virtual void get_vichele_team(vichele_team& _return, const std::string& open_id, const int64_t team_id) = 0;
  virtual bool change_company_name(const std::string& ssid, const int64_t vichele_id, const std::string& company_name) = 0;
  virtual bool fill_company_name(const std::string& open_id, const int64_t vichele_id, const std::string& company_name) = 0;
  virtual void company_history(std::vector<std::string> & _return, const std::string& ssid) = 0;
  virtual bool add_supplier(const std::string& ssid, const supplier_basic_info& supplier_info) = 0;
  virtual bool update_supplier(const std::string& ssid, const supplier_basic_info& supplier_info) = 0;
  virtual bool del_supplier(const std::string& ssid, const int64_t supplier_id) = 0;
  virtual void get_all_supplier(std::vector<supplier_basic_info> & _return, const std::string& ssid) = 0;
  virtual void smart_assign(std::string& _return, const std::string& ssid, const std::vector<vichele_stay_alone> & vichele_info) = 0;
  virtual int64_t get_max_vichele_by_supplier(const std::string& supplier, const std::string& company) = 0;
  virtual bool fill_tmd(const std::string& open_id, const int64_t vichele_id, const std::string& tmd_no) = 0;
  virtual bool fill_enter_weight(const std::string& open_id, const int64_t vichele_id, const double enter_weight) = 0;
  virtual bool fill_weight_attach(const std::string& open_id, const int64_t vichele_id, const std::string& weight_attach) = 0;
  virtual bool add_exception(const std::string& ssid, const std::string& stuff_name) = 0;
  virtual bool del_exception(const std::string& ssid, const std::string& stuff_name) = 0;
  virtual void get_all_exceptions(std::vector<std::string> & _return, const std::string& ssid) = 0;
  virtual void get_company_brief(single_vichele_brief& _return, const std::string& ssid) = 0;
};

class vichele_managementIfFactory {
 public:
  typedef vichele_managementIf Handler;

  virtual ~vichele_managementIfFactory() {}

  virtual vichele_managementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(vichele_managementIf* /* handler */) = 0;
};

class vichele_managementIfSingletonFactory : virtual public vichele_managementIfFactory {
 public:
  vichele_managementIfSingletonFactory(const ::std::shared_ptr<vichele_managementIf>& iface) : iface_(iface) {}
  virtual ~vichele_managementIfSingletonFactory() {}

  virtual vichele_managementIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(vichele_managementIf* /* handler */) {}

 protected:
  ::std::shared_ptr<vichele_managementIf> iface_;
};

class vichele_managementNull : virtual public vichele_managementIf {
 public:
  virtual ~vichele_managementNull() {}
  bool create_vichele_info(const std::string& /* open_id */, const std::vector<vichele_stay_alone> & /* vichele_info */) {
    bool _return = false;
    return _return;
  }
  bool delete_vichele_info(const std::string& /* open_id */, const int64_t /* vichele_id */) {
    bool _return = false;
    return _return;
  }
  bool update_vichele_info(const std::string& /* open_id */, const vichele_stay_alone& /* vichele_info */) {
    bool _return = false;
    return _return;
  }
  void get_created_vichele_info(std::vector<vichele_stay_alone> & /* _return */, const std::string& /* open_id */, const int64_t /* ancher */) {
    return;
  }
  void silent_login(std::string& /* _return */, const std::string& /* code */) {
    return;
  }
  bool verify_login(const std::string& /* open_id */) {
    bool _return = false;
    return _return;
  }
  void get_silent_user_info(silent_user_info& /* _return */, const std::string& /* open_id */) {
    return;
  }
  void set_silent_user_info(const std::string& /* open_id */, const silent_user_info& /* info */) {
    return;
  }
  void get_input_history(std::vector<std::string> & /* _return */, const std::string& /* open_id */, const vichele_stay_alone& /* search_key */) {
    return;
  }
  void get_company_vichele_info(std::vector<vichele_stay_alone> & /* _return */, const std::string& /* ssid */, const int64_t /* anchor */, const int64_t /* status */, const std::string& /* enter_date */, const std::string& /* stuff_name */, const std::string& /* supplier_name */, const std::string& /* vichele_number */) {
    return;
  }
  bool confirm_vichele(const std::string& /* ssid */, const std::vector<vichele_stay_alone> & /* info */, const std::vector<std::string> & /* company_for_select */, const bool /* all_select */) {
    bool _return = false;
    return _return;
  }
  bool cancel_vichele(const std::string& /* ssid */, const std::vector<vichele_stay_alone> & /* info */, const bool /* all_select */) {
    bool _return = false;
    return _return;
  }
  bool create_vichele_team(const std::string& /* open_id */, const vichele_team& /* team_info */) {
    bool _return = false;
    return _return;
  }
  bool update_vichele_team(const std::string& /* open_id */, const vichele_team& /* team_info */) {
    bool _return = false;
    return _return;
  }
  bool del_vichele_team(const std::string& /* open_id */, const int64_t /* team_id */) {
    bool _return = false;
    return _return;
  }
  void get_all_vichele_team(std::vector<vichele_team> & /* _return */, const std::string& /* open_id */) {
    return;
  }
  void get_vichele_team(vichele_team& /* _return */, const std::string& /* open_id */, const int64_t /* team_id */) {
    return;
  }
  bool change_company_name(const std::string& /* ssid */, const int64_t /* vichele_id */, const std::string& /* company_name */) {
    bool _return = false;
    return _return;
  }
  bool fill_company_name(const std::string& /* open_id */, const int64_t /* vichele_id */, const std::string& /* company_name */) {
    bool _return = false;
    return _return;
  }
  void company_history(std::vector<std::string> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  bool add_supplier(const std::string& /* ssid */, const supplier_basic_info& /* supplier_info */) {
    bool _return = false;
    return _return;
  }
  bool update_supplier(const std::string& /* ssid */, const supplier_basic_info& /* supplier_info */) {
    bool _return = false;
    return _return;
  }
  bool del_supplier(const std::string& /* ssid */, const int64_t /* supplier_id */) {
    bool _return = false;
    return _return;
  }
  void get_all_supplier(std::vector<supplier_basic_info> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  void smart_assign(std::string& /* _return */, const std::string& /* ssid */, const std::vector<vichele_stay_alone> & /* vichele_info */) {
    return;
  }
  int64_t get_max_vichele_by_supplier(const std::string& /* supplier */, const std::string& /* company */) {
    int64_t _return = 0;
    return _return;
  }
  bool fill_tmd(const std::string& /* open_id */, const int64_t /* vichele_id */, const std::string& /* tmd_no */) {
    bool _return = false;
    return _return;
  }
  bool fill_enter_weight(const std::string& /* open_id */, const int64_t /* vichele_id */, const double /* enter_weight */) {
    bool _return = false;
    return _return;
  }
  bool fill_weight_attach(const std::string& /* open_id */, const int64_t /* vichele_id */, const std::string& /* weight_attach */) {
    bool _return = false;
    return _return;
  }
  bool add_exception(const std::string& /* ssid */, const std::string& /* stuff_name */) {
    bool _return = false;
    return _return;
  }
  bool del_exception(const std::string& /* ssid */, const std::string& /* stuff_name */) {
    bool _return = false;
    return _return;
  }
  void get_all_exceptions(std::vector<std::string> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  void get_company_brief(single_vichele_brief& /* _return */, const std::string& /* ssid */) {
    return;
  }
};

typedef struct _vichele_management_create_vichele_info_args__isset {
  _vichele_management_create_vichele_info_args__isset() : open_id(false), vichele_info(false) {}
  bool open_id :1;
  bool vichele_info :1;
} _vichele_management_create_vichele_info_args__isset;

class vichele_management_create_vichele_info_args {
 public:

  vichele_management_create_vichele_info_args(const vichele_management_create_vichele_info_args&);
  vichele_management_create_vichele_info_args& operator=(const vichele_management_create_vichele_info_args&);
  vichele_management_create_vichele_info_args() : open_id() {
  }

  virtual ~vichele_management_create_vichele_info_args() noexcept;
  std::string open_id;
  std::vector<vichele_stay_alone>  vichele_info;

  _vichele_management_create_vichele_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_info(const std::vector<vichele_stay_alone> & val);

  bool operator == (const vichele_management_create_vichele_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_info == rhs.vichele_info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_create_vichele_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_create_vichele_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_create_vichele_info_pargs {
 public:


  virtual ~vichele_management_create_vichele_info_pargs() noexcept;
  const std::string* open_id;
  const std::vector<vichele_stay_alone> * vichele_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_create_vichele_info_result__isset {
  _vichele_management_create_vichele_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_create_vichele_info_result__isset;

class vichele_management_create_vichele_info_result {
 public:

  vichele_management_create_vichele_info_result(const vichele_management_create_vichele_info_result&);
  vichele_management_create_vichele_info_result& operator=(const vichele_management_create_vichele_info_result&);
  vichele_management_create_vichele_info_result() : success(0) {
  }

  virtual ~vichele_management_create_vichele_info_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_create_vichele_info_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_create_vichele_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_create_vichele_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_create_vichele_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_create_vichele_info_presult__isset {
  _vichele_management_create_vichele_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_create_vichele_info_presult__isset;

class vichele_management_create_vichele_info_presult {
 public:


  virtual ~vichele_management_create_vichele_info_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_create_vichele_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_delete_vichele_info_args__isset {
  _vichele_management_delete_vichele_info_args__isset() : open_id(false), vichele_id(false) {}
  bool open_id :1;
  bool vichele_id :1;
} _vichele_management_delete_vichele_info_args__isset;

class vichele_management_delete_vichele_info_args {
 public:

  vichele_management_delete_vichele_info_args(const vichele_management_delete_vichele_info_args&);
  vichele_management_delete_vichele_info_args& operator=(const vichele_management_delete_vichele_info_args&);
  vichele_management_delete_vichele_info_args() : open_id(), vichele_id(0) {
  }

  virtual ~vichele_management_delete_vichele_info_args() noexcept;
  std::string open_id;
  int64_t vichele_id;

  _vichele_management_delete_vichele_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_id(const int64_t val);

  bool operator == (const vichele_management_delete_vichele_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    return true;
  }
  bool operator != (const vichele_management_delete_vichele_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_delete_vichele_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_delete_vichele_info_pargs {
 public:


  virtual ~vichele_management_delete_vichele_info_pargs() noexcept;
  const std::string* open_id;
  const int64_t* vichele_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_delete_vichele_info_result__isset {
  _vichele_management_delete_vichele_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_delete_vichele_info_result__isset;

class vichele_management_delete_vichele_info_result {
 public:

  vichele_management_delete_vichele_info_result(const vichele_management_delete_vichele_info_result&);
  vichele_management_delete_vichele_info_result& operator=(const vichele_management_delete_vichele_info_result&);
  vichele_management_delete_vichele_info_result() : success(0) {
  }

  virtual ~vichele_management_delete_vichele_info_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_delete_vichele_info_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_delete_vichele_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_delete_vichele_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_delete_vichele_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_delete_vichele_info_presult__isset {
  _vichele_management_delete_vichele_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_delete_vichele_info_presult__isset;

class vichele_management_delete_vichele_info_presult {
 public:


  virtual ~vichele_management_delete_vichele_info_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_delete_vichele_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_update_vichele_info_args__isset {
  _vichele_management_update_vichele_info_args__isset() : open_id(false), vichele_info(false) {}
  bool open_id :1;
  bool vichele_info :1;
} _vichele_management_update_vichele_info_args__isset;

class vichele_management_update_vichele_info_args {
 public:

  vichele_management_update_vichele_info_args(const vichele_management_update_vichele_info_args&);
  vichele_management_update_vichele_info_args& operator=(const vichele_management_update_vichele_info_args&);
  vichele_management_update_vichele_info_args() : open_id() {
  }

  virtual ~vichele_management_update_vichele_info_args() noexcept;
  std::string open_id;
  vichele_stay_alone vichele_info;

  _vichele_management_update_vichele_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_info(const vichele_stay_alone& val);

  bool operator == (const vichele_management_update_vichele_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_info == rhs.vichele_info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_update_vichele_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_update_vichele_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_update_vichele_info_pargs {
 public:


  virtual ~vichele_management_update_vichele_info_pargs() noexcept;
  const std::string* open_id;
  const vichele_stay_alone* vichele_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_update_vichele_info_result__isset {
  _vichele_management_update_vichele_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_update_vichele_info_result__isset;

class vichele_management_update_vichele_info_result {
 public:

  vichele_management_update_vichele_info_result(const vichele_management_update_vichele_info_result&);
  vichele_management_update_vichele_info_result& operator=(const vichele_management_update_vichele_info_result&);
  vichele_management_update_vichele_info_result() : success(0) {
  }

  virtual ~vichele_management_update_vichele_info_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_update_vichele_info_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_update_vichele_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_update_vichele_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_update_vichele_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_update_vichele_info_presult__isset {
  _vichele_management_update_vichele_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_update_vichele_info_presult__isset;

class vichele_management_update_vichele_info_presult {
 public:


  virtual ~vichele_management_update_vichele_info_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_update_vichele_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_created_vichele_info_args__isset {
  _vichele_management_get_created_vichele_info_args__isset() : open_id(false), ancher(false) {}
  bool open_id :1;
  bool ancher :1;
} _vichele_management_get_created_vichele_info_args__isset;

class vichele_management_get_created_vichele_info_args {
 public:

  vichele_management_get_created_vichele_info_args(const vichele_management_get_created_vichele_info_args&);
  vichele_management_get_created_vichele_info_args& operator=(const vichele_management_get_created_vichele_info_args&);
  vichele_management_get_created_vichele_info_args() : open_id(), ancher(0) {
  }

  virtual ~vichele_management_get_created_vichele_info_args() noexcept;
  std::string open_id;
  int64_t ancher;

  _vichele_management_get_created_vichele_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_ancher(const int64_t val);

  bool operator == (const vichele_management_get_created_vichele_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(ancher == rhs.ancher))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_created_vichele_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_created_vichele_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_created_vichele_info_pargs {
 public:


  virtual ~vichele_management_get_created_vichele_info_pargs() noexcept;
  const std::string* open_id;
  const int64_t* ancher;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_created_vichele_info_result__isset {
  _vichele_management_get_created_vichele_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_created_vichele_info_result__isset;

class vichele_management_get_created_vichele_info_result {
 public:

  vichele_management_get_created_vichele_info_result(const vichele_management_get_created_vichele_info_result&);
  vichele_management_get_created_vichele_info_result& operator=(const vichele_management_get_created_vichele_info_result&);
  vichele_management_get_created_vichele_info_result() {
  }

  virtual ~vichele_management_get_created_vichele_info_result() noexcept;
  std::vector<vichele_stay_alone>  success;
  gen_exp e;

  _vichele_management_get_created_vichele_info_result__isset __isset;

  void __set_success(const std::vector<vichele_stay_alone> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_created_vichele_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_created_vichele_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_created_vichele_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_created_vichele_info_presult__isset {
  _vichele_management_get_created_vichele_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_created_vichele_info_presult__isset;

class vichele_management_get_created_vichele_info_presult {
 public:


  virtual ~vichele_management_get_created_vichele_info_presult() noexcept;
  std::vector<vichele_stay_alone> * success;
  gen_exp e;

  _vichele_management_get_created_vichele_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_silent_login_args__isset {
  _vichele_management_silent_login_args__isset() : code(false) {}
  bool code :1;
} _vichele_management_silent_login_args__isset;

class vichele_management_silent_login_args {
 public:

  vichele_management_silent_login_args(const vichele_management_silent_login_args&);
  vichele_management_silent_login_args& operator=(const vichele_management_silent_login_args&);
  vichele_management_silent_login_args() : code() {
  }

  virtual ~vichele_management_silent_login_args() noexcept;
  std::string code;

  _vichele_management_silent_login_args__isset __isset;

  void __set_code(const std::string& val);

  bool operator == (const vichele_management_silent_login_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const vichele_management_silent_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_silent_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_silent_login_pargs {
 public:


  virtual ~vichele_management_silent_login_pargs() noexcept;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_silent_login_result__isset {
  _vichele_management_silent_login_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_silent_login_result__isset;

class vichele_management_silent_login_result {
 public:

  vichele_management_silent_login_result(const vichele_management_silent_login_result&);
  vichele_management_silent_login_result& operator=(const vichele_management_silent_login_result&);
  vichele_management_silent_login_result() : success() {
  }

  virtual ~vichele_management_silent_login_result() noexcept;
  std::string success;
  gen_exp e;

  _vichele_management_silent_login_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_silent_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_silent_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_silent_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_silent_login_presult__isset {
  _vichele_management_silent_login_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_silent_login_presult__isset;

class vichele_management_silent_login_presult {
 public:


  virtual ~vichele_management_silent_login_presult() noexcept;
  std::string* success;
  gen_exp e;

  _vichele_management_silent_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_verify_login_args__isset {
  _vichele_management_verify_login_args__isset() : open_id(false) {}
  bool open_id :1;
} _vichele_management_verify_login_args__isset;

class vichele_management_verify_login_args {
 public:

  vichele_management_verify_login_args(const vichele_management_verify_login_args&);
  vichele_management_verify_login_args& operator=(const vichele_management_verify_login_args&);
  vichele_management_verify_login_args() : open_id() {
  }

  virtual ~vichele_management_verify_login_args() noexcept;
  std::string open_id;

  _vichele_management_verify_login_args__isset __isset;

  void __set_open_id(const std::string& val);

  bool operator == (const vichele_management_verify_login_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    return true;
  }
  bool operator != (const vichele_management_verify_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_verify_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_verify_login_pargs {
 public:


  virtual ~vichele_management_verify_login_pargs() noexcept;
  const std::string* open_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_verify_login_result__isset {
  _vichele_management_verify_login_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_verify_login_result__isset;

class vichele_management_verify_login_result {
 public:

  vichele_management_verify_login_result(const vichele_management_verify_login_result&);
  vichele_management_verify_login_result& operator=(const vichele_management_verify_login_result&);
  vichele_management_verify_login_result() : success(0) {
  }

  virtual ~vichele_management_verify_login_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_verify_login_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_verify_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_verify_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_verify_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_verify_login_presult__isset {
  _vichele_management_verify_login_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_verify_login_presult__isset;

class vichele_management_verify_login_presult {
 public:


  virtual ~vichele_management_verify_login_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_verify_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_silent_user_info_args__isset {
  _vichele_management_get_silent_user_info_args__isset() : open_id(false) {}
  bool open_id :1;
} _vichele_management_get_silent_user_info_args__isset;

class vichele_management_get_silent_user_info_args {
 public:

  vichele_management_get_silent_user_info_args(const vichele_management_get_silent_user_info_args&);
  vichele_management_get_silent_user_info_args& operator=(const vichele_management_get_silent_user_info_args&);
  vichele_management_get_silent_user_info_args() : open_id() {
  }

  virtual ~vichele_management_get_silent_user_info_args() noexcept;
  std::string open_id;

  _vichele_management_get_silent_user_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  bool operator == (const vichele_management_get_silent_user_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_silent_user_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_silent_user_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_silent_user_info_pargs {
 public:


  virtual ~vichele_management_get_silent_user_info_pargs() noexcept;
  const std::string* open_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_silent_user_info_result__isset {
  _vichele_management_get_silent_user_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_silent_user_info_result__isset;

class vichele_management_get_silent_user_info_result {
 public:

  vichele_management_get_silent_user_info_result(const vichele_management_get_silent_user_info_result&);
  vichele_management_get_silent_user_info_result& operator=(const vichele_management_get_silent_user_info_result&);
  vichele_management_get_silent_user_info_result() {
  }

  virtual ~vichele_management_get_silent_user_info_result() noexcept;
  silent_user_info success;
  gen_exp e;

  _vichele_management_get_silent_user_info_result__isset __isset;

  void __set_success(const silent_user_info& val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_silent_user_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_silent_user_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_silent_user_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_silent_user_info_presult__isset {
  _vichele_management_get_silent_user_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_silent_user_info_presult__isset;

class vichele_management_get_silent_user_info_presult {
 public:


  virtual ~vichele_management_get_silent_user_info_presult() noexcept;
  silent_user_info* success;
  gen_exp e;

  _vichele_management_get_silent_user_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_set_silent_user_info_args__isset {
  _vichele_management_set_silent_user_info_args__isset() : open_id(false), info(false) {}
  bool open_id :1;
  bool info :1;
} _vichele_management_set_silent_user_info_args__isset;

class vichele_management_set_silent_user_info_args {
 public:

  vichele_management_set_silent_user_info_args(const vichele_management_set_silent_user_info_args&);
  vichele_management_set_silent_user_info_args& operator=(const vichele_management_set_silent_user_info_args&);
  vichele_management_set_silent_user_info_args() : open_id() {
  }

  virtual ~vichele_management_set_silent_user_info_args() noexcept;
  std::string open_id;
  silent_user_info info;

  _vichele_management_set_silent_user_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_info(const silent_user_info& val);

  bool operator == (const vichele_management_set_silent_user_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(info == rhs.info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_set_silent_user_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_set_silent_user_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_set_silent_user_info_pargs {
 public:


  virtual ~vichele_management_set_silent_user_info_pargs() noexcept;
  const std::string* open_id;
  const silent_user_info* info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_set_silent_user_info_result__isset {
  _vichele_management_set_silent_user_info_result__isset() : e(false) {}
  bool e :1;
} _vichele_management_set_silent_user_info_result__isset;

class vichele_management_set_silent_user_info_result {
 public:

  vichele_management_set_silent_user_info_result(const vichele_management_set_silent_user_info_result&);
  vichele_management_set_silent_user_info_result& operator=(const vichele_management_set_silent_user_info_result&);
  vichele_management_set_silent_user_info_result() {
  }

  virtual ~vichele_management_set_silent_user_info_result() noexcept;
  gen_exp e;

  _vichele_management_set_silent_user_info_result__isset __isset;

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_set_silent_user_info_result & rhs) const
  {
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_set_silent_user_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_set_silent_user_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_set_silent_user_info_presult__isset {
  _vichele_management_set_silent_user_info_presult__isset() : e(false) {}
  bool e :1;
} _vichele_management_set_silent_user_info_presult__isset;

class vichele_management_set_silent_user_info_presult {
 public:


  virtual ~vichele_management_set_silent_user_info_presult() noexcept;
  gen_exp e;

  _vichele_management_set_silent_user_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_input_history_args__isset {
  _vichele_management_get_input_history_args__isset() : open_id(false), search_key(false) {}
  bool open_id :1;
  bool search_key :1;
} _vichele_management_get_input_history_args__isset;

class vichele_management_get_input_history_args {
 public:

  vichele_management_get_input_history_args(const vichele_management_get_input_history_args&);
  vichele_management_get_input_history_args& operator=(const vichele_management_get_input_history_args&);
  vichele_management_get_input_history_args() : open_id() {
  }

  virtual ~vichele_management_get_input_history_args() noexcept;
  std::string open_id;
  vichele_stay_alone search_key;

  _vichele_management_get_input_history_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_search_key(const vichele_stay_alone& val);

  bool operator == (const vichele_management_get_input_history_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(search_key == rhs.search_key))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_input_history_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_input_history_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_input_history_pargs {
 public:


  virtual ~vichele_management_get_input_history_pargs() noexcept;
  const std::string* open_id;
  const vichele_stay_alone* search_key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_input_history_result__isset {
  _vichele_management_get_input_history_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_input_history_result__isset;

class vichele_management_get_input_history_result {
 public:

  vichele_management_get_input_history_result(const vichele_management_get_input_history_result&);
  vichele_management_get_input_history_result& operator=(const vichele_management_get_input_history_result&);
  vichele_management_get_input_history_result() {
  }

  virtual ~vichele_management_get_input_history_result() noexcept;
  std::vector<std::string>  success;
  gen_exp e;

  _vichele_management_get_input_history_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_input_history_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_input_history_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_input_history_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_input_history_presult__isset {
  _vichele_management_get_input_history_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_input_history_presult__isset;

class vichele_management_get_input_history_presult {
 public:


  virtual ~vichele_management_get_input_history_presult() noexcept;
  std::vector<std::string> * success;
  gen_exp e;

  _vichele_management_get_input_history_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_company_vichele_info_args__isset {
  _vichele_management_get_company_vichele_info_args__isset() : ssid(false), anchor(false), status(false), enter_date(false), stuff_name(false), supplier_name(false), vichele_number(false) {}
  bool ssid :1;
  bool anchor :1;
  bool status :1;
  bool enter_date :1;
  bool stuff_name :1;
  bool supplier_name :1;
  bool vichele_number :1;
} _vichele_management_get_company_vichele_info_args__isset;

class vichele_management_get_company_vichele_info_args {
 public:

  vichele_management_get_company_vichele_info_args(const vichele_management_get_company_vichele_info_args&);
  vichele_management_get_company_vichele_info_args& operator=(const vichele_management_get_company_vichele_info_args&);
  vichele_management_get_company_vichele_info_args() : ssid(), anchor(0), status(0), enter_date(), stuff_name(), supplier_name(), vichele_number() {
  }

  virtual ~vichele_management_get_company_vichele_info_args() noexcept;
  std::string ssid;
  int64_t anchor;
  int64_t status;
  std::string enter_date;
  std::string stuff_name;
  std::string supplier_name;
  std::string vichele_number;

  _vichele_management_get_company_vichele_info_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_anchor(const int64_t val);

  void __set_status(const int64_t val);

  void __set_enter_date(const std::string& val);

  void __set_stuff_name(const std::string& val);

  void __set_supplier_name(const std::string& val);

  void __set_vichele_number(const std::string& val);

  bool operator == (const vichele_management_get_company_vichele_info_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(anchor == rhs.anchor))
      return false;
    if (!(status == rhs.status))
      return false;
    if (!(enter_date == rhs.enter_date))
      return false;
    if (!(stuff_name == rhs.stuff_name))
      return false;
    if (!(supplier_name == rhs.supplier_name))
      return false;
    if (!(vichele_number == rhs.vichele_number))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_company_vichele_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_company_vichele_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_company_vichele_info_pargs {
 public:


  virtual ~vichele_management_get_company_vichele_info_pargs() noexcept;
  const std::string* ssid;
  const int64_t* anchor;
  const int64_t* status;
  const std::string* enter_date;
  const std::string* stuff_name;
  const std::string* supplier_name;
  const std::string* vichele_number;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_company_vichele_info_result__isset {
  _vichele_management_get_company_vichele_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_company_vichele_info_result__isset;

class vichele_management_get_company_vichele_info_result {
 public:

  vichele_management_get_company_vichele_info_result(const vichele_management_get_company_vichele_info_result&);
  vichele_management_get_company_vichele_info_result& operator=(const vichele_management_get_company_vichele_info_result&);
  vichele_management_get_company_vichele_info_result() {
  }

  virtual ~vichele_management_get_company_vichele_info_result() noexcept;
  std::vector<vichele_stay_alone>  success;
  gen_exp e;

  _vichele_management_get_company_vichele_info_result__isset __isset;

  void __set_success(const std::vector<vichele_stay_alone> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_company_vichele_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_company_vichele_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_company_vichele_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_company_vichele_info_presult__isset {
  _vichele_management_get_company_vichele_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_company_vichele_info_presult__isset;

class vichele_management_get_company_vichele_info_presult {
 public:


  virtual ~vichele_management_get_company_vichele_info_presult() noexcept;
  std::vector<vichele_stay_alone> * success;
  gen_exp e;

  _vichele_management_get_company_vichele_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_confirm_vichele_args__isset {
  _vichele_management_confirm_vichele_args__isset() : ssid(false), info(false), company_for_select(false), all_select(false) {}
  bool ssid :1;
  bool info :1;
  bool company_for_select :1;
  bool all_select :1;
} _vichele_management_confirm_vichele_args__isset;

class vichele_management_confirm_vichele_args {
 public:

  vichele_management_confirm_vichele_args(const vichele_management_confirm_vichele_args&);
  vichele_management_confirm_vichele_args& operator=(const vichele_management_confirm_vichele_args&);
  vichele_management_confirm_vichele_args() : ssid(), all_select(0) {
  }

  virtual ~vichele_management_confirm_vichele_args() noexcept;
  std::string ssid;
  std::vector<vichele_stay_alone>  info;
  std::vector<std::string>  company_for_select;
  bool all_select;

  _vichele_management_confirm_vichele_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_info(const std::vector<vichele_stay_alone> & val);

  void __set_company_for_select(const std::vector<std::string> & val);

  void __set_all_select(const bool val);

  bool operator == (const vichele_management_confirm_vichele_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(info == rhs.info))
      return false;
    if (!(company_for_select == rhs.company_for_select))
      return false;
    if (!(all_select == rhs.all_select))
      return false;
    return true;
  }
  bool operator != (const vichele_management_confirm_vichele_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_confirm_vichele_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_confirm_vichele_pargs {
 public:


  virtual ~vichele_management_confirm_vichele_pargs() noexcept;
  const std::string* ssid;
  const std::vector<vichele_stay_alone> * info;
  const std::vector<std::string> * company_for_select;
  const bool* all_select;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_confirm_vichele_result__isset {
  _vichele_management_confirm_vichele_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_confirm_vichele_result__isset;

class vichele_management_confirm_vichele_result {
 public:

  vichele_management_confirm_vichele_result(const vichele_management_confirm_vichele_result&);
  vichele_management_confirm_vichele_result& operator=(const vichele_management_confirm_vichele_result&);
  vichele_management_confirm_vichele_result() : success(0) {
  }

  virtual ~vichele_management_confirm_vichele_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_confirm_vichele_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_confirm_vichele_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_confirm_vichele_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_confirm_vichele_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_confirm_vichele_presult__isset {
  _vichele_management_confirm_vichele_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_confirm_vichele_presult__isset;

class vichele_management_confirm_vichele_presult {
 public:


  virtual ~vichele_management_confirm_vichele_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_confirm_vichele_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_cancel_vichele_args__isset {
  _vichele_management_cancel_vichele_args__isset() : ssid(false), info(false), all_select(false) {}
  bool ssid :1;
  bool info :1;
  bool all_select :1;
} _vichele_management_cancel_vichele_args__isset;

class vichele_management_cancel_vichele_args {
 public:

  vichele_management_cancel_vichele_args(const vichele_management_cancel_vichele_args&);
  vichele_management_cancel_vichele_args& operator=(const vichele_management_cancel_vichele_args&);
  vichele_management_cancel_vichele_args() : ssid(), all_select(0) {
  }

  virtual ~vichele_management_cancel_vichele_args() noexcept;
  std::string ssid;
  std::vector<vichele_stay_alone>  info;
  bool all_select;

  _vichele_management_cancel_vichele_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_info(const std::vector<vichele_stay_alone> & val);

  void __set_all_select(const bool val);

  bool operator == (const vichele_management_cancel_vichele_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(info == rhs.info))
      return false;
    if (!(all_select == rhs.all_select))
      return false;
    return true;
  }
  bool operator != (const vichele_management_cancel_vichele_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_cancel_vichele_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_cancel_vichele_pargs {
 public:


  virtual ~vichele_management_cancel_vichele_pargs() noexcept;
  const std::string* ssid;
  const std::vector<vichele_stay_alone> * info;
  const bool* all_select;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_cancel_vichele_result__isset {
  _vichele_management_cancel_vichele_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_cancel_vichele_result__isset;

class vichele_management_cancel_vichele_result {
 public:

  vichele_management_cancel_vichele_result(const vichele_management_cancel_vichele_result&);
  vichele_management_cancel_vichele_result& operator=(const vichele_management_cancel_vichele_result&);
  vichele_management_cancel_vichele_result() : success(0) {
  }

  virtual ~vichele_management_cancel_vichele_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_cancel_vichele_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_cancel_vichele_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_cancel_vichele_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_cancel_vichele_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_cancel_vichele_presult__isset {
  _vichele_management_cancel_vichele_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_cancel_vichele_presult__isset;

class vichele_management_cancel_vichele_presult {
 public:


  virtual ~vichele_management_cancel_vichele_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_cancel_vichele_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_create_vichele_team_args__isset {
  _vichele_management_create_vichele_team_args__isset() : open_id(false), team_info(false) {}
  bool open_id :1;
  bool team_info :1;
} _vichele_management_create_vichele_team_args__isset;

class vichele_management_create_vichele_team_args {
 public:

  vichele_management_create_vichele_team_args(const vichele_management_create_vichele_team_args&);
  vichele_management_create_vichele_team_args& operator=(const vichele_management_create_vichele_team_args&);
  vichele_management_create_vichele_team_args() : open_id() {
  }

  virtual ~vichele_management_create_vichele_team_args() noexcept;
  std::string open_id;
  vichele_team team_info;

  _vichele_management_create_vichele_team_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_team_info(const vichele_team& val);

  bool operator == (const vichele_management_create_vichele_team_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(team_info == rhs.team_info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_create_vichele_team_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_create_vichele_team_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_create_vichele_team_pargs {
 public:


  virtual ~vichele_management_create_vichele_team_pargs() noexcept;
  const std::string* open_id;
  const vichele_team* team_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_create_vichele_team_result__isset {
  _vichele_management_create_vichele_team_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_create_vichele_team_result__isset;

class vichele_management_create_vichele_team_result {
 public:

  vichele_management_create_vichele_team_result(const vichele_management_create_vichele_team_result&);
  vichele_management_create_vichele_team_result& operator=(const vichele_management_create_vichele_team_result&);
  vichele_management_create_vichele_team_result() : success(0) {
  }

  virtual ~vichele_management_create_vichele_team_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_create_vichele_team_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_create_vichele_team_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_create_vichele_team_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_create_vichele_team_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_create_vichele_team_presult__isset {
  _vichele_management_create_vichele_team_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_create_vichele_team_presult__isset;

class vichele_management_create_vichele_team_presult {
 public:


  virtual ~vichele_management_create_vichele_team_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_create_vichele_team_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_update_vichele_team_args__isset {
  _vichele_management_update_vichele_team_args__isset() : open_id(false), team_info(false) {}
  bool open_id :1;
  bool team_info :1;
} _vichele_management_update_vichele_team_args__isset;

class vichele_management_update_vichele_team_args {
 public:

  vichele_management_update_vichele_team_args(const vichele_management_update_vichele_team_args&);
  vichele_management_update_vichele_team_args& operator=(const vichele_management_update_vichele_team_args&);
  vichele_management_update_vichele_team_args() : open_id() {
  }

  virtual ~vichele_management_update_vichele_team_args() noexcept;
  std::string open_id;
  vichele_team team_info;

  _vichele_management_update_vichele_team_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_team_info(const vichele_team& val);

  bool operator == (const vichele_management_update_vichele_team_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(team_info == rhs.team_info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_update_vichele_team_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_update_vichele_team_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_update_vichele_team_pargs {
 public:


  virtual ~vichele_management_update_vichele_team_pargs() noexcept;
  const std::string* open_id;
  const vichele_team* team_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_update_vichele_team_result__isset {
  _vichele_management_update_vichele_team_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_update_vichele_team_result__isset;

class vichele_management_update_vichele_team_result {
 public:

  vichele_management_update_vichele_team_result(const vichele_management_update_vichele_team_result&);
  vichele_management_update_vichele_team_result& operator=(const vichele_management_update_vichele_team_result&);
  vichele_management_update_vichele_team_result() : success(0) {
  }

  virtual ~vichele_management_update_vichele_team_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_update_vichele_team_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_update_vichele_team_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_update_vichele_team_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_update_vichele_team_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_update_vichele_team_presult__isset {
  _vichele_management_update_vichele_team_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_update_vichele_team_presult__isset;

class vichele_management_update_vichele_team_presult {
 public:


  virtual ~vichele_management_update_vichele_team_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_update_vichele_team_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_del_vichele_team_args__isset {
  _vichele_management_del_vichele_team_args__isset() : open_id(false), team_id(false) {}
  bool open_id :1;
  bool team_id :1;
} _vichele_management_del_vichele_team_args__isset;

class vichele_management_del_vichele_team_args {
 public:

  vichele_management_del_vichele_team_args(const vichele_management_del_vichele_team_args&);
  vichele_management_del_vichele_team_args& operator=(const vichele_management_del_vichele_team_args&);
  vichele_management_del_vichele_team_args() : open_id(), team_id(0) {
  }

  virtual ~vichele_management_del_vichele_team_args() noexcept;
  std::string open_id;
  int64_t team_id;

  _vichele_management_del_vichele_team_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_team_id(const int64_t val);

  bool operator == (const vichele_management_del_vichele_team_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(team_id == rhs.team_id))
      return false;
    return true;
  }
  bool operator != (const vichele_management_del_vichele_team_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_del_vichele_team_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_del_vichele_team_pargs {
 public:


  virtual ~vichele_management_del_vichele_team_pargs() noexcept;
  const std::string* open_id;
  const int64_t* team_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_del_vichele_team_result__isset {
  _vichele_management_del_vichele_team_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_del_vichele_team_result__isset;

class vichele_management_del_vichele_team_result {
 public:

  vichele_management_del_vichele_team_result(const vichele_management_del_vichele_team_result&);
  vichele_management_del_vichele_team_result& operator=(const vichele_management_del_vichele_team_result&);
  vichele_management_del_vichele_team_result() : success(0) {
  }

  virtual ~vichele_management_del_vichele_team_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_del_vichele_team_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_del_vichele_team_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_del_vichele_team_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_del_vichele_team_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_del_vichele_team_presult__isset {
  _vichele_management_del_vichele_team_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_del_vichele_team_presult__isset;

class vichele_management_del_vichele_team_presult {
 public:


  virtual ~vichele_management_del_vichele_team_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_del_vichele_team_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_all_vichele_team_args__isset {
  _vichele_management_get_all_vichele_team_args__isset() : open_id(false) {}
  bool open_id :1;
} _vichele_management_get_all_vichele_team_args__isset;

class vichele_management_get_all_vichele_team_args {
 public:

  vichele_management_get_all_vichele_team_args(const vichele_management_get_all_vichele_team_args&);
  vichele_management_get_all_vichele_team_args& operator=(const vichele_management_get_all_vichele_team_args&);
  vichele_management_get_all_vichele_team_args() : open_id() {
  }

  virtual ~vichele_management_get_all_vichele_team_args() noexcept;
  std::string open_id;

  _vichele_management_get_all_vichele_team_args__isset __isset;

  void __set_open_id(const std::string& val);

  bool operator == (const vichele_management_get_all_vichele_team_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_all_vichele_team_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_all_vichele_team_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_all_vichele_team_pargs {
 public:


  virtual ~vichele_management_get_all_vichele_team_pargs() noexcept;
  const std::string* open_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_all_vichele_team_result__isset {
  _vichele_management_get_all_vichele_team_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_all_vichele_team_result__isset;

class vichele_management_get_all_vichele_team_result {
 public:

  vichele_management_get_all_vichele_team_result(const vichele_management_get_all_vichele_team_result&);
  vichele_management_get_all_vichele_team_result& operator=(const vichele_management_get_all_vichele_team_result&);
  vichele_management_get_all_vichele_team_result() {
  }

  virtual ~vichele_management_get_all_vichele_team_result() noexcept;
  std::vector<vichele_team>  success;
  gen_exp e;

  _vichele_management_get_all_vichele_team_result__isset __isset;

  void __set_success(const std::vector<vichele_team> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_all_vichele_team_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_all_vichele_team_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_all_vichele_team_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_all_vichele_team_presult__isset {
  _vichele_management_get_all_vichele_team_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_all_vichele_team_presult__isset;

class vichele_management_get_all_vichele_team_presult {
 public:


  virtual ~vichele_management_get_all_vichele_team_presult() noexcept;
  std::vector<vichele_team> * success;
  gen_exp e;

  _vichele_management_get_all_vichele_team_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_vichele_team_args__isset {
  _vichele_management_get_vichele_team_args__isset() : open_id(false), team_id(false) {}
  bool open_id :1;
  bool team_id :1;
} _vichele_management_get_vichele_team_args__isset;

class vichele_management_get_vichele_team_args {
 public:

  vichele_management_get_vichele_team_args(const vichele_management_get_vichele_team_args&);
  vichele_management_get_vichele_team_args& operator=(const vichele_management_get_vichele_team_args&);
  vichele_management_get_vichele_team_args() : open_id(), team_id(0) {
  }

  virtual ~vichele_management_get_vichele_team_args() noexcept;
  std::string open_id;
  int64_t team_id;

  _vichele_management_get_vichele_team_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_team_id(const int64_t val);

  bool operator == (const vichele_management_get_vichele_team_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(team_id == rhs.team_id))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_vichele_team_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_vichele_team_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_vichele_team_pargs {
 public:


  virtual ~vichele_management_get_vichele_team_pargs() noexcept;
  const std::string* open_id;
  const int64_t* team_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_vichele_team_result__isset {
  _vichele_management_get_vichele_team_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_vichele_team_result__isset;

class vichele_management_get_vichele_team_result {
 public:

  vichele_management_get_vichele_team_result(const vichele_management_get_vichele_team_result&);
  vichele_management_get_vichele_team_result& operator=(const vichele_management_get_vichele_team_result&);
  vichele_management_get_vichele_team_result() {
  }

  virtual ~vichele_management_get_vichele_team_result() noexcept;
  vichele_team success;
  gen_exp e;

  _vichele_management_get_vichele_team_result__isset __isset;

  void __set_success(const vichele_team& val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_vichele_team_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_vichele_team_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_vichele_team_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_vichele_team_presult__isset {
  _vichele_management_get_vichele_team_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_vichele_team_presult__isset;

class vichele_management_get_vichele_team_presult {
 public:


  virtual ~vichele_management_get_vichele_team_presult() noexcept;
  vichele_team* success;
  gen_exp e;

  _vichele_management_get_vichele_team_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_change_company_name_args__isset {
  _vichele_management_change_company_name_args__isset() : ssid(false), vichele_id(false), company_name(false) {}
  bool ssid :1;
  bool vichele_id :1;
  bool company_name :1;
} _vichele_management_change_company_name_args__isset;

class vichele_management_change_company_name_args {
 public:

  vichele_management_change_company_name_args(const vichele_management_change_company_name_args&);
  vichele_management_change_company_name_args& operator=(const vichele_management_change_company_name_args&);
  vichele_management_change_company_name_args() : ssid(), vichele_id(0), company_name() {
  }

  virtual ~vichele_management_change_company_name_args() noexcept;
  std::string ssid;
  int64_t vichele_id;
  std::string company_name;

  _vichele_management_change_company_name_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_vichele_id(const int64_t val);

  void __set_company_name(const std::string& val);

  bool operator == (const vichele_management_change_company_name_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    if (!(company_name == rhs.company_name))
      return false;
    return true;
  }
  bool operator != (const vichele_management_change_company_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_change_company_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_change_company_name_pargs {
 public:


  virtual ~vichele_management_change_company_name_pargs() noexcept;
  const std::string* ssid;
  const int64_t* vichele_id;
  const std::string* company_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_change_company_name_result__isset {
  _vichele_management_change_company_name_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_change_company_name_result__isset;

class vichele_management_change_company_name_result {
 public:

  vichele_management_change_company_name_result(const vichele_management_change_company_name_result&);
  vichele_management_change_company_name_result& operator=(const vichele_management_change_company_name_result&);
  vichele_management_change_company_name_result() : success(0) {
  }

  virtual ~vichele_management_change_company_name_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_change_company_name_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_change_company_name_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_change_company_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_change_company_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_change_company_name_presult__isset {
  _vichele_management_change_company_name_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_change_company_name_presult__isset;

class vichele_management_change_company_name_presult {
 public:


  virtual ~vichele_management_change_company_name_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_change_company_name_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_fill_company_name_args__isset {
  _vichele_management_fill_company_name_args__isset() : open_id(false), vichele_id(false), company_name(false) {}
  bool open_id :1;
  bool vichele_id :1;
  bool company_name :1;
} _vichele_management_fill_company_name_args__isset;

class vichele_management_fill_company_name_args {
 public:

  vichele_management_fill_company_name_args(const vichele_management_fill_company_name_args&);
  vichele_management_fill_company_name_args& operator=(const vichele_management_fill_company_name_args&);
  vichele_management_fill_company_name_args() : open_id(), vichele_id(0), company_name() {
  }

  virtual ~vichele_management_fill_company_name_args() noexcept;
  std::string open_id;
  int64_t vichele_id;
  std::string company_name;

  _vichele_management_fill_company_name_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_id(const int64_t val);

  void __set_company_name(const std::string& val);

  bool operator == (const vichele_management_fill_company_name_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    if (!(company_name == rhs.company_name))
      return false;
    return true;
  }
  bool operator != (const vichele_management_fill_company_name_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_fill_company_name_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_fill_company_name_pargs {
 public:


  virtual ~vichele_management_fill_company_name_pargs() noexcept;
  const std::string* open_id;
  const int64_t* vichele_id;
  const std::string* company_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_fill_company_name_result__isset {
  _vichele_management_fill_company_name_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_fill_company_name_result__isset;

class vichele_management_fill_company_name_result {
 public:

  vichele_management_fill_company_name_result(const vichele_management_fill_company_name_result&);
  vichele_management_fill_company_name_result& operator=(const vichele_management_fill_company_name_result&);
  vichele_management_fill_company_name_result() : success(0) {
  }

  virtual ~vichele_management_fill_company_name_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_fill_company_name_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_fill_company_name_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_fill_company_name_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_fill_company_name_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_fill_company_name_presult__isset {
  _vichele_management_fill_company_name_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_fill_company_name_presult__isset;

class vichele_management_fill_company_name_presult {
 public:


  virtual ~vichele_management_fill_company_name_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_fill_company_name_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_company_history_args__isset {
  _vichele_management_company_history_args__isset() : ssid(false) {}
  bool ssid :1;
} _vichele_management_company_history_args__isset;

class vichele_management_company_history_args {
 public:

  vichele_management_company_history_args(const vichele_management_company_history_args&);
  vichele_management_company_history_args& operator=(const vichele_management_company_history_args&);
  vichele_management_company_history_args() : ssid() {
  }

  virtual ~vichele_management_company_history_args() noexcept;
  std::string ssid;

  _vichele_management_company_history_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const vichele_management_company_history_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const vichele_management_company_history_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_company_history_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_company_history_pargs {
 public:


  virtual ~vichele_management_company_history_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_company_history_result__isset {
  _vichele_management_company_history_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_company_history_result__isset;

class vichele_management_company_history_result {
 public:

  vichele_management_company_history_result(const vichele_management_company_history_result&);
  vichele_management_company_history_result& operator=(const vichele_management_company_history_result&);
  vichele_management_company_history_result() {
  }

  virtual ~vichele_management_company_history_result() noexcept;
  std::vector<std::string>  success;
  gen_exp e;

  _vichele_management_company_history_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_company_history_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_company_history_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_company_history_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_company_history_presult__isset {
  _vichele_management_company_history_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_company_history_presult__isset;

class vichele_management_company_history_presult {
 public:


  virtual ~vichele_management_company_history_presult() noexcept;
  std::vector<std::string> * success;
  gen_exp e;

  _vichele_management_company_history_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_add_supplier_args__isset {
  _vichele_management_add_supplier_args__isset() : ssid(false), supplier_info(false) {}
  bool ssid :1;
  bool supplier_info :1;
} _vichele_management_add_supplier_args__isset;

class vichele_management_add_supplier_args {
 public:

  vichele_management_add_supplier_args(const vichele_management_add_supplier_args&);
  vichele_management_add_supplier_args& operator=(const vichele_management_add_supplier_args&);
  vichele_management_add_supplier_args() : ssid() {
  }

  virtual ~vichele_management_add_supplier_args() noexcept;
  std::string ssid;
  supplier_basic_info supplier_info;

  _vichele_management_add_supplier_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_supplier_info(const supplier_basic_info& val);

  bool operator == (const vichele_management_add_supplier_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(supplier_info == rhs.supplier_info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_add_supplier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_add_supplier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_add_supplier_pargs {
 public:


  virtual ~vichele_management_add_supplier_pargs() noexcept;
  const std::string* ssid;
  const supplier_basic_info* supplier_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_add_supplier_result__isset {
  _vichele_management_add_supplier_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_add_supplier_result__isset;

class vichele_management_add_supplier_result {
 public:

  vichele_management_add_supplier_result(const vichele_management_add_supplier_result&);
  vichele_management_add_supplier_result& operator=(const vichele_management_add_supplier_result&);
  vichele_management_add_supplier_result() : success(0) {
  }

  virtual ~vichele_management_add_supplier_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_add_supplier_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_add_supplier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_add_supplier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_add_supplier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_add_supplier_presult__isset {
  _vichele_management_add_supplier_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_add_supplier_presult__isset;

class vichele_management_add_supplier_presult {
 public:


  virtual ~vichele_management_add_supplier_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_add_supplier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_update_supplier_args__isset {
  _vichele_management_update_supplier_args__isset() : ssid(false), supplier_info(false) {}
  bool ssid :1;
  bool supplier_info :1;
} _vichele_management_update_supplier_args__isset;

class vichele_management_update_supplier_args {
 public:

  vichele_management_update_supplier_args(const vichele_management_update_supplier_args&);
  vichele_management_update_supplier_args& operator=(const vichele_management_update_supplier_args&);
  vichele_management_update_supplier_args() : ssid() {
  }

  virtual ~vichele_management_update_supplier_args() noexcept;
  std::string ssid;
  supplier_basic_info supplier_info;

  _vichele_management_update_supplier_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_supplier_info(const supplier_basic_info& val);

  bool operator == (const vichele_management_update_supplier_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(supplier_info == rhs.supplier_info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_update_supplier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_update_supplier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_update_supplier_pargs {
 public:


  virtual ~vichele_management_update_supplier_pargs() noexcept;
  const std::string* ssid;
  const supplier_basic_info* supplier_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_update_supplier_result__isset {
  _vichele_management_update_supplier_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_update_supplier_result__isset;

class vichele_management_update_supplier_result {
 public:

  vichele_management_update_supplier_result(const vichele_management_update_supplier_result&);
  vichele_management_update_supplier_result& operator=(const vichele_management_update_supplier_result&);
  vichele_management_update_supplier_result() : success(0) {
  }

  virtual ~vichele_management_update_supplier_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_update_supplier_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_update_supplier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_update_supplier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_update_supplier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_update_supplier_presult__isset {
  _vichele_management_update_supplier_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_update_supplier_presult__isset;

class vichele_management_update_supplier_presult {
 public:


  virtual ~vichele_management_update_supplier_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_update_supplier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_del_supplier_args__isset {
  _vichele_management_del_supplier_args__isset() : ssid(false), supplier_id(false) {}
  bool ssid :1;
  bool supplier_id :1;
} _vichele_management_del_supplier_args__isset;

class vichele_management_del_supplier_args {
 public:

  vichele_management_del_supplier_args(const vichele_management_del_supplier_args&);
  vichele_management_del_supplier_args& operator=(const vichele_management_del_supplier_args&);
  vichele_management_del_supplier_args() : ssid(), supplier_id(0) {
  }

  virtual ~vichele_management_del_supplier_args() noexcept;
  std::string ssid;
  int64_t supplier_id;

  _vichele_management_del_supplier_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_supplier_id(const int64_t val);

  bool operator == (const vichele_management_del_supplier_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(supplier_id == rhs.supplier_id))
      return false;
    return true;
  }
  bool operator != (const vichele_management_del_supplier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_del_supplier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_del_supplier_pargs {
 public:


  virtual ~vichele_management_del_supplier_pargs() noexcept;
  const std::string* ssid;
  const int64_t* supplier_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_del_supplier_result__isset {
  _vichele_management_del_supplier_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_del_supplier_result__isset;

class vichele_management_del_supplier_result {
 public:

  vichele_management_del_supplier_result(const vichele_management_del_supplier_result&);
  vichele_management_del_supplier_result& operator=(const vichele_management_del_supplier_result&);
  vichele_management_del_supplier_result() : success(0) {
  }

  virtual ~vichele_management_del_supplier_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_del_supplier_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_del_supplier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_del_supplier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_del_supplier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_del_supplier_presult__isset {
  _vichele_management_del_supplier_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_del_supplier_presult__isset;

class vichele_management_del_supplier_presult {
 public:


  virtual ~vichele_management_del_supplier_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_del_supplier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_all_supplier_args__isset {
  _vichele_management_get_all_supplier_args__isset() : ssid(false) {}
  bool ssid :1;
} _vichele_management_get_all_supplier_args__isset;

class vichele_management_get_all_supplier_args {
 public:

  vichele_management_get_all_supplier_args(const vichele_management_get_all_supplier_args&);
  vichele_management_get_all_supplier_args& operator=(const vichele_management_get_all_supplier_args&);
  vichele_management_get_all_supplier_args() : ssid() {
  }

  virtual ~vichele_management_get_all_supplier_args() noexcept;
  std::string ssid;

  _vichele_management_get_all_supplier_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const vichele_management_get_all_supplier_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_all_supplier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_all_supplier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_all_supplier_pargs {
 public:


  virtual ~vichele_management_get_all_supplier_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_all_supplier_result__isset {
  _vichele_management_get_all_supplier_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_all_supplier_result__isset;

class vichele_management_get_all_supplier_result {
 public:

  vichele_management_get_all_supplier_result(const vichele_management_get_all_supplier_result&);
  vichele_management_get_all_supplier_result& operator=(const vichele_management_get_all_supplier_result&);
  vichele_management_get_all_supplier_result() {
  }

  virtual ~vichele_management_get_all_supplier_result() noexcept;
  std::vector<supplier_basic_info>  success;
  gen_exp e;

  _vichele_management_get_all_supplier_result__isset __isset;

  void __set_success(const std::vector<supplier_basic_info> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_all_supplier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_all_supplier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_all_supplier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_all_supplier_presult__isset {
  _vichele_management_get_all_supplier_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_all_supplier_presult__isset;

class vichele_management_get_all_supplier_presult {
 public:


  virtual ~vichele_management_get_all_supplier_presult() noexcept;
  std::vector<supplier_basic_info> * success;
  gen_exp e;

  _vichele_management_get_all_supplier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_smart_assign_args__isset {
  _vichele_management_smart_assign_args__isset() : ssid(false), vichele_info(false) {}
  bool ssid :1;
  bool vichele_info :1;
} _vichele_management_smart_assign_args__isset;

class vichele_management_smart_assign_args {
 public:

  vichele_management_smart_assign_args(const vichele_management_smart_assign_args&);
  vichele_management_smart_assign_args& operator=(const vichele_management_smart_assign_args&);
  vichele_management_smart_assign_args() : ssid() {
  }

  virtual ~vichele_management_smart_assign_args() noexcept;
  std::string ssid;
  std::vector<vichele_stay_alone>  vichele_info;

  _vichele_management_smart_assign_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_vichele_info(const std::vector<vichele_stay_alone> & val);

  bool operator == (const vichele_management_smart_assign_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(vichele_info == rhs.vichele_info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_smart_assign_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_smart_assign_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_smart_assign_pargs {
 public:


  virtual ~vichele_management_smart_assign_pargs() noexcept;
  const std::string* ssid;
  const std::vector<vichele_stay_alone> * vichele_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_smart_assign_result__isset {
  _vichele_management_smart_assign_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_smart_assign_result__isset;

class vichele_management_smart_assign_result {
 public:

  vichele_management_smart_assign_result(const vichele_management_smart_assign_result&);
  vichele_management_smart_assign_result& operator=(const vichele_management_smart_assign_result&);
  vichele_management_smart_assign_result() : success() {
  }

  virtual ~vichele_management_smart_assign_result() noexcept;
  std::string success;
  gen_exp e;

  _vichele_management_smart_assign_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_smart_assign_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_smart_assign_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_smart_assign_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_smart_assign_presult__isset {
  _vichele_management_smart_assign_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_smart_assign_presult__isset;

class vichele_management_smart_assign_presult {
 public:


  virtual ~vichele_management_smart_assign_presult() noexcept;
  std::string* success;
  gen_exp e;

  _vichele_management_smart_assign_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_max_vichele_by_supplier_args__isset {
  _vichele_management_get_max_vichele_by_supplier_args__isset() : supplier(false), company(false) {}
  bool supplier :1;
  bool company :1;
} _vichele_management_get_max_vichele_by_supplier_args__isset;

class vichele_management_get_max_vichele_by_supplier_args {
 public:

  vichele_management_get_max_vichele_by_supplier_args(const vichele_management_get_max_vichele_by_supplier_args&);
  vichele_management_get_max_vichele_by_supplier_args& operator=(const vichele_management_get_max_vichele_by_supplier_args&);
  vichele_management_get_max_vichele_by_supplier_args() : supplier(), company() {
  }

  virtual ~vichele_management_get_max_vichele_by_supplier_args() noexcept;
  std::string supplier;
  std::string company;

  _vichele_management_get_max_vichele_by_supplier_args__isset __isset;

  void __set_supplier(const std::string& val);

  void __set_company(const std::string& val);

  bool operator == (const vichele_management_get_max_vichele_by_supplier_args & rhs) const
  {
    if (!(supplier == rhs.supplier))
      return false;
    if (!(company == rhs.company))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_max_vichele_by_supplier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_max_vichele_by_supplier_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_max_vichele_by_supplier_pargs {
 public:


  virtual ~vichele_management_get_max_vichele_by_supplier_pargs() noexcept;
  const std::string* supplier;
  const std::string* company;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_max_vichele_by_supplier_result__isset {
  _vichele_management_get_max_vichele_by_supplier_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_max_vichele_by_supplier_result__isset;

class vichele_management_get_max_vichele_by_supplier_result {
 public:

  vichele_management_get_max_vichele_by_supplier_result(const vichele_management_get_max_vichele_by_supplier_result&);
  vichele_management_get_max_vichele_by_supplier_result& operator=(const vichele_management_get_max_vichele_by_supplier_result&);
  vichele_management_get_max_vichele_by_supplier_result() : success(0) {
  }

  virtual ~vichele_management_get_max_vichele_by_supplier_result() noexcept;
  int64_t success;
  gen_exp e;

  _vichele_management_get_max_vichele_by_supplier_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_max_vichele_by_supplier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_max_vichele_by_supplier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_max_vichele_by_supplier_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_max_vichele_by_supplier_presult__isset {
  _vichele_management_get_max_vichele_by_supplier_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_max_vichele_by_supplier_presult__isset;

class vichele_management_get_max_vichele_by_supplier_presult {
 public:


  virtual ~vichele_management_get_max_vichele_by_supplier_presult() noexcept;
  int64_t* success;
  gen_exp e;

  _vichele_management_get_max_vichele_by_supplier_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_fill_tmd_args__isset {
  _vichele_management_fill_tmd_args__isset() : open_id(false), vichele_id(false), tmd_no(false) {}
  bool open_id :1;
  bool vichele_id :1;
  bool tmd_no :1;
} _vichele_management_fill_tmd_args__isset;

class vichele_management_fill_tmd_args {
 public:

  vichele_management_fill_tmd_args(const vichele_management_fill_tmd_args&);
  vichele_management_fill_tmd_args& operator=(const vichele_management_fill_tmd_args&);
  vichele_management_fill_tmd_args() : open_id(), vichele_id(0), tmd_no() {
  }

  virtual ~vichele_management_fill_tmd_args() noexcept;
  std::string open_id;
  int64_t vichele_id;
  std::string tmd_no;

  _vichele_management_fill_tmd_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_id(const int64_t val);

  void __set_tmd_no(const std::string& val);

  bool operator == (const vichele_management_fill_tmd_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    if (!(tmd_no == rhs.tmd_no))
      return false;
    return true;
  }
  bool operator != (const vichele_management_fill_tmd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_fill_tmd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_fill_tmd_pargs {
 public:


  virtual ~vichele_management_fill_tmd_pargs() noexcept;
  const std::string* open_id;
  const int64_t* vichele_id;
  const std::string* tmd_no;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_fill_tmd_result__isset {
  _vichele_management_fill_tmd_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_fill_tmd_result__isset;

class vichele_management_fill_tmd_result {
 public:

  vichele_management_fill_tmd_result(const vichele_management_fill_tmd_result&);
  vichele_management_fill_tmd_result& operator=(const vichele_management_fill_tmd_result&);
  vichele_management_fill_tmd_result() : success(0) {
  }

  virtual ~vichele_management_fill_tmd_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_fill_tmd_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_fill_tmd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_fill_tmd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_fill_tmd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_fill_tmd_presult__isset {
  _vichele_management_fill_tmd_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_fill_tmd_presult__isset;

class vichele_management_fill_tmd_presult {
 public:


  virtual ~vichele_management_fill_tmd_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_fill_tmd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_fill_enter_weight_args__isset {
  _vichele_management_fill_enter_weight_args__isset() : open_id(false), vichele_id(false), enter_weight(false) {}
  bool open_id :1;
  bool vichele_id :1;
  bool enter_weight :1;
} _vichele_management_fill_enter_weight_args__isset;

class vichele_management_fill_enter_weight_args {
 public:

  vichele_management_fill_enter_weight_args(const vichele_management_fill_enter_weight_args&);
  vichele_management_fill_enter_weight_args& operator=(const vichele_management_fill_enter_weight_args&);
  vichele_management_fill_enter_weight_args() : open_id(), vichele_id(0), enter_weight(0) {
  }

  virtual ~vichele_management_fill_enter_weight_args() noexcept;
  std::string open_id;
  int64_t vichele_id;
  double enter_weight;

  _vichele_management_fill_enter_weight_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_id(const int64_t val);

  void __set_enter_weight(const double val);

  bool operator == (const vichele_management_fill_enter_weight_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    if (!(enter_weight == rhs.enter_weight))
      return false;
    return true;
  }
  bool operator != (const vichele_management_fill_enter_weight_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_fill_enter_weight_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_fill_enter_weight_pargs {
 public:


  virtual ~vichele_management_fill_enter_weight_pargs() noexcept;
  const std::string* open_id;
  const int64_t* vichele_id;
  const double* enter_weight;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_fill_enter_weight_result__isset {
  _vichele_management_fill_enter_weight_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_fill_enter_weight_result__isset;

class vichele_management_fill_enter_weight_result {
 public:

  vichele_management_fill_enter_weight_result(const vichele_management_fill_enter_weight_result&);
  vichele_management_fill_enter_weight_result& operator=(const vichele_management_fill_enter_weight_result&);
  vichele_management_fill_enter_weight_result() : success(0) {
  }

  virtual ~vichele_management_fill_enter_weight_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_fill_enter_weight_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_fill_enter_weight_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_fill_enter_weight_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_fill_enter_weight_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_fill_enter_weight_presult__isset {
  _vichele_management_fill_enter_weight_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_fill_enter_weight_presult__isset;

class vichele_management_fill_enter_weight_presult {
 public:


  virtual ~vichele_management_fill_enter_weight_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_fill_enter_weight_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_fill_weight_attach_args__isset {
  _vichele_management_fill_weight_attach_args__isset() : open_id(false), vichele_id(false), weight_attach(false) {}
  bool open_id :1;
  bool vichele_id :1;
  bool weight_attach :1;
} _vichele_management_fill_weight_attach_args__isset;

class vichele_management_fill_weight_attach_args {
 public:

  vichele_management_fill_weight_attach_args(const vichele_management_fill_weight_attach_args&);
  vichele_management_fill_weight_attach_args& operator=(const vichele_management_fill_weight_attach_args&);
  vichele_management_fill_weight_attach_args() : open_id(), vichele_id(0), weight_attach() {
  }

  virtual ~vichele_management_fill_weight_attach_args() noexcept;
  std::string open_id;
  int64_t vichele_id;
  std::string weight_attach;

  _vichele_management_fill_weight_attach_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_id(const int64_t val);

  void __set_weight_attach(const std::string& val);

  bool operator == (const vichele_management_fill_weight_attach_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    if (!(weight_attach == rhs.weight_attach))
      return false;
    return true;
  }
  bool operator != (const vichele_management_fill_weight_attach_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_fill_weight_attach_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_fill_weight_attach_pargs {
 public:


  virtual ~vichele_management_fill_weight_attach_pargs() noexcept;
  const std::string* open_id;
  const int64_t* vichele_id;
  const std::string* weight_attach;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_fill_weight_attach_result__isset {
  _vichele_management_fill_weight_attach_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_fill_weight_attach_result__isset;

class vichele_management_fill_weight_attach_result {
 public:

  vichele_management_fill_weight_attach_result(const vichele_management_fill_weight_attach_result&);
  vichele_management_fill_weight_attach_result& operator=(const vichele_management_fill_weight_attach_result&);
  vichele_management_fill_weight_attach_result() : success(0) {
  }

  virtual ~vichele_management_fill_weight_attach_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_fill_weight_attach_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_fill_weight_attach_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_fill_weight_attach_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_fill_weight_attach_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_fill_weight_attach_presult__isset {
  _vichele_management_fill_weight_attach_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_fill_weight_attach_presult__isset;

class vichele_management_fill_weight_attach_presult {
 public:


  virtual ~vichele_management_fill_weight_attach_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_fill_weight_attach_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_add_exception_args__isset {
  _vichele_management_add_exception_args__isset() : ssid(false), stuff_name(false) {}
  bool ssid :1;
  bool stuff_name :1;
} _vichele_management_add_exception_args__isset;

class vichele_management_add_exception_args {
 public:

  vichele_management_add_exception_args(const vichele_management_add_exception_args&);
  vichele_management_add_exception_args& operator=(const vichele_management_add_exception_args&);
  vichele_management_add_exception_args() : ssid(), stuff_name() {
  }

  virtual ~vichele_management_add_exception_args() noexcept;
  std::string ssid;
  std::string stuff_name;

  _vichele_management_add_exception_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_stuff_name(const std::string& val);

  bool operator == (const vichele_management_add_exception_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(stuff_name == rhs.stuff_name))
      return false;
    return true;
  }
  bool operator != (const vichele_management_add_exception_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_add_exception_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_add_exception_pargs {
 public:


  virtual ~vichele_management_add_exception_pargs() noexcept;
  const std::string* ssid;
  const std::string* stuff_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_add_exception_result__isset {
  _vichele_management_add_exception_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_add_exception_result__isset;

class vichele_management_add_exception_result {
 public:

  vichele_management_add_exception_result(const vichele_management_add_exception_result&);
  vichele_management_add_exception_result& operator=(const vichele_management_add_exception_result&);
  vichele_management_add_exception_result() : success(0) {
  }

  virtual ~vichele_management_add_exception_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_add_exception_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_add_exception_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_add_exception_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_add_exception_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_add_exception_presult__isset {
  _vichele_management_add_exception_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_add_exception_presult__isset;

class vichele_management_add_exception_presult {
 public:


  virtual ~vichele_management_add_exception_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_add_exception_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_del_exception_args__isset {
  _vichele_management_del_exception_args__isset() : ssid(false), stuff_name(false) {}
  bool ssid :1;
  bool stuff_name :1;
} _vichele_management_del_exception_args__isset;

class vichele_management_del_exception_args {
 public:

  vichele_management_del_exception_args(const vichele_management_del_exception_args&);
  vichele_management_del_exception_args& operator=(const vichele_management_del_exception_args&);
  vichele_management_del_exception_args() : ssid(), stuff_name() {
  }

  virtual ~vichele_management_del_exception_args() noexcept;
  std::string ssid;
  std::string stuff_name;

  _vichele_management_del_exception_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_stuff_name(const std::string& val);

  bool operator == (const vichele_management_del_exception_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(stuff_name == rhs.stuff_name))
      return false;
    return true;
  }
  bool operator != (const vichele_management_del_exception_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_del_exception_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_del_exception_pargs {
 public:


  virtual ~vichele_management_del_exception_pargs() noexcept;
  const std::string* ssid;
  const std::string* stuff_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_del_exception_result__isset {
  _vichele_management_del_exception_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_del_exception_result__isset;

class vichele_management_del_exception_result {
 public:

  vichele_management_del_exception_result(const vichele_management_del_exception_result&);
  vichele_management_del_exception_result& operator=(const vichele_management_del_exception_result&);
  vichele_management_del_exception_result() : success(0) {
  }

  virtual ~vichele_management_del_exception_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_del_exception_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_del_exception_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_del_exception_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_del_exception_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_del_exception_presult__isset {
  _vichele_management_del_exception_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_del_exception_presult__isset;

class vichele_management_del_exception_presult {
 public:


  virtual ~vichele_management_del_exception_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_del_exception_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_all_exceptions_args__isset {
  _vichele_management_get_all_exceptions_args__isset() : ssid(false) {}
  bool ssid :1;
} _vichele_management_get_all_exceptions_args__isset;

class vichele_management_get_all_exceptions_args {
 public:

  vichele_management_get_all_exceptions_args(const vichele_management_get_all_exceptions_args&);
  vichele_management_get_all_exceptions_args& operator=(const vichele_management_get_all_exceptions_args&);
  vichele_management_get_all_exceptions_args() : ssid() {
  }

  virtual ~vichele_management_get_all_exceptions_args() noexcept;
  std::string ssid;

  _vichele_management_get_all_exceptions_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const vichele_management_get_all_exceptions_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_all_exceptions_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_all_exceptions_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_all_exceptions_pargs {
 public:


  virtual ~vichele_management_get_all_exceptions_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_all_exceptions_result__isset {
  _vichele_management_get_all_exceptions_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_all_exceptions_result__isset;

class vichele_management_get_all_exceptions_result {
 public:

  vichele_management_get_all_exceptions_result(const vichele_management_get_all_exceptions_result&);
  vichele_management_get_all_exceptions_result& operator=(const vichele_management_get_all_exceptions_result&);
  vichele_management_get_all_exceptions_result() {
  }

  virtual ~vichele_management_get_all_exceptions_result() noexcept;
  std::vector<std::string>  success;
  gen_exp e;

  _vichele_management_get_all_exceptions_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_all_exceptions_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_all_exceptions_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_all_exceptions_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_all_exceptions_presult__isset {
  _vichele_management_get_all_exceptions_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_all_exceptions_presult__isset;

class vichele_management_get_all_exceptions_presult {
 public:


  virtual ~vichele_management_get_all_exceptions_presult() noexcept;
  std::vector<std::string> * success;
  gen_exp e;

  _vichele_management_get_all_exceptions_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_company_brief_args__isset {
  _vichele_management_get_company_brief_args__isset() : ssid(false) {}
  bool ssid :1;
} _vichele_management_get_company_brief_args__isset;

class vichele_management_get_company_brief_args {
 public:

  vichele_management_get_company_brief_args(const vichele_management_get_company_brief_args&);
  vichele_management_get_company_brief_args& operator=(const vichele_management_get_company_brief_args&);
  vichele_management_get_company_brief_args() : ssid() {
  }

  virtual ~vichele_management_get_company_brief_args() noexcept;
  std::string ssid;

  _vichele_management_get_company_brief_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const vichele_management_get_company_brief_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_company_brief_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_company_brief_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_company_brief_pargs {
 public:


  virtual ~vichele_management_get_company_brief_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_company_brief_result__isset {
  _vichele_management_get_company_brief_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_company_brief_result__isset;

class vichele_management_get_company_brief_result {
 public:

  vichele_management_get_company_brief_result(const vichele_management_get_company_brief_result&);
  vichele_management_get_company_brief_result& operator=(const vichele_management_get_company_brief_result&);
  vichele_management_get_company_brief_result() {
  }

  virtual ~vichele_management_get_company_brief_result() noexcept;
  single_vichele_brief success;
  gen_exp e;

  _vichele_management_get_company_brief_result__isset __isset;

  void __set_success(const single_vichele_brief& val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_company_brief_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_company_brief_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_company_brief_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_company_brief_presult__isset {
  _vichele_management_get_company_brief_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_company_brief_presult__isset;

class vichele_management_get_company_brief_presult {
 public:


  virtual ~vichele_management_get_company_brief_presult() noexcept;
  single_vichele_brief* success;
  gen_exp e;

  _vichele_management_get_company_brief_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class vichele_managementClient : virtual public vichele_managementIf {
 public:
  vichele_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  vichele_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info);
  void send_create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info);
  bool recv_create_vichele_info();
  bool delete_vichele_info(const std::string& open_id, const int64_t vichele_id);
  void send_delete_vichele_info(const std::string& open_id, const int64_t vichele_id);
  bool recv_delete_vichele_info();
  bool update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info);
  void send_update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info);
  bool recv_update_vichele_info();
  void get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& open_id, const int64_t ancher);
  void send_get_created_vichele_info(const std::string& open_id, const int64_t ancher);
  void recv_get_created_vichele_info(std::vector<vichele_stay_alone> & _return);
  void silent_login(std::string& _return, const std::string& code);
  void send_silent_login(const std::string& code);
  void recv_silent_login(std::string& _return);
  bool verify_login(const std::string& open_id);
  void send_verify_login(const std::string& open_id);
  bool recv_verify_login();
  void get_silent_user_info(silent_user_info& _return, const std::string& open_id);
  void send_get_silent_user_info(const std::string& open_id);
  void recv_get_silent_user_info(silent_user_info& _return);
  void set_silent_user_info(const std::string& open_id, const silent_user_info& info);
  void send_set_silent_user_info(const std::string& open_id, const silent_user_info& info);
  void recv_set_silent_user_info();
  void get_input_history(std::vector<std::string> & _return, const std::string& open_id, const vichele_stay_alone& search_key);
  void send_get_input_history(const std::string& open_id, const vichele_stay_alone& search_key);
  void recv_get_input_history(std::vector<std::string> & _return);
  void get_company_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& enter_date, const std::string& stuff_name, const std::string& supplier_name, const std::string& vichele_number);
  void send_get_company_vichele_info(const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& enter_date, const std::string& stuff_name, const std::string& supplier_name, const std::string& vichele_number);
  void recv_get_company_vichele_info(std::vector<vichele_stay_alone> & _return);
  bool confirm_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const std::vector<std::string> & company_for_select, const bool all_select);
  void send_confirm_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const std::vector<std::string> & company_for_select, const bool all_select);
  bool recv_confirm_vichele();
  bool cancel_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const bool all_select);
  void send_cancel_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const bool all_select);
  bool recv_cancel_vichele();
  bool create_vichele_team(const std::string& open_id, const vichele_team& team_info);
  void send_create_vichele_team(const std::string& open_id, const vichele_team& team_info);
  bool recv_create_vichele_team();
  bool update_vichele_team(const std::string& open_id, const vichele_team& team_info);
  void send_update_vichele_team(const std::string& open_id, const vichele_team& team_info);
  bool recv_update_vichele_team();
  bool del_vichele_team(const std::string& open_id, const int64_t team_id);
  void send_del_vichele_team(const std::string& open_id, const int64_t team_id);
  bool recv_del_vichele_team();
  void get_all_vichele_team(std::vector<vichele_team> & _return, const std::string& open_id);
  void send_get_all_vichele_team(const std::string& open_id);
  void recv_get_all_vichele_team(std::vector<vichele_team> & _return);
  void get_vichele_team(vichele_team& _return, const std::string& open_id, const int64_t team_id);
  void send_get_vichele_team(const std::string& open_id, const int64_t team_id);
  void recv_get_vichele_team(vichele_team& _return);
  bool change_company_name(const std::string& ssid, const int64_t vichele_id, const std::string& company_name);
  void send_change_company_name(const std::string& ssid, const int64_t vichele_id, const std::string& company_name);
  bool recv_change_company_name();
  bool fill_company_name(const std::string& open_id, const int64_t vichele_id, const std::string& company_name);
  void send_fill_company_name(const std::string& open_id, const int64_t vichele_id, const std::string& company_name);
  bool recv_fill_company_name();
  void company_history(std::vector<std::string> & _return, const std::string& ssid);
  void send_company_history(const std::string& ssid);
  void recv_company_history(std::vector<std::string> & _return);
  bool add_supplier(const std::string& ssid, const supplier_basic_info& supplier_info);
  void send_add_supplier(const std::string& ssid, const supplier_basic_info& supplier_info);
  bool recv_add_supplier();
  bool update_supplier(const std::string& ssid, const supplier_basic_info& supplier_info);
  void send_update_supplier(const std::string& ssid, const supplier_basic_info& supplier_info);
  bool recv_update_supplier();
  bool del_supplier(const std::string& ssid, const int64_t supplier_id);
  void send_del_supplier(const std::string& ssid, const int64_t supplier_id);
  bool recv_del_supplier();
  void get_all_supplier(std::vector<supplier_basic_info> & _return, const std::string& ssid);
  void send_get_all_supplier(const std::string& ssid);
  void recv_get_all_supplier(std::vector<supplier_basic_info> & _return);
  void smart_assign(std::string& _return, const std::string& ssid, const std::vector<vichele_stay_alone> & vichele_info);
  void send_smart_assign(const std::string& ssid, const std::vector<vichele_stay_alone> & vichele_info);
  void recv_smart_assign(std::string& _return);
  int64_t get_max_vichele_by_supplier(const std::string& supplier, const std::string& company);
  void send_get_max_vichele_by_supplier(const std::string& supplier, const std::string& company);
  int64_t recv_get_max_vichele_by_supplier();
  bool fill_tmd(const std::string& open_id, const int64_t vichele_id, const std::string& tmd_no);
  void send_fill_tmd(const std::string& open_id, const int64_t vichele_id, const std::string& tmd_no);
  bool recv_fill_tmd();
  bool fill_enter_weight(const std::string& open_id, const int64_t vichele_id, const double enter_weight);
  void send_fill_enter_weight(const std::string& open_id, const int64_t vichele_id, const double enter_weight);
  bool recv_fill_enter_weight();
  bool fill_weight_attach(const std::string& open_id, const int64_t vichele_id, const std::string& weight_attach);
  void send_fill_weight_attach(const std::string& open_id, const int64_t vichele_id, const std::string& weight_attach);
  bool recv_fill_weight_attach();
  bool add_exception(const std::string& ssid, const std::string& stuff_name);
  void send_add_exception(const std::string& ssid, const std::string& stuff_name);
  bool recv_add_exception();
  bool del_exception(const std::string& ssid, const std::string& stuff_name);
  void send_del_exception(const std::string& ssid, const std::string& stuff_name);
  bool recv_del_exception();
  void get_all_exceptions(std::vector<std::string> & _return, const std::string& ssid);
  void send_get_all_exceptions(const std::string& ssid);
  void recv_get_all_exceptions(std::vector<std::string> & _return);
  void get_company_brief(single_vichele_brief& _return, const std::string& ssid);
  void send_get_company_brief(const std::string& ssid);
  void recv_get_company_brief(single_vichele_brief& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class vichele_managementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<vichele_managementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (vichele_managementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create_vichele_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_vichele_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_vichele_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_created_vichele_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_silent_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_silent_user_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_silent_user_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_input_history(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_company_vichele_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_confirm_vichele(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cancel_vichele(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_create_vichele_team(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_vichele_team(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_vichele_team(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_vichele_team(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_vichele_team(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_change_company_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fill_company_name(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_company_history(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_supplier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_supplier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_supplier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_supplier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_smart_assign(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_max_vichele_by_supplier(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fill_tmd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fill_enter_weight(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_fill_weight_attach(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_add_exception(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_del_exception(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_all_exceptions(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_company_brief(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  vichele_managementProcessor(::std::shared_ptr<vichele_managementIf> iface) :
    iface_(iface) {
    processMap_["create_vichele_info"] = &vichele_managementProcessor::process_create_vichele_info;
    processMap_["delete_vichele_info"] = &vichele_managementProcessor::process_delete_vichele_info;
    processMap_["update_vichele_info"] = &vichele_managementProcessor::process_update_vichele_info;
    processMap_["get_created_vichele_info"] = &vichele_managementProcessor::process_get_created_vichele_info;
    processMap_["silent_login"] = &vichele_managementProcessor::process_silent_login;
    processMap_["verify_login"] = &vichele_managementProcessor::process_verify_login;
    processMap_["get_silent_user_info"] = &vichele_managementProcessor::process_get_silent_user_info;
    processMap_["set_silent_user_info"] = &vichele_managementProcessor::process_set_silent_user_info;
    processMap_["get_input_history"] = &vichele_managementProcessor::process_get_input_history;
    processMap_["get_company_vichele_info"] = &vichele_managementProcessor::process_get_company_vichele_info;
    processMap_["confirm_vichele"] = &vichele_managementProcessor::process_confirm_vichele;
    processMap_["cancel_vichele"] = &vichele_managementProcessor::process_cancel_vichele;
    processMap_["create_vichele_team"] = &vichele_managementProcessor::process_create_vichele_team;
    processMap_["update_vichele_team"] = &vichele_managementProcessor::process_update_vichele_team;
    processMap_["del_vichele_team"] = &vichele_managementProcessor::process_del_vichele_team;
    processMap_["get_all_vichele_team"] = &vichele_managementProcessor::process_get_all_vichele_team;
    processMap_["get_vichele_team"] = &vichele_managementProcessor::process_get_vichele_team;
    processMap_["change_company_name"] = &vichele_managementProcessor::process_change_company_name;
    processMap_["fill_company_name"] = &vichele_managementProcessor::process_fill_company_name;
    processMap_["company_history"] = &vichele_managementProcessor::process_company_history;
    processMap_["add_supplier"] = &vichele_managementProcessor::process_add_supplier;
    processMap_["update_supplier"] = &vichele_managementProcessor::process_update_supplier;
    processMap_["del_supplier"] = &vichele_managementProcessor::process_del_supplier;
    processMap_["get_all_supplier"] = &vichele_managementProcessor::process_get_all_supplier;
    processMap_["smart_assign"] = &vichele_managementProcessor::process_smart_assign;
    processMap_["get_max_vichele_by_supplier"] = &vichele_managementProcessor::process_get_max_vichele_by_supplier;
    processMap_["fill_tmd"] = &vichele_managementProcessor::process_fill_tmd;
    processMap_["fill_enter_weight"] = &vichele_managementProcessor::process_fill_enter_weight;
    processMap_["fill_weight_attach"] = &vichele_managementProcessor::process_fill_weight_attach;
    processMap_["add_exception"] = &vichele_managementProcessor::process_add_exception;
    processMap_["del_exception"] = &vichele_managementProcessor::process_del_exception;
    processMap_["get_all_exceptions"] = &vichele_managementProcessor::process_get_all_exceptions;
    processMap_["get_company_brief"] = &vichele_managementProcessor::process_get_company_brief;
  }

  virtual ~vichele_managementProcessor() {}
};

class vichele_managementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  vichele_managementProcessorFactory(const ::std::shared_ptr< vichele_managementIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< vichele_managementIfFactory > handlerFactory_;
};

class vichele_managementMultiface : virtual public vichele_managementIf {
 public:
  vichele_managementMultiface(std::vector<std::shared_ptr<vichele_managementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~vichele_managementMultiface() {}
 protected:
  std::vector<std::shared_ptr<vichele_managementIf> > ifaces_;
  vichele_managementMultiface() {}
  void add(::std::shared_ptr<vichele_managementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_vichele_info(open_id, vichele_info);
    }
    return ifaces_[i]->create_vichele_info(open_id, vichele_info);
  }

  bool delete_vichele_info(const std::string& open_id, const int64_t vichele_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_vichele_info(open_id, vichele_id);
    }
    return ifaces_[i]->delete_vichele_info(open_id, vichele_id);
  }

  bool update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_vichele_info(open_id, vichele_info);
    }
    return ifaces_[i]->update_vichele_info(open_id, vichele_info);
  }

  void get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& open_id, const int64_t ancher) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_created_vichele_info(_return, open_id, ancher);
    }
    ifaces_[i]->get_created_vichele_info(_return, open_id, ancher);
    return;
  }

  void silent_login(std::string& _return, const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->silent_login(_return, code);
    }
    ifaces_[i]->silent_login(_return, code);
    return;
  }

  bool verify_login(const std::string& open_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_login(open_id);
    }
    return ifaces_[i]->verify_login(open_id);
  }

  void get_silent_user_info(silent_user_info& _return, const std::string& open_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_silent_user_info(_return, open_id);
    }
    ifaces_[i]->get_silent_user_info(_return, open_id);
    return;
  }

  void set_silent_user_info(const std::string& open_id, const silent_user_info& info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_silent_user_info(open_id, info);
    }
    ifaces_[i]->set_silent_user_info(open_id, info);
  }

  void get_input_history(std::vector<std::string> & _return, const std::string& open_id, const vichele_stay_alone& search_key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_input_history(_return, open_id, search_key);
    }
    ifaces_[i]->get_input_history(_return, open_id, search_key);
    return;
  }

  void get_company_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& enter_date, const std::string& stuff_name, const std::string& supplier_name, const std::string& vichele_number) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_company_vichele_info(_return, ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number);
    }
    ifaces_[i]->get_company_vichele_info(_return, ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number);
    return;
  }

  bool confirm_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const std::vector<std::string> & company_for_select, const bool all_select) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->confirm_vichele(ssid, info, company_for_select, all_select);
    }
    return ifaces_[i]->confirm_vichele(ssid, info, company_for_select, all_select);
  }

  bool cancel_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const bool all_select) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cancel_vichele(ssid, info, all_select);
    }
    return ifaces_[i]->cancel_vichele(ssid, info, all_select);
  }

  bool create_vichele_team(const std::string& open_id, const vichele_team& team_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_vichele_team(open_id, team_info);
    }
    return ifaces_[i]->create_vichele_team(open_id, team_info);
  }

  bool update_vichele_team(const std::string& open_id, const vichele_team& team_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_vichele_team(open_id, team_info);
    }
    return ifaces_[i]->update_vichele_team(open_id, team_info);
  }

  bool del_vichele_team(const std::string& open_id, const int64_t team_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_vichele_team(open_id, team_id);
    }
    return ifaces_[i]->del_vichele_team(open_id, team_id);
  }

  void get_all_vichele_team(std::vector<vichele_team> & _return, const std::string& open_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_vichele_team(_return, open_id);
    }
    ifaces_[i]->get_all_vichele_team(_return, open_id);
    return;
  }

  void get_vichele_team(vichele_team& _return, const std::string& open_id, const int64_t team_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_vichele_team(_return, open_id, team_id);
    }
    ifaces_[i]->get_vichele_team(_return, open_id, team_id);
    return;
  }

  bool change_company_name(const std::string& ssid, const int64_t vichele_id, const std::string& company_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->change_company_name(ssid, vichele_id, company_name);
    }
    return ifaces_[i]->change_company_name(ssid, vichele_id, company_name);
  }

  bool fill_company_name(const std::string& open_id, const int64_t vichele_id, const std::string& company_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fill_company_name(open_id, vichele_id, company_name);
    }
    return ifaces_[i]->fill_company_name(open_id, vichele_id, company_name);
  }

  void company_history(std::vector<std::string> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->company_history(_return, ssid);
    }
    ifaces_[i]->company_history(_return, ssid);
    return;
  }

  bool add_supplier(const std::string& ssid, const supplier_basic_info& supplier_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_supplier(ssid, supplier_info);
    }
    return ifaces_[i]->add_supplier(ssid, supplier_info);
  }

  bool update_supplier(const std::string& ssid, const supplier_basic_info& supplier_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_supplier(ssid, supplier_info);
    }
    return ifaces_[i]->update_supplier(ssid, supplier_info);
  }

  bool del_supplier(const std::string& ssid, const int64_t supplier_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_supplier(ssid, supplier_id);
    }
    return ifaces_[i]->del_supplier(ssid, supplier_id);
  }

  void get_all_supplier(std::vector<supplier_basic_info> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_supplier(_return, ssid);
    }
    ifaces_[i]->get_all_supplier(_return, ssid);
    return;
  }

  void smart_assign(std::string& _return, const std::string& ssid, const std::vector<vichele_stay_alone> & vichele_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->smart_assign(_return, ssid, vichele_info);
    }
    ifaces_[i]->smart_assign(_return, ssid, vichele_info);
    return;
  }

  int64_t get_max_vichele_by_supplier(const std::string& supplier, const std::string& company) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_max_vichele_by_supplier(supplier, company);
    }
    return ifaces_[i]->get_max_vichele_by_supplier(supplier, company);
  }

  bool fill_tmd(const std::string& open_id, const int64_t vichele_id, const std::string& tmd_no) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fill_tmd(open_id, vichele_id, tmd_no);
    }
    return ifaces_[i]->fill_tmd(open_id, vichele_id, tmd_no);
  }

  bool fill_enter_weight(const std::string& open_id, const int64_t vichele_id, const double enter_weight) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fill_enter_weight(open_id, vichele_id, enter_weight);
    }
    return ifaces_[i]->fill_enter_weight(open_id, vichele_id, enter_weight);
  }

  bool fill_weight_attach(const std::string& open_id, const int64_t vichele_id, const std::string& weight_attach) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->fill_weight_attach(open_id, vichele_id, weight_attach);
    }
    return ifaces_[i]->fill_weight_attach(open_id, vichele_id, weight_attach);
  }

  bool add_exception(const std::string& ssid, const std::string& stuff_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->add_exception(ssid, stuff_name);
    }
    return ifaces_[i]->add_exception(ssid, stuff_name);
  }

  bool del_exception(const std::string& ssid, const std::string& stuff_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->del_exception(ssid, stuff_name);
    }
    return ifaces_[i]->del_exception(ssid, stuff_name);
  }

  void get_all_exceptions(std::vector<std::string> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_exceptions(_return, ssid);
    }
    ifaces_[i]->get_all_exceptions(_return, ssid);
    return;
  }

  void get_company_brief(single_vichele_brief& _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_company_brief(_return, ssid);
    }
    ifaces_[i]->get_company_brief(_return, ssid);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class vichele_managementConcurrentClient : virtual public vichele_managementIf {
 public:
  vichele_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  vichele_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info);
  int32_t send_create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info);
  bool recv_create_vichele_info(const int32_t seqid);
  bool delete_vichele_info(const std::string& open_id, const int64_t vichele_id);
  int32_t send_delete_vichele_info(const std::string& open_id, const int64_t vichele_id);
  bool recv_delete_vichele_info(const int32_t seqid);
  bool update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info);
  int32_t send_update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info);
  bool recv_update_vichele_info(const int32_t seqid);
  void get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& open_id, const int64_t ancher);
  int32_t send_get_created_vichele_info(const std::string& open_id, const int64_t ancher);
  void recv_get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const int32_t seqid);
  void silent_login(std::string& _return, const std::string& code);
  int32_t send_silent_login(const std::string& code);
  void recv_silent_login(std::string& _return, const int32_t seqid);
  bool verify_login(const std::string& open_id);
  int32_t send_verify_login(const std::string& open_id);
  bool recv_verify_login(const int32_t seqid);
  void get_silent_user_info(silent_user_info& _return, const std::string& open_id);
  int32_t send_get_silent_user_info(const std::string& open_id);
  void recv_get_silent_user_info(silent_user_info& _return, const int32_t seqid);
  void set_silent_user_info(const std::string& open_id, const silent_user_info& info);
  int32_t send_set_silent_user_info(const std::string& open_id, const silent_user_info& info);
  void recv_set_silent_user_info(const int32_t seqid);
  void get_input_history(std::vector<std::string> & _return, const std::string& open_id, const vichele_stay_alone& search_key);
  int32_t send_get_input_history(const std::string& open_id, const vichele_stay_alone& search_key);
  void recv_get_input_history(std::vector<std::string> & _return, const int32_t seqid);
  void get_company_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& enter_date, const std::string& stuff_name, const std::string& supplier_name, const std::string& vichele_number);
  int32_t send_get_company_vichele_info(const std::string& ssid, const int64_t anchor, const int64_t status, const std::string& enter_date, const std::string& stuff_name, const std::string& supplier_name, const std::string& vichele_number);
  void recv_get_company_vichele_info(std::vector<vichele_stay_alone> & _return, const int32_t seqid);
  bool confirm_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const std::vector<std::string> & company_for_select, const bool all_select);
  int32_t send_confirm_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const std::vector<std::string> & company_for_select, const bool all_select);
  bool recv_confirm_vichele(const int32_t seqid);
  bool cancel_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const bool all_select);
  int32_t send_cancel_vichele(const std::string& ssid, const std::vector<vichele_stay_alone> & info, const bool all_select);
  bool recv_cancel_vichele(const int32_t seqid);
  bool create_vichele_team(const std::string& open_id, const vichele_team& team_info);
  int32_t send_create_vichele_team(const std::string& open_id, const vichele_team& team_info);
  bool recv_create_vichele_team(const int32_t seqid);
  bool update_vichele_team(const std::string& open_id, const vichele_team& team_info);
  int32_t send_update_vichele_team(const std::string& open_id, const vichele_team& team_info);
  bool recv_update_vichele_team(const int32_t seqid);
  bool del_vichele_team(const std::string& open_id, const int64_t team_id);
  int32_t send_del_vichele_team(const std::string& open_id, const int64_t team_id);
  bool recv_del_vichele_team(const int32_t seqid);
  void get_all_vichele_team(std::vector<vichele_team> & _return, const std::string& open_id);
  int32_t send_get_all_vichele_team(const std::string& open_id);
  void recv_get_all_vichele_team(std::vector<vichele_team> & _return, const int32_t seqid);
  void get_vichele_team(vichele_team& _return, const std::string& open_id, const int64_t team_id);
  int32_t send_get_vichele_team(const std::string& open_id, const int64_t team_id);
  void recv_get_vichele_team(vichele_team& _return, const int32_t seqid);
  bool change_company_name(const std::string& ssid, const int64_t vichele_id, const std::string& company_name);
  int32_t send_change_company_name(const std::string& ssid, const int64_t vichele_id, const std::string& company_name);
  bool recv_change_company_name(const int32_t seqid);
  bool fill_company_name(const std::string& open_id, const int64_t vichele_id, const std::string& company_name);
  int32_t send_fill_company_name(const std::string& open_id, const int64_t vichele_id, const std::string& company_name);
  bool recv_fill_company_name(const int32_t seqid);
  void company_history(std::vector<std::string> & _return, const std::string& ssid);
  int32_t send_company_history(const std::string& ssid);
  void recv_company_history(std::vector<std::string> & _return, const int32_t seqid);
  bool add_supplier(const std::string& ssid, const supplier_basic_info& supplier_info);
  int32_t send_add_supplier(const std::string& ssid, const supplier_basic_info& supplier_info);
  bool recv_add_supplier(const int32_t seqid);
  bool update_supplier(const std::string& ssid, const supplier_basic_info& supplier_info);
  int32_t send_update_supplier(const std::string& ssid, const supplier_basic_info& supplier_info);
  bool recv_update_supplier(const int32_t seqid);
  bool del_supplier(const std::string& ssid, const int64_t supplier_id);
  int32_t send_del_supplier(const std::string& ssid, const int64_t supplier_id);
  bool recv_del_supplier(const int32_t seqid);
  void get_all_supplier(std::vector<supplier_basic_info> & _return, const std::string& ssid);
  int32_t send_get_all_supplier(const std::string& ssid);
  void recv_get_all_supplier(std::vector<supplier_basic_info> & _return, const int32_t seqid);
  void smart_assign(std::string& _return, const std::string& ssid, const std::vector<vichele_stay_alone> & vichele_info);
  int32_t send_smart_assign(const std::string& ssid, const std::vector<vichele_stay_alone> & vichele_info);
  void recv_smart_assign(std::string& _return, const int32_t seqid);
  int64_t get_max_vichele_by_supplier(const std::string& supplier, const std::string& company);
  int32_t send_get_max_vichele_by_supplier(const std::string& supplier, const std::string& company);
  int64_t recv_get_max_vichele_by_supplier(const int32_t seqid);
  bool fill_tmd(const std::string& open_id, const int64_t vichele_id, const std::string& tmd_no);
  int32_t send_fill_tmd(const std::string& open_id, const int64_t vichele_id, const std::string& tmd_no);
  bool recv_fill_tmd(const int32_t seqid);
  bool fill_enter_weight(const std::string& open_id, const int64_t vichele_id, const double enter_weight);
  int32_t send_fill_enter_weight(const std::string& open_id, const int64_t vichele_id, const double enter_weight);
  bool recv_fill_enter_weight(const int32_t seqid);
  bool fill_weight_attach(const std::string& open_id, const int64_t vichele_id, const std::string& weight_attach);
  int32_t send_fill_weight_attach(const std::string& open_id, const int64_t vichele_id, const std::string& weight_attach);
  bool recv_fill_weight_attach(const int32_t seqid);
  bool add_exception(const std::string& ssid, const std::string& stuff_name);
  int32_t send_add_exception(const std::string& ssid, const std::string& stuff_name);
  bool recv_add_exception(const int32_t seqid);
  bool del_exception(const std::string& ssid, const std::string& stuff_name);
  int32_t send_del_exception(const std::string& ssid, const std::string& stuff_name);
  bool recv_del_exception(const int32_t seqid);
  void get_all_exceptions(std::vector<std::string> & _return, const std::string& ssid);
  int32_t send_get_all_exceptions(const std::string& ssid);
  void recv_get_all_exceptions(std::vector<std::string> & _return, const int32_t seqid);
  void get_company_brief(single_vichele_brief& _return, const std::string& ssid);
  int32_t send_get_company_brief(const std::string& ssid);
  void recv_get_company_brief(single_vichele_brief& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
