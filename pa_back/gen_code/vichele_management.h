/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef vichele_management_H
#define vichele_management_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "idl_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class vichele_managementIf {
 public:
  virtual ~vichele_managementIf() {}
  virtual bool create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info) = 0;
  virtual bool delete_vichele_info(const std::string& open_id, const int64_t vichele_id) = 0;
  virtual bool update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info) = 0;
  virtual void get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& open_id, const int64_t ancher) = 0;
  virtual void silent_login(std::string& _return, const std::string& code) = 0;
  virtual bool verify_login(const std::string& open_id) = 0;
  virtual void get_input_history(std::vector<std::string> & _return, const std::string& open_id, const vichele_stay_alone& search_key) = 0;
};

class vichele_managementIfFactory {
 public:
  typedef vichele_managementIf Handler;

  virtual ~vichele_managementIfFactory() {}

  virtual vichele_managementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(vichele_managementIf* /* handler */) = 0;
};

class vichele_managementIfSingletonFactory : virtual public vichele_managementIfFactory {
 public:
  vichele_managementIfSingletonFactory(const ::std::shared_ptr<vichele_managementIf>& iface) : iface_(iface) {}
  virtual ~vichele_managementIfSingletonFactory() {}

  virtual vichele_managementIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(vichele_managementIf* /* handler */) {}

 protected:
  ::std::shared_ptr<vichele_managementIf> iface_;
};

class vichele_managementNull : virtual public vichele_managementIf {
 public:
  virtual ~vichele_managementNull() {}
  bool create_vichele_info(const std::string& /* open_id */, const std::vector<vichele_stay_alone> & /* vichele_info */) {
    bool _return = false;
    return _return;
  }
  bool delete_vichele_info(const std::string& /* open_id */, const int64_t /* vichele_id */) {
    bool _return = false;
    return _return;
  }
  bool update_vichele_info(const std::string& /* open_id */, const vichele_stay_alone& /* vichele_info */) {
    bool _return = false;
    return _return;
  }
  void get_created_vichele_info(std::vector<vichele_stay_alone> & /* _return */, const std::string& /* open_id */, const int64_t /* ancher */) {
    return;
  }
  void silent_login(std::string& /* _return */, const std::string& /* code */) {
    return;
  }
  bool verify_login(const std::string& /* open_id */) {
    bool _return = false;
    return _return;
  }
  void get_input_history(std::vector<std::string> & /* _return */, const std::string& /* open_id */, const vichele_stay_alone& /* search_key */) {
    return;
  }
};

typedef struct _vichele_management_create_vichele_info_args__isset {
  _vichele_management_create_vichele_info_args__isset() : open_id(false), vichele_info(false) {}
  bool open_id :1;
  bool vichele_info :1;
} _vichele_management_create_vichele_info_args__isset;

class vichele_management_create_vichele_info_args {
 public:

  vichele_management_create_vichele_info_args(const vichele_management_create_vichele_info_args&);
  vichele_management_create_vichele_info_args& operator=(const vichele_management_create_vichele_info_args&);
  vichele_management_create_vichele_info_args() : open_id() {
  }

  virtual ~vichele_management_create_vichele_info_args() noexcept;
  std::string open_id;
  std::vector<vichele_stay_alone>  vichele_info;

  _vichele_management_create_vichele_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_info(const std::vector<vichele_stay_alone> & val);

  bool operator == (const vichele_management_create_vichele_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_info == rhs.vichele_info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_create_vichele_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_create_vichele_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_create_vichele_info_pargs {
 public:


  virtual ~vichele_management_create_vichele_info_pargs() noexcept;
  const std::string* open_id;
  const std::vector<vichele_stay_alone> * vichele_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_create_vichele_info_result__isset {
  _vichele_management_create_vichele_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_create_vichele_info_result__isset;

class vichele_management_create_vichele_info_result {
 public:

  vichele_management_create_vichele_info_result(const vichele_management_create_vichele_info_result&);
  vichele_management_create_vichele_info_result& operator=(const vichele_management_create_vichele_info_result&);
  vichele_management_create_vichele_info_result() : success(0) {
  }

  virtual ~vichele_management_create_vichele_info_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_create_vichele_info_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_create_vichele_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_create_vichele_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_create_vichele_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_create_vichele_info_presult__isset {
  _vichele_management_create_vichele_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_create_vichele_info_presult__isset;

class vichele_management_create_vichele_info_presult {
 public:


  virtual ~vichele_management_create_vichele_info_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_create_vichele_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_delete_vichele_info_args__isset {
  _vichele_management_delete_vichele_info_args__isset() : open_id(false), vichele_id(false) {}
  bool open_id :1;
  bool vichele_id :1;
} _vichele_management_delete_vichele_info_args__isset;

class vichele_management_delete_vichele_info_args {
 public:

  vichele_management_delete_vichele_info_args(const vichele_management_delete_vichele_info_args&);
  vichele_management_delete_vichele_info_args& operator=(const vichele_management_delete_vichele_info_args&);
  vichele_management_delete_vichele_info_args() : open_id(), vichele_id(0) {
  }

  virtual ~vichele_management_delete_vichele_info_args() noexcept;
  std::string open_id;
  int64_t vichele_id;

  _vichele_management_delete_vichele_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_id(const int64_t val);

  bool operator == (const vichele_management_delete_vichele_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_id == rhs.vichele_id))
      return false;
    return true;
  }
  bool operator != (const vichele_management_delete_vichele_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_delete_vichele_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_delete_vichele_info_pargs {
 public:


  virtual ~vichele_management_delete_vichele_info_pargs() noexcept;
  const std::string* open_id;
  const int64_t* vichele_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_delete_vichele_info_result__isset {
  _vichele_management_delete_vichele_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_delete_vichele_info_result__isset;

class vichele_management_delete_vichele_info_result {
 public:

  vichele_management_delete_vichele_info_result(const vichele_management_delete_vichele_info_result&);
  vichele_management_delete_vichele_info_result& operator=(const vichele_management_delete_vichele_info_result&);
  vichele_management_delete_vichele_info_result() : success(0) {
  }

  virtual ~vichele_management_delete_vichele_info_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_delete_vichele_info_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_delete_vichele_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_delete_vichele_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_delete_vichele_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_delete_vichele_info_presult__isset {
  _vichele_management_delete_vichele_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_delete_vichele_info_presult__isset;

class vichele_management_delete_vichele_info_presult {
 public:


  virtual ~vichele_management_delete_vichele_info_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_delete_vichele_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_update_vichele_info_args__isset {
  _vichele_management_update_vichele_info_args__isset() : open_id(false), vichele_info(false) {}
  bool open_id :1;
  bool vichele_info :1;
} _vichele_management_update_vichele_info_args__isset;

class vichele_management_update_vichele_info_args {
 public:

  vichele_management_update_vichele_info_args(const vichele_management_update_vichele_info_args&);
  vichele_management_update_vichele_info_args& operator=(const vichele_management_update_vichele_info_args&);
  vichele_management_update_vichele_info_args() : open_id() {
  }

  virtual ~vichele_management_update_vichele_info_args() noexcept;
  std::string open_id;
  vichele_stay_alone vichele_info;

  _vichele_management_update_vichele_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_vichele_info(const vichele_stay_alone& val);

  bool operator == (const vichele_management_update_vichele_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(vichele_info == rhs.vichele_info))
      return false;
    return true;
  }
  bool operator != (const vichele_management_update_vichele_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_update_vichele_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_update_vichele_info_pargs {
 public:


  virtual ~vichele_management_update_vichele_info_pargs() noexcept;
  const std::string* open_id;
  const vichele_stay_alone* vichele_info;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_update_vichele_info_result__isset {
  _vichele_management_update_vichele_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_update_vichele_info_result__isset;

class vichele_management_update_vichele_info_result {
 public:

  vichele_management_update_vichele_info_result(const vichele_management_update_vichele_info_result&);
  vichele_management_update_vichele_info_result& operator=(const vichele_management_update_vichele_info_result&);
  vichele_management_update_vichele_info_result() : success(0) {
  }

  virtual ~vichele_management_update_vichele_info_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_update_vichele_info_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_update_vichele_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_update_vichele_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_update_vichele_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_update_vichele_info_presult__isset {
  _vichele_management_update_vichele_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_update_vichele_info_presult__isset;

class vichele_management_update_vichele_info_presult {
 public:


  virtual ~vichele_management_update_vichele_info_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_update_vichele_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_created_vichele_info_args__isset {
  _vichele_management_get_created_vichele_info_args__isset() : open_id(false), ancher(false) {}
  bool open_id :1;
  bool ancher :1;
} _vichele_management_get_created_vichele_info_args__isset;

class vichele_management_get_created_vichele_info_args {
 public:

  vichele_management_get_created_vichele_info_args(const vichele_management_get_created_vichele_info_args&);
  vichele_management_get_created_vichele_info_args& operator=(const vichele_management_get_created_vichele_info_args&);
  vichele_management_get_created_vichele_info_args() : open_id(), ancher(0) {
  }

  virtual ~vichele_management_get_created_vichele_info_args() noexcept;
  std::string open_id;
  int64_t ancher;

  _vichele_management_get_created_vichele_info_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_ancher(const int64_t val);

  bool operator == (const vichele_management_get_created_vichele_info_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(ancher == rhs.ancher))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_created_vichele_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_created_vichele_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_created_vichele_info_pargs {
 public:


  virtual ~vichele_management_get_created_vichele_info_pargs() noexcept;
  const std::string* open_id;
  const int64_t* ancher;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_created_vichele_info_result__isset {
  _vichele_management_get_created_vichele_info_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_created_vichele_info_result__isset;

class vichele_management_get_created_vichele_info_result {
 public:

  vichele_management_get_created_vichele_info_result(const vichele_management_get_created_vichele_info_result&);
  vichele_management_get_created_vichele_info_result& operator=(const vichele_management_get_created_vichele_info_result&);
  vichele_management_get_created_vichele_info_result() {
  }

  virtual ~vichele_management_get_created_vichele_info_result() noexcept;
  std::vector<vichele_stay_alone>  success;
  gen_exp e;

  _vichele_management_get_created_vichele_info_result__isset __isset;

  void __set_success(const std::vector<vichele_stay_alone> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_created_vichele_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_created_vichele_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_created_vichele_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_created_vichele_info_presult__isset {
  _vichele_management_get_created_vichele_info_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_created_vichele_info_presult__isset;

class vichele_management_get_created_vichele_info_presult {
 public:


  virtual ~vichele_management_get_created_vichele_info_presult() noexcept;
  std::vector<vichele_stay_alone> * success;
  gen_exp e;

  _vichele_management_get_created_vichele_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_silent_login_args__isset {
  _vichele_management_silent_login_args__isset() : code(false) {}
  bool code :1;
} _vichele_management_silent_login_args__isset;

class vichele_management_silent_login_args {
 public:

  vichele_management_silent_login_args(const vichele_management_silent_login_args&);
  vichele_management_silent_login_args& operator=(const vichele_management_silent_login_args&);
  vichele_management_silent_login_args() : code() {
  }

  virtual ~vichele_management_silent_login_args() noexcept;
  std::string code;

  _vichele_management_silent_login_args__isset __isset;

  void __set_code(const std::string& val);

  bool operator == (const vichele_management_silent_login_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const vichele_management_silent_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_silent_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_silent_login_pargs {
 public:


  virtual ~vichele_management_silent_login_pargs() noexcept;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_silent_login_result__isset {
  _vichele_management_silent_login_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_silent_login_result__isset;

class vichele_management_silent_login_result {
 public:

  vichele_management_silent_login_result(const vichele_management_silent_login_result&);
  vichele_management_silent_login_result& operator=(const vichele_management_silent_login_result&);
  vichele_management_silent_login_result() : success() {
  }

  virtual ~vichele_management_silent_login_result() noexcept;
  std::string success;
  gen_exp e;

  _vichele_management_silent_login_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_silent_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_silent_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_silent_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_silent_login_presult__isset {
  _vichele_management_silent_login_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_silent_login_presult__isset;

class vichele_management_silent_login_presult {
 public:


  virtual ~vichele_management_silent_login_presult() noexcept;
  std::string* success;
  gen_exp e;

  _vichele_management_silent_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_verify_login_args__isset {
  _vichele_management_verify_login_args__isset() : open_id(false) {}
  bool open_id :1;
} _vichele_management_verify_login_args__isset;

class vichele_management_verify_login_args {
 public:

  vichele_management_verify_login_args(const vichele_management_verify_login_args&);
  vichele_management_verify_login_args& operator=(const vichele_management_verify_login_args&);
  vichele_management_verify_login_args() : open_id() {
  }

  virtual ~vichele_management_verify_login_args() noexcept;
  std::string open_id;

  _vichele_management_verify_login_args__isset __isset;

  void __set_open_id(const std::string& val);

  bool operator == (const vichele_management_verify_login_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    return true;
  }
  bool operator != (const vichele_management_verify_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_verify_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_verify_login_pargs {
 public:


  virtual ~vichele_management_verify_login_pargs() noexcept;
  const std::string* open_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_verify_login_result__isset {
  _vichele_management_verify_login_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_verify_login_result__isset;

class vichele_management_verify_login_result {
 public:

  vichele_management_verify_login_result(const vichele_management_verify_login_result&);
  vichele_management_verify_login_result& operator=(const vichele_management_verify_login_result&);
  vichele_management_verify_login_result() : success(0) {
  }

  virtual ~vichele_management_verify_login_result() noexcept;
  bool success;
  gen_exp e;

  _vichele_management_verify_login_result__isset __isset;

  void __set_success(const bool val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_verify_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_verify_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_verify_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_verify_login_presult__isset {
  _vichele_management_verify_login_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_verify_login_presult__isset;

class vichele_management_verify_login_presult {
 public:


  virtual ~vichele_management_verify_login_presult() noexcept;
  bool* success;
  gen_exp e;

  _vichele_management_verify_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _vichele_management_get_input_history_args__isset {
  _vichele_management_get_input_history_args__isset() : open_id(false), search_key(false) {}
  bool open_id :1;
  bool search_key :1;
} _vichele_management_get_input_history_args__isset;

class vichele_management_get_input_history_args {
 public:

  vichele_management_get_input_history_args(const vichele_management_get_input_history_args&);
  vichele_management_get_input_history_args& operator=(const vichele_management_get_input_history_args&);
  vichele_management_get_input_history_args() : open_id() {
  }

  virtual ~vichele_management_get_input_history_args() noexcept;
  std::string open_id;
  vichele_stay_alone search_key;

  _vichele_management_get_input_history_args__isset __isset;

  void __set_open_id(const std::string& val);

  void __set_search_key(const vichele_stay_alone& val);

  bool operator == (const vichele_management_get_input_history_args & rhs) const
  {
    if (!(open_id == rhs.open_id))
      return false;
    if (!(search_key == rhs.search_key))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_input_history_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_input_history_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class vichele_management_get_input_history_pargs {
 public:


  virtual ~vichele_management_get_input_history_pargs() noexcept;
  const std::string* open_id;
  const vichele_stay_alone* search_key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_input_history_result__isset {
  _vichele_management_get_input_history_result__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_input_history_result__isset;

class vichele_management_get_input_history_result {
 public:

  vichele_management_get_input_history_result(const vichele_management_get_input_history_result&);
  vichele_management_get_input_history_result& operator=(const vichele_management_get_input_history_result&);
  vichele_management_get_input_history_result() {
  }

  virtual ~vichele_management_get_input_history_result() noexcept;
  std::vector<std::string>  success;
  gen_exp e;

  _vichele_management_get_input_history_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  void __set_e(const gen_exp& val);

  bool operator == (const vichele_management_get_input_history_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(e == rhs.e))
      return false;
    return true;
  }
  bool operator != (const vichele_management_get_input_history_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const vichele_management_get_input_history_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _vichele_management_get_input_history_presult__isset {
  _vichele_management_get_input_history_presult__isset() : success(false), e(false) {}
  bool success :1;
  bool e :1;
} _vichele_management_get_input_history_presult__isset;

class vichele_management_get_input_history_presult {
 public:


  virtual ~vichele_management_get_input_history_presult() noexcept;
  std::vector<std::string> * success;
  gen_exp e;

  _vichele_management_get_input_history_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class vichele_managementClient : virtual public vichele_managementIf {
 public:
  vichele_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  vichele_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info);
  void send_create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info);
  bool recv_create_vichele_info();
  bool delete_vichele_info(const std::string& open_id, const int64_t vichele_id);
  void send_delete_vichele_info(const std::string& open_id, const int64_t vichele_id);
  bool recv_delete_vichele_info();
  bool update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info);
  void send_update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info);
  bool recv_update_vichele_info();
  void get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& open_id, const int64_t ancher);
  void send_get_created_vichele_info(const std::string& open_id, const int64_t ancher);
  void recv_get_created_vichele_info(std::vector<vichele_stay_alone> & _return);
  void silent_login(std::string& _return, const std::string& code);
  void send_silent_login(const std::string& code);
  void recv_silent_login(std::string& _return);
  bool verify_login(const std::string& open_id);
  void send_verify_login(const std::string& open_id);
  bool recv_verify_login();
  void get_input_history(std::vector<std::string> & _return, const std::string& open_id, const vichele_stay_alone& search_key);
  void send_get_input_history(const std::string& open_id, const vichele_stay_alone& search_key);
  void recv_get_input_history(std::vector<std::string> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class vichele_managementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<vichele_managementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (vichele_managementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_create_vichele_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_delete_vichele_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_vichele_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_created_vichele_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_silent_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_verify_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_input_history(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  vichele_managementProcessor(::std::shared_ptr<vichele_managementIf> iface) :
    iface_(iface) {
    processMap_["create_vichele_info"] = &vichele_managementProcessor::process_create_vichele_info;
    processMap_["delete_vichele_info"] = &vichele_managementProcessor::process_delete_vichele_info;
    processMap_["update_vichele_info"] = &vichele_managementProcessor::process_update_vichele_info;
    processMap_["get_created_vichele_info"] = &vichele_managementProcessor::process_get_created_vichele_info;
    processMap_["silent_login"] = &vichele_managementProcessor::process_silent_login;
    processMap_["verify_login"] = &vichele_managementProcessor::process_verify_login;
    processMap_["get_input_history"] = &vichele_managementProcessor::process_get_input_history;
  }

  virtual ~vichele_managementProcessor() {}
};

class vichele_managementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  vichele_managementProcessorFactory(const ::std::shared_ptr< vichele_managementIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< vichele_managementIfFactory > handlerFactory_;
};

class vichele_managementMultiface : virtual public vichele_managementIf {
 public:
  vichele_managementMultiface(std::vector<std::shared_ptr<vichele_managementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~vichele_managementMultiface() {}
 protected:
  std::vector<std::shared_ptr<vichele_managementIf> > ifaces_;
  vichele_managementMultiface() {}
  void add(::std::shared_ptr<vichele_managementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->create_vichele_info(open_id, vichele_info);
    }
    return ifaces_[i]->create_vichele_info(open_id, vichele_info);
  }

  bool delete_vichele_info(const std::string& open_id, const int64_t vichele_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->delete_vichele_info(open_id, vichele_id);
    }
    return ifaces_[i]->delete_vichele_info(open_id, vichele_id);
  }

  bool update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_vichele_info(open_id, vichele_info);
    }
    return ifaces_[i]->update_vichele_info(open_id, vichele_info);
  }

  void get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& open_id, const int64_t ancher) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_created_vichele_info(_return, open_id, ancher);
    }
    ifaces_[i]->get_created_vichele_info(_return, open_id, ancher);
    return;
  }

  void silent_login(std::string& _return, const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->silent_login(_return, code);
    }
    ifaces_[i]->silent_login(_return, code);
    return;
  }

  bool verify_login(const std::string& open_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->verify_login(open_id);
    }
    return ifaces_[i]->verify_login(open_id);
  }

  void get_input_history(std::vector<std::string> & _return, const std::string& open_id, const vichele_stay_alone& search_key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_input_history(_return, open_id, search_key);
    }
    ifaces_[i]->get_input_history(_return, open_id, search_key);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class vichele_managementConcurrentClient : virtual public vichele_managementIf {
 public:
  vichele_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  vichele_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info);
  int32_t send_create_vichele_info(const std::string& open_id, const std::vector<vichele_stay_alone> & vichele_info);
  bool recv_create_vichele_info(const int32_t seqid);
  bool delete_vichele_info(const std::string& open_id, const int64_t vichele_id);
  int32_t send_delete_vichele_info(const std::string& open_id, const int64_t vichele_id);
  bool recv_delete_vichele_info(const int32_t seqid);
  bool update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info);
  int32_t send_update_vichele_info(const std::string& open_id, const vichele_stay_alone& vichele_info);
  bool recv_update_vichele_info(const int32_t seqid);
  void get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const std::string& open_id, const int64_t ancher);
  int32_t send_get_created_vichele_info(const std::string& open_id, const int64_t ancher);
  void recv_get_created_vichele_info(std::vector<vichele_stay_alone> & _return, const int32_t seqid);
  void silent_login(std::string& _return, const std::string& code);
  int32_t send_silent_login(const std::string& code);
  void recv_silent_login(std::string& _return, const int32_t seqid);
  bool verify_login(const std::string& open_id);
  int32_t send_verify_login(const std::string& open_id);
  bool recv_verify_login(const int32_t seqid);
  void get_input_history(std::vector<std::string> & _return, const std::string& open_id, const vichele_stay_alone& search_key);
  int32_t send_get_input_history(const std::string& open_id, const vichele_stay_alone& search_key);
  void recv_get_input_history(std::vector<std::string> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
