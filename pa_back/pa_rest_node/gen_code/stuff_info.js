//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./idl_types');
//HELPER FUNCTIONS AND STRUCTURES

var stuff_info_get_today_args = function(args) {
};
stuff_info_get_today_args.prototype = {};
stuff_info_get_today_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_info_get_today_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_info_get_today_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_info_get_today_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.stuff_detail]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_info_get_today_result.prototype = {};
stuff_info_get_today_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = new ttypes.stuff_detail();
          elem53.read(input);
          this.success.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_info_get_today_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_info_get_today_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter54 in this.success) {
      if (this.success.hasOwnProperty(iter54)) {
        iter54 = this.success[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_info_get_stuff_detail_args = function(args) {
  this.type_id = null;
  if (args) {
    if (args.type_id !== undefined && args.type_id !== null) {
      this.type_id = args.type_id;
    }
  }
};
stuff_info_get_stuff_detail_args.prototype = {};
stuff_info_get_stuff_detail_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.type_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_info_get_stuff_detail_args.prototype.write = function(output) {
  output.writeStructBegin('stuff_info_get_stuff_detail_args');
  if (this.type_id !== null && this.type_id !== undefined) {
    output.writeFieldBegin('type_id', Thrift.Type.I64, 1);
    output.writeI64(this.type_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_info_get_stuff_detail_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.stuff_detail(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
stuff_info_get_stuff_detail_result.prototype = {};
stuff_info_get_stuff_detail_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.stuff_detail();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

stuff_info_get_stuff_detail_result.prototype.write = function(output) {
  output.writeStructBegin('stuff_info_get_stuff_detail_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var stuff_infoClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
stuff_infoClient.prototype = {};
stuff_infoClient.prototype.seqid = function() { return this._seqid; };
stuff_infoClient.prototype.new_seqid = function() { return this._seqid += 1; };

stuff_infoClient.prototype.get_today = function(callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_today();
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_today();
  }
};

stuff_infoClient.prototype.send_get_today = function() {
  var output = new this.pClass(this.output);
  var args = new stuff_info_get_today_args();
  try {
    output.writeMessageBegin('get_today', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_infoClient.prototype.recv_get_today = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_info_get_today_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_today failed: unknown result');
};

stuff_infoClient.prototype.get_stuff_detail = function(type_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_stuff_detail(type_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_stuff_detail(type_id);
  }
};

stuff_infoClient.prototype.send_get_stuff_detail = function(type_id) {
  var output = new this.pClass(this.output);
  var params = {
    type_id: type_id
  };
  var args = new stuff_info_get_stuff_detail_args(params);
  try {
    output.writeMessageBegin('get_stuff_detail', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

stuff_infoClient.prototype.recv_get_stuff_detail = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new stuff_info_get_stuff_detail_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_stuff_detail failed: unknown result');
};
var stuff_infoProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
stuff_infoProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
stuff_infoProcessor.prototype.process_get_today = function(seqid, input, output) {
  var args = new stuff_info_get_today_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_today.length === 0) {
    Q.fcall(this._handler.get_today.bind(this._handler)
    ).then(function(result) {
      var result_obj = new stuff_info_get_today_result({success: result});
      output.writeMessageBegin("get_today", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_info_get_today_result(err);
        output.writeMessageBegin("get_today", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_today", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_today(function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_info_get_today_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_today", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_today", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
stuff_infoProcessor.prototype.process_get_stuff_detail = function(seqid, input, output) {
  var args = new stuff_info_get_stuff_detail_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_stuff_detail.length === 1) {
    Q.fcall(this._handler.get_stuff_detail.bind(this._handler),
      args.type_id
    ).then(function(result) {
      var result_obj = new stuff_info_get_stuff_detail_result({success: result});
      output.writeMessageBegin("get_stuff_detail", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new stuff_info_get_stuff_detail_result(err);
        output.writeMessageBegin("get_stuff_detail", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_stuff_detail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_stuff_detail(args.type_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new stuff_info_get_stuff_detail_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_stuff_detail", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_stuff_detail", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
