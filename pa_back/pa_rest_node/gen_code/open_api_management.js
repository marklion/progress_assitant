//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./idl_types');
//HELPER FUNCTIONS AND STRUCTURES

var open_api_management_register_api_user_args = function(args) {
  this.company_name = null;
  this.email = null;
  this.password = null;
  if (args) {
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
open_api_management_register_api_user_args.prototype = {};
open_api_management_register_api_user_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_register_api_user_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_register_api_user_args');
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 1);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 2);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 3);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_register_api_user_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_register_api_user_result.prototype = {};
open_api_management_register_api_user_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_register_api_user_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_register_api_user_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_verify_email_code_args = function(args) {
  this.email = null;
  this.code = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
  }
};
open_api_management_verify_email_code_args.prototype = {};
open_api_management_verify_email_code_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.code = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_verify_email_code_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_verify_email_code_args');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.STRING, 2);
    output.writeString(this.code);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_verify_email_code_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_verify_email_code_result.prototype = {};
open_api_management_verify_email_code_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_verify_email_code_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_verify_email_code_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_unregister_api_user_args = function(args) {
  this.email = null;
  this.password = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
open_api_management_unregister_api_user_args.prototype = {};
open_api_management_unregister_api_user_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_unregister_api_user_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_unregister_api_user_args');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_unregister_api_user_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_unregister_api_user_result.prototype = {};
open_api_management_unregister_api_user_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_unregister_api_user_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_unregister_api_user_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_get_token_args = function(args) {
  this.email = null;
  this.password = null;
  if (args) {
    if (args.email !== undefined && args.email !== null) {
      this.email = args.email;
    }
    if (args.password !== undefined && args.password !== null) {
      this.password = args.password;
    }
  }
};
open_api_management_get_token_args.prototype = {};
open_api_management_get_token_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.email = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.password = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_get_token_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_get_token_args');
  if (this.email !== null && this.email !== undefined) {
    output.writeFieldBegin('email', Thrift.Type.STRING, 1);
    output.writeString(this.email);
    output.writeFieldEnd();
  }
  if (this.password !== null && this.password !== undefined) {
    output.writeFieldBegin('password', Thrift.Type.STRING, 2);
    output.writeString(this.password);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_get_token_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_get_token_result.prototype = {};
open_api_management_get_token_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_get_token_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_get_token_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_get_today_transformation_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
open_api_management_get_today_transformation_args.prototype = {};
open_api_management_get_today_transformation_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_get_today_transformation_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_get_today_transformation_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_get_today_transformation_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.api_transformation_info]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_get_today_transformation_result.prototype = {};
open_api_management_get_today_transformation_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3146 = input.readListBegin();
        var _size145 = _rtmp3146.size || 0;
        for (var _i147 = 0; _i147 < _size145; ++_i147) {
          var elem148 = null;
          elem148 = new ttypes.api_transformation_info();
          elem148.read(input);
          this.success.push(elem148);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_get_today_transformation_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_get_today_transformation_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter149 in this.success) {
      if (this.success.hasOwnProperty(iter149)) {
        iter149 = this.success[iter149];
        iter149.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_push_exit_count_args = function(args) {
  this.id = null;
  this.count = null;
  this.is_sale = null;
  this.token = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.count !== undefined && args.count !== null) {
      this.count = args.count;
    }
    if (args.is_sale !== undefined && args.is_sale !== null) {
      this.is_sale = args.is_sale;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
open_api_management_push_exit_count_args.prototype = {};
open_api_management_push_exit_count_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.DOUBLE) {
        this.count = input.readDouble();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_sale = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_push_exit_count_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_push_exit_count_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.count !== null && this.count !== undefined) {
    output.writeFieldBegin('count', Thrift.Type.DOUBLE, 2);
    output.writeDouble(this.count);
    output.writeFieldEnd();
  }
  if (this.is_sale !== null && this.is_sale !== undefined) {
    output.writeFieldBegin('is_sale', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_sale);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 4);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_push_exit_count_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_push_exit_count_result.prototype = {};
open_api_management_push_exit_count_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_push_exit_count_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_push_exit_count_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_push_arrange_args = function(args) {
  this.id = null;
  this.order = null;
  this.is_sale = null;
  this.location = null;
  this.token = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.order !== undefined && args.order !== null) {
      this.order = args.order;
    }
    if (args.is_sale !== undefined && args.is_sale !== null) {
      this.is_sale = args.is_sale;
    }
    if (args.location !== undefined && args.location !== null) {
      this.location = args.location;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
open_api_management_push_arrange_args.prototype = {};
open_api_management_push_arrange_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.order = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_sale = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.location = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_push_arrange_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_push_arrange_args');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.order !== null && this.order !== undefined) {
    output.writeFieldBegin('order', Thrift.Type.STRING, 2);
    output.writeString(this.order);
    output.writeFieldEnd();
  }
  if (this.is_sale !== null && this.is_sale !== undefined) {
    output.writeFieldBegin('is_sale', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_sale);
    output.writeFieldEnd();
  }
  if (this.location !== null && this.location !== undefined) {
    output.writeFieldBegin('location', Thrift.Type.STRING, 4);
    output.writeString(this.location);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 5);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_push_arrange_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_push_arrange_result.prototype = {};
open_api_management_push_arrange_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_push_arrange_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_push_arrange_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_call_vehicle_args = function(args) {
  this._req = null;
  this.token = null;
  if (args) {
    if (args._req !== undefined && args._req !== null) {
      this._req = new ttypes.call_vehicle_req(args._req);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
open_api_management_proc_call_vehicle_args.prototype = {};
open_api_management_proc_call_vehicle_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._req = new ttypes.call_vehicle_req();
        this._req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_call_vehicle_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_call_vehicle_args');
  if (this._req !== null && this._req !== undefined) {
    output.writeFieldBegin('_req', Thrift.Type.STRUCT, 1);
    this._req.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_call_vehicle_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_proc_call_vehicle_result.prototype = {};
open_api_management_proc_call_vehicle_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_call_vehicle_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_call_vehicle_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_vehicle_info_args = function(args) {
  this.plateNo = null;
  this.driverId = null;
  this.token = null;
  if (args) {
    if (args.plateNo !== undefined && args.plateNo !== null) {
      this.plateNo = args.plateNo;
    }
    if (args.driverId !== undefined && args.driverId !== null) {
      this.driverId = args.driverId;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
open_api_management_proc_vehicle_info_args.prototype = {};
open_api_management_proc_vehicle_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.plateNo = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.driverId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_vehicle_info_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_vehicle_info_args');
  if (this.plateNo !== null && this.plateNo !== undefined) {
    output.writeFieldBegin('plateNo', Thrift.Type.STRING, 1);
    output.writeString(this.plateNo);
    output.writeFieldEnd();
  }
  if (this.driverId !== null && this.driverId !== undefined) {
    output.writeFieldBegin('driverId', Thrift.Type.STRING, 2);
    output.writeString(this.driverId);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_vehicle_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.vehicle_info_resp(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_proc_vehicle_info_result.prototype = {};
open_api_management_proc_vehicle_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.vehicle_info_resp();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_vehicle_info_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_vehicle_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_all_vehicle_info_args = function(args) {
  this.token = null;
  if (args) {
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
open_api_management_proc_all_vehicle_info_args.prototype = {};
open_api_management_proc_all_vehicle_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_all_vehicle_info_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_all_vehicle_info_args');
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 1);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_all_vehicle_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.vehicle_info_resp]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_proc_all_vehicle_info_result.prototype = {};
open_api_management_proc_all_vehicle_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp3151 = input.readListBegin();
        var _size150 = _rtmp3151.size || 0;
        for (var _i152 = 0; _i152 < _size150; ++_i152) {
          var elem153 = null;
          elem153 = new ttypes.vehicle_info_resp();
          elem153.read(input);
          this.success.push(elem153);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_all_vehicle_info_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_all_vehicle_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter154 in this.success) {
      if (this.success.hasOwnProperty(iter154)) {
        iter154 = this.success[iter154];
        iter154.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_push_weight_args = function(args) {
  this._req = null;
  this.token = null;
  if (args) {
    if (args._req !== undefined && args._req !== null) {
      this._req = new ttypes.push_weight_req(args._req);
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
open_api_management_proc_push_weight_args.prototype = {};
open_api_management_proc_push_weight_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._req = new ttypes.push_weight_req();
        this._req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_push_weight_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_push_weight_args');
  if (this._req !== null && this._req !== undefined) {
    output.writeFieldBegin('_req', Thrift.Type.STRUCT, 1);
    this._req.write(output);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 2);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_push_weight_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_proc_push_weight_result.prototype = {};
open_api_management_proc_push_weight_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_push_weight_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_push_weight_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_add_black_list_args = function(args) {
  this.type = null;
  this.target = null;
  this.reason = null;
  this.expire_date = null;
  this.token = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.expire_date !== undefined && args.expire_date !== null) {
      this.expire_date = args.expire_date;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
open_api_management_proc_add_black_list_args.prototype = {};
open_api_management_proc_add_black_list_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.type = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.expire_date = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_add_black_list_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_add_black_list_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I64, 1);
    output.writeI64(this.type);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 2);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.expire_date !== null && this.expire_date !== undefined) {
    output.writeFieldBegin('expire_date', Thrift.Type.STRING, 4);
    output.writeString(this.expire_date);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 5);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_add_black_list_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_proc_add_black_list_result.prototype = {};
open_api_management_proc_add_black_list_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_add_black_list_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_add_black_list_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_del_black_list_args = function(args) {
  this.type = null;
  this.target = null;
  this.token = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.token !== undefined && args.token !== null) {
      this.token = args.token;
    }
  }
};
open_api_management_proc_del_black_list_args.prototype = {};
open_api_management_proc_del_black_list_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.type = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.token = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_del_black_list_args.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_del_black_list_args');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.I64, 1);
    output.writeI64(this.type);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 2);
    output.writeString(this.target);
    output.writeFieldEnd();
  }
  if (this.token !== null && this.token !== undefined) {
    output.writeFieldBegin('token', Thrift.Type.STRING, 3);
    output.writeString(this.token);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_management_proc_del_black_list_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
open_api_management_proc_del_black_list_result.prototype = {};
open_api_management_proc_del_black_list_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

open_api_management_proc_del_black_list_result.prototype.write = function(output) {
  output.writeStructBegin('open_api_management_proc_del_black_list_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var open_api_managementClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
open_api_managementClient.prototype = {};
open_api_managementClient.prototype.seqid = function() { return this._seqid; };
open_api_managementClient.prototype.new_seqid = function() { return this._seqid += 1; };

open_api_managementClient.prototype.register_api_user = function(company_name, email, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_register_api_user(company_name, email, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_register_api_user(company_name, email, password);
  }
};

open_api_managementClient.prototype.send_register_api_user = function(company_name, email, password) {
  var output = new this.pClass(this.output);
  var params = {
    company_name: company_name,
    email: email,
    password: password
  };
  var args = new open_api_management_register_api_user_args(params);
  try {
    output.writeMessageBegin('register_api_user', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_register_api_user = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_register_api_user_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('register_api_user failed: unknown result');
};

open_api_managementClient.prototype.verify_email_code = function(email, code, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_verify_email_code(email, code);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_verify_email_code(email, code);
  }
};

open_api_managementClient.prototype.send_verify_email_code = function(email, code) {
  var output = new this.pClass(this.output);
  var params = {
    email: email,
    code: code
  };
  var args = new open_api_management_verify_email_code_args(params);
  try {
    output.writeMessageBegin('verify_email_code', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_verify_email_code = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_verify_email_code_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('verify_email_code failed: unknown result');
};

open_api_managementClient.prototype.unregister_api_user = function(email, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_unregister_api_user(email, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_unregister_api_user(email, password);
  }
};

open_api_managementClient.prototype.send_unregister_api_user = function(email, password) {
  var output = new this.pClass(this.output);
  var params = {
    email: email,
    password: password
  };
  var args = new open_api_management_unregister_api_user_args(params);
  try {
    output.writeMessageBegin('unregister_api_user', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_unregister_api_user = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_unregister_api_user_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('unregister_api_user failed: unknown result');
};

open_api_managementClient.prototype.get_token = function(email, password, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_token(email, password);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_token(email, password);
  }
};

open_api_managementClient.prototype.send_get_token = function(email, password) {
  var output = new this.pClass(this.output);
  var params = {
    email: email,
    password: password
  };
  var args = new open_api_management_get_token_args(params);
  try {
    output.writeMessageBegin('get_token', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_get_token = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_get_token_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_token failed: unknown result');
};

open_api_managementClient.prototype.get_today_transformation = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_today_transformation(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_today_transformation(token);
  }
};

open_api_managementClient.prototype.send_get_today_transformation = function(token) {
  var output = new this.pClass(this.output);
  var params = {
    token: token
  };
  var args = new open_api_management_get_today_transformation_args(params);
  try {
    output.writeMessageBegin('get_today_transformation', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_get_today_transformation = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_get_today_transformation_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_today_transformation failed: unknown result');
};

open_api_managementClient.prototype.push_exit_count = function(id, count, is_sale, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_push_exit_count(id, count, is_sale, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_push_exit_count(id, count, is_sale, token);
  }
};

open_api_managementClient.prototype.send_push_exit_count = function(id, count, is_sale, token) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    count: count,
    is_sale: is_sale,
    token: token
  };
  var args = new open_api_management_push_exit_count_args(params);
  try {
    output.writeMessageBegin('push_exit_count', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_push_exit_count = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_push_exit_count_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('push_exit_count failed: unknown result');
};

open_api_managementClient.prototype.push_arrange = function(id, order, is_sale, location, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_push_arrange(id, order, is_sale, location, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_push_arrange(id, order, is_sale, location, token);
  }
};

open_api_managementClient.prototype.send_push_arrange = function(id, order, is_sale, location, token) {
  var output = new this.pClass(this.output);
  var params = {
    id: id,
    order: order,
    is_sale: is_sale,
    location: location,
    token: token
  };
  var args = new open_api_management_push_arrange_args(params);
  try {
    output.writeMessageBegin('push_arrange', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_push_arrange = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_push_arrange_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('push_arrange failed: unknown result');
};

open_api_managementClient.prototype.proc_call_vehicle = function(_req, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_proc_call_vehicle(_req, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_proc_call_vehicle(_req, token);
  }
};

open_api_managementClient.prototype.send_proc_call_vehicle = function(_req, token) {
  var output = new this.pClass(this.output);
  var params = {
    _req: _req,
    token: token
  };
  var args = new open_api_management_proc_call_vehicle_args(params);
  try {
    output.writeMessageBegin('proc_call_vehicle', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_proc_call_vehicle = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_proc_call_vehicle_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('proc_call_vehicle failed: unknown result');
};

open_api_managementClient.prototype.proc_vehicle_info = function(plateNo, driverId, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_proc_vehicle_info(plateNo, driverId, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_proc_vehicle_info(plateNo, driverId, token);
  }
};

open_api_managementClient.prototype.send_proc_vehicle_info = function(plateNo, driverId, token) {
  var output = new this.pClass(this.output);
  var params = {
    plateNo: plateNo,
    driverId: driverId,
    token: token
  };
  var args = new open_api_management_proc_vehicle_info_args(params);
  try {
    output.writeMessageBegin('proc_vehicle_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_proc_vehicle_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_proc_vehicle_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('proc_vehicle_info failed: unknown result');
};

open_api_managementClient.prototype.proc_all_vehicle_info = function(token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_proc_all_vehicle_info(token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_proc_all_vehicle_info(token);
  }
};

open_api_managementClient.prototype.send_proc_all_vehicle_info = function(token) {
  var output = new this.pClass(this.output);
  var params = {
    token: token
  };
  var args = new open_api_management_proc_all_vehicle_info_args(params);
  try {
    output.writeMessageBegin('proc_all_vehicle_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_proc_all_vehicle_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_proc_all_vehicle_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('proc_all_vehicle_info failed: unknown result');
};

open_api_managementClient.prototype.proc_push_weight = function(_req, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_proc_push_weight(_req, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_proc_push_weight(_req, token);
  }
};

open_api_managementClient.prototype.send_proc_push_weight = function(_req, token) {
  var output = new this.pClass(this.output);
  var params = {
    _req: _req,
    token: token
  };
  var args = new open_api_management_proc_push_weight_args(params);
  try {
    output.writeMessageBegin('proc_push_weight', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_proc_push_weight = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_proc_push_weight_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('proc_push_weight failed: unknown result');
};

open_api_managementClient.prototype.proc_add_black_list = function(type, target, reason, expire_date, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_proc_add_black_list(type, target, reason, expire_date, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_proc_add_black_list(type, target, reason, expire_date, token);
  }
};

open_api_managementClient.prototype.send_proc_add_black_list = function(type, target, reason, expire_date, token) {
  var output = new this.pClass(this.output);
  var params = {
    type: type,
    target: target,
    reason: reason,
    expire_date: expire_date,
    token: token
  };
  var args = new open_api_management_proc_add_black_list_args(params);
  try {
    output.writeMessageBegin('proc_add_black_list', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_proc_add_black_list = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_proc_add_black_list_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('proc_add_black_list failed: unknown result');
};

open_api_managementClient.prototype.proc_del_black_list = function(type, target, token, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_proc_del_black_list(type, target, token);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_proc_del_black_list(type, target, token);
  }
};

open_api_managementClient.prototype.send_proc_del_black_list = function(type, target, token) {
  var output = new this.pClass(this.output);
  var params = {
    type: type,
    target: target,
    token: token
  };
  var args = new open_api_management_proc_del_black_list_args(params);
  try {
    output.writeMessageBegin('proc_del_black_list', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

open_api_managementClient.prototype.recv_proc_del_black_list = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new open_api_management_proc_del_black_list_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('proc_del_black_list failed: unknown result');
};
var open_api_managementProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
open_api_managementProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
open_api_managementProcessor.prototype.process_register_api_user = function(seqid, input, output) {
  var args = new open_api_management_register_api_user_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.register_api_user.length === 3) {
    Q.fcall(this._handler.register_api_user.bind(this._handler),
      args.company_name,
      args.email,
      args.password
    ).then(function(result) {
      var result_obj = new open_api_management_register_api_user_result({success: result});
      output.writeMessageBegin("register_api_user", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_register_api_user_result(err);
        output.writeMessageBegin("register_api_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("register_api_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.register_api_user(args.company_name, args.email, args.password, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_register_api_user_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("register_api_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("register_api_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_verify_email_code = function(seqid, input, output) {
  var args = new open_api_management_verify_email_code_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.verify_email_code.length === 2) {
    Q.fcall(this._handler.verify_email_code.bind(this._handler),
      args.email,
      args.code
    ).then(function(result) {
      var result_obj = new open_api_management_verify_email_code_result({success: result});
      output.writeMessageBegin("verify_email_code", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_verify_email_code_result(err);
        output.writeMessageBegin("verify_email_code", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verify_email_code", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.verify_email_code(args.email, args.code, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_verify_email_code_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("verify_email_code", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("verify_email_code", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_unregister_api_user = function(seqid, input, output) {
  var args = new open_api_management_unregister_api_user_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.unregister_api_user.length === 2) {
    Q.fcall(this._handler.unregister_api_user.bind(this._handler),
      args.email,
      args.password
    ).then(function(result) {
      var result_obj = new open_api_management_unregister_api_user_result({success: result});
      output.writeMessageBegin("unregister_api_user", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_unregister_api_user_result(err);
        output.writeMessageBegin("unregister_api_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregister_api_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.unregister_api_user(args.email, args.password, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_unregister_api_user_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("unregister_api_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("unregister_api_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_get_token = function(seqid, input, output) {
  var args = new open_api_management_get_token_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_token.length === 2) {
    Q.fcall(this._handler.get_token.bind(this._handler),
      args.email,
      args.password
    ).then(function(result) {
      var result_obj = new open_api_management_get_token_result({success: result});
      output.writeMessageBegin("get_token", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_get_token_result(err);
        output.writeMessageBegin("get_token", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_token", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_token(args.email, args.password, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_get_token_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_token", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_token", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_get_today_transformation = function(seqid, input, output) {
  var args = new open_api_management_get_today_transformation_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_today_transformation.length === 1) {
    Q.fcall(this._handler.get_today_transformation.bind(this._handler),
      args.token
    ).then(function(result) {
      var result_obj = new open_api_management_get_today_transformation_result({success: result});
      output.writeMessageBegin("get_today_transformation", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_get_today_transformation_result(err);
        output.writeMessageBegin("get_today_transformation", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_today_transformation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_today_transformation(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_get_today_transformation_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_today_transformation", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_today_transformation", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_push_exit_count = function(seqid, input, output) {
  var args = new open_api_management_push_exit_count_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.push_exit_count.length === 4) {
    Q.fcall(this._handler.push_exit_count.bind(this._handler),
      args.id,
      args.count,
      args.is_sale,
      args.token
    ).then(function(result) {
      var result_obj = new open_api_management_push_exit_count_result({success: result});
      output.writeMessageBegin("push_exit_count", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_push_exit_count_result(err);
        output.writeMessageBegin("push_exit_count", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("push_exit_count", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.push_exit_count(args.id, args.count, args.is_sale, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_push_exit_count_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("push_exit_count", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("push_exit_count", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_push_arrange = function(seqid, input, output) {
  var args = new open_api_management_push_arrange_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.push_arrange.length === 5) {
    Q.fcall(this._handler.push_arrange.bind(this._handler),
      args.id,
      args.order,
      args.is_sale,
      args.location,
      args.token
    ).then(function(result) {
      var result_obj = new open_api_management_push_arrange_result({success: result});
      output.writeMessageBegin("push_arrange", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_push_arrange_result(err);
        output.writeMessageBegin("push_arrange", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("push_arrange", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.push_arrange(args.id, args.order, args.is_sale, args.location, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_push_arrange_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("push_arrange", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("push_arrange", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_proc_call_vehicle = function(seqid, input, output) {
  var args = new open_api_management_proc_call_vehicle_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.proc_call_vehicle.length === 2) {
    Q.fcall(this._handler.proc_call_vehicle.bind(this._handler),
      args._req,
      args.token
    ).then(function(result) {
      var result_obj = new open_api_management_proc_call_vehicle_result({success: result});
      output.writeMessageBegin("proc_call_vehicle", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_proc_call_vehicle_result(err);
        output.writeMessageBegin("proc_call_vehicle", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_call_vehicle", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.proc_call_vehicle(args._req, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_proc_call_vehicle_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("proc_call_vehicle", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_call_vehicle", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_proc_vehicle_info = function(seqid, input, output) {
  var args = new open_api_management_proc_vehicle_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.proc_vehicle_info.length === 3) {
    Q.fcall(this._handler.proc_vehicle_info.bind(this._handler),
      args.plateNo,
      args.driverId,
      args.token
    ).then(function(result) {
      var result_obj = new open_api_management_proc_vehicle_info_result({success: result});
      output.writeMessageBegin("proc_vehicle_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_proc_vehicle_info_result(err);
        output.writeMessageBegin("proc_vehicle_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_vehicle_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.proc_vehicle_info(args.plateNo, args.driverId, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_proc_vehicle_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("proc_vehicle_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_vehicle_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_proc_all_vehicle_info = function(seqid, input, output) {
  var args = new open_api_management_proc_all_vehicle_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.proc_all_vehicle_info.length === 1) {
    Q.fcall(this._handler.proc_all_vehicle_info.bind(this._handler),
      args.token
    ).then(function(result) {
      var result_obj = new open_api_management_proc_all_vehicle_info_result({success: result});
      output.writeMessageBegin("proc_all_vehicle_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_proc_all_vehicle_info_result(err);
        output.writeMessageBegin("proc_all_vehicle_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_all_vehicle_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.proc_all_vehicle_info(args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_proc_all_vehicle_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("proc_all_vehicle_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_all_vehicle_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_proc_push_weight = function(seqid, input, output) {
  var args = new open_api_management_proc_push_weight_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.proc_push_weight.length === 2) {
    Q.fcall(this._handler.proc_push_weight.bind(this._handler),
      args._req,
      args.token
    ).then(function(result) {
      var result_obj = new open_api_management_proc_push_weight_result({success: result});
      output.writeMessageBegin("proc_push_weight", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_proc_push_weight_result(err);
        output.writeMessageBegin("proc_push_weight", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_push_weight", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.proc_push_weight(args._req, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_proc_push_weight_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("proc_push_weight", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_push_weight", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_proc_add_black_list = function(seqid, input, output) {
  var args = new open_api_management_proc_add_black_list_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.proc_add_black_list.length === 5) {
    Q.fcall(this._handler.proc_add_black_list.bind(this._handler),
      args.type,
      args.target,
      args.reason,
      args.expire_date,
      args.token
    ).then(function(result) {
      var result_obj = new open_api_management_proc_add_black_list_result({success: result});
      output.writeMessageBegin("proc_add_black_list", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_proc_add_black_list_result(err);
        output.writeMessageBegin("proc_add_black_list", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_add_black_list", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.proc_add_black_list(args.type, args.target, args.reason, args.expire_date, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_proc_add_black_list_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("proc_add_black_list", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_add_black_list", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
open_api_managementProcessor.prototype.process_proc_del_black_list = function(seqid, input, output) {
  var args = new open_api_management_proc_del_black_list_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.proc_del_black_list.length === 3) {
    Q.fcall(this._handler.proc_del_black_list.bind(this._handler),
      args.type,
      args.target,
      args.token
    ).then(function(result) {
      var result_obj = new open_api_management_proc_del_black_list_result({success: result});
      output.writeMessageBegin("proc_del_black_list", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new open_api_management_proc_del_black_list_result(err);
        output.writeMessageBegin("proc_del_black_list", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_del_black_list", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.proc_del_black_list(args.type, args.target, args.token, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new open_api_management_proc_del_black_list_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("proc_del_black_list", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("proc_del_black_list", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
