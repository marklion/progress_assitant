//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
"use strict";

var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;
var Int64 = require('node-int64');


var ttypes = require('./idl_types');
//HELPER FUNCTIONS AND STRUCTURES

var company_management_get_all_type_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_all_type_args.prototype = {};
company_management_get_all_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_type_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_type_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_type_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_all_type_result.prototype = {};
company_management_get_all_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp326 = input.readListBegin();
        var _size25 = _rtmp326.size || 0;
        for (var _i27 = 0; _i27 < _size25; ++_i27) {
          var elem28 = null;
          elem28 = input.readI64();
          this.success.push(elem28);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_type_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.I64, this.success.length);
    for (var iter29 in this.success) {
      if (this.success.hasOwnProperty(iter29)) {
        iter29 = this.success[iter29];
        output.writeI64(iter29);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_add_type_args = function(args) {
  this.name = null;
  this.price = null;
  this.last = null;
  this.ssid = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.price !== undefined && args.price !== null) {
      this.price = args.price;
    }
    if (args.last !== undefined && args.last !== null) {
      this.last = args.last;
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_add_type_args.prototype = {};
company_management_add_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.price = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.last = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_add_type_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_add_type_args');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.price !== null && this.price !== undefined) {
    output.writeFieldBegin('price', Thrift.Type.I64, 2);
    output.writeI64(this.price);
    output.writeFieldEnd();
  }
  if (this.last !== null && this.last !== undefined) {
    output.writeFieldBegin('last', Thrift.Type.STRING, 3);
    output.writeString(this.last);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 4);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_add_type_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_add_type_result.prototype = {};
company_management_add_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_add_type_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_add_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_edit_type_args = function(args) {
  this.stuff = null;
  this.ssid = null;
  if (args) {
    if (args.stuff !== undefined && args.stuff !== null) {
      this.stuff = new ttypes.stuff_detail(args.stuff);
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_edit_type_args.prototype = {};
company_management_edit_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stuff = new ttypes.stuff_detail();
        this.stuff.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_edit_type_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_edit_type_args');
  if (this.stuff !== null && this.stuff !== undefined) {
    output.writeFieldBegin('stuff', Thrift.Type.STRUCT, 1);
    this.stuff.write(output);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_edit_type_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_edit_type_result.prototype = {};
company_management_edit_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_edit_type_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_edit_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_remove_type_args = function(args) {
  this.stuff = null;
  this.ssid = null;
  if (args) {
    if (args.stuff !== undefined && args.stuff !== null) {
      this.stuff = new ttypes.stuff_detail(args.stuff);
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_remove_type_args.prototype = {};
company_management_remove_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stuff = new ttypes.stuff_detail();
        this.stuff.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_remove_type_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_remove_type_args');
  if (this.stuff !== null && this.stuff !== undefined) {
    output.writeFieldBegin('stuff', Thrift.Type.STRUCT, 1);
    this.stuff.write(output);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_remove_type_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_remove_type_result.prototype = {};
company_management_remove_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_remove_type_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_remove_type_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_readd_type_args = function(args) {
  this.stuff = null;
  this.ssid = null;
  if (args) {
    if (args.stuff !== undefined && args.stuff !== null) {
      this.stuff = new ttypes.stuff_detail(args.stuff);
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_readd_type_args.prototype = {};
company_management_readd_type_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.stuff = new ttypes.stuff_detail();
        this.stuff.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_readd_type_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_readd_type_args');
  if (this.stuff !== null && this.stuff !== undefined) {
    output.writeFieldBegin('stuff', Thrift.Type.STRUCT, 1);
    this.stuff.write(output);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_readd_type_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_readd_type_result.prototype = {};
company_management_readd_type_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_readd_type_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_readd_type_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_apply_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_all_apply_args.prototype = {};
company_management_get_all_apply_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_apply_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_apply_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_apply_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.user_apply]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_all_apply_result.prototype = {};
company_management_get_all_apply_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp331 = input.readListBegin();
        var _size30 = _rtmp331.size || 0;
        for (var _i32 = 0; _i32 < _size30; ++_i32) {
          var elem33 = null;
          elem33 = new ttypes.user_apply();
          elem33.read(input);
          this.success.push(elem33);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_apply_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_apply_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter34 in this.success) {
      if (this.success.hasOwnProperty(iter34)) {
        iter34 = this.success[iter34];
        iter34.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_approve_apply_args = function(args) {
  this.apply_id = null;
  this.ssid = null;
  this.approve = null;
  if (args) {
    if (args.apply_id !== undefined && args.apply_id !== null) {
      this.apply_id = args.apply_id;
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.approve !== undefined && args.approve !== null) {
      this.approve = args.approve;
    }
  }
};
company_management_approve_apply_args.prototype = {};
company_management_approve_apply_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.apply_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.approve = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_approve_apply_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_approve_apply_args');
  if (this.apply_id !== null && this.apply_id !== undefined) {
    output.writeFieldBegin('apply_id', Thrift.Type.I64, 1);
    output.writeI64(this.apply_id);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.approve !== null && this.approve !== undefined) {
    output.writeFieldBegin('approve', Thrift.Type.BOOL, 3);
    output.writeBool(this.approve);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_approve_apply_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_approve_apply_result.prototype = {};
company_management_approve_apply_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_approve_apply_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_approve_apply_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_generate_statistics_args = function(args) {
  this.ssid = null;
  this.begin_date = null;
  this.end_date = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.begin_date !== undefined && args.begin_date !== null) {
      this.begin_date = args.begin_date;
    }
    if (args.end_date !== undefined && args.end_date !== null) {
      this.end_date = args.end_date;
    }
  }
};
company_management_generate_statistics_args.prototype = {};
company_management_generate_statistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.begin_date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.end_date = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_generate_statistics_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_generate_statistics_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.begin_date !== null && this.begin_date !== undefined) {
    output.writeFieldBegin('begin_date', Thrift.Type.I64, 2);
    output.writeI64(this.begin_date);
    output.writeFieldEnd();
  }
  if (this.end_date !== null && this.end_date !== undefined) {
    output.writeFieldBegin('end_date', Thrift.Type.I64, 3);
    output.writeI64(this.end_date);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_generate_statistics_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_generate_statistics_result.prototype = {};
company_management_generate_statistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_generate_statistics_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_generate_statistics_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_notice_args = function(args) {
  this.ssid = null;
  this.notice = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.notice !== undefined && args.notice !== null) {
      this.notice = args.notice;
    }
  }
};
company_management_set_notice_args.prototype = {};
company_management_set_notice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.notice = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_notice_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_notice_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.notice !== null && this.notice !== undefined) {
    output.writeFieldBegin('notice', Thrift.Type.STRING, 2);
    output.writeString(this.notice);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_notice_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_set_notice_result.prototype = {};
company_management_set_notice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_notice_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_notice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_notice_args = function(args) {
  this.company_name = null;
  if (args) {
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
  }
};
company_management_get_notice_args.prototype = {};
company_management_get_notice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_notice_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_notice_args');
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 1);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_notice_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_notice_result.prototype = {};
company_management_get_notice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_notice_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_notice_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_clear_notice_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_clear_notice_args.prototype = {};
company_management_clear_notice_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_clear_notice_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_clear_notice_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_clear_notice_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_clear_notice_result.prototype = {};
company_management_clear_notice_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_clear_notice_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_clear_notice_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_compay_user_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_all_compay_user_args.prototype = {};
company_management_get_all_compay_user_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_compay_user_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_compay_user_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_compay_user_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.user_info]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_all_compay_user_result.prototype = {};
company_management_get_all_compay_user_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp336 = input.readListBegin();
        var _size35 = _rtmp336.size || 0;
        for (var _i37 = 0; _i37 < _size35; ++_i37) {
          var elem38 = null;
          elem38 = new ttypes.user_info();
          elem38.read(input);
          this.success.push(elem38);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_compay_user_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_compay_user_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter39 in this.success) {
      if (this.success.hasOwnProperty(iter39)) {
        iter39 = this.success[iter39];
        iter39.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_remove_user_from_company_args = function(args) {
  this.ssid = null;
  this.user_id = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.user_id !== undefined && args.user_id !== null) {
      this.user_id = args.user_id;
    }
  }
};
company_management_remove_user_from_company_args.prototype = {};
company_management_remove_user_from_company_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.user_id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_remove_user_from_company_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_remove_user_from_company_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.user_id !== null && this.user_id !== undefined) {
    output.writeFieldBegin('user_id', Thrift.Type.I64, 2);
    output.writeI64(this.user_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_remove_user_from_company_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_remove_user_from_company_result.prototype = {};
company_management_remove_user_from_company_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_remove_user_from_company_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_remove_user_from_company_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_company_logo_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_company_logo_args.prototype = {};
company_management_get_company_logo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_company_logo_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_company_logo_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_company_logo_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_company_logo_result.prototype = {};
company_management_get_company_logo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_company_logo_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_company_logo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_address_args = function(args) {
  this.ssid = null;
  this.address = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
  }
};
company_management_set_address_args.prototype = {};
company_management_set_address_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_address_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_address_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 2);
    output.writeString(this.address);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_address_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_set_address_result.prototype = {};
company_management_set_address_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_address_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_address_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_address_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_address_args.prototype = {};
company_management_get_address_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_address_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_address_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_address_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_address_result.prototype = {};
company_management_get_address_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_address_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_address_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_contact_args = function(args) {
  this.ssid = null;
  this.contact = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.contact !== undefined && args.contact !== null) {
      this.contact = args.contact;
    }
  }
};
company_management_set_contact_args.prototype = {};
company_management_set_contact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.contact = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_contact_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_contact_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.contact !== null && this.contact !== undefined) {
    output.writeFieldBegin('contact', Thrift.Type.STRING, 2);
    output.writeString(this.contact);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_contact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_set_contact_result.prototype = {};
company_management_set_contact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_contact_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_contact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_contact_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_contact_args.prototype = {};
company_management_get_contact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_contact_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_contact_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_contact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_contact_result.prototype = {};
company_management_get_contact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_contact_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_contact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_address_contact_args = function(args) {
  this.company_name = null;
  if (args) {
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
  }
};
company_management_get_address_contact_args.prototype = {};
company_management_get_address_contact_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_address_contact_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_address_contact_args');
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 1);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_address_contact_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.company_address_contact_info(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_address_contact_result.prototype = {};
company_management_get_address_contact_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.company_address_contact_info();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_address_contact_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_address_contact_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_add_attachment_args = function(args) {
  this.ssid = null;
  this.base64content = null;
  this.is_pdf = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.base64content !== undefined && args.base64content !== null) {
      this.base64content = args.base64content;
    }
    if (args.is_pdf !== undefined && args.is_pdf !== null) {
      this.is_pdf = args.is_pdf;
    }
  }
};
company_management_add_attachment_args.prototype = {};
company_management_add_attachment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.base64content = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.is_pdf = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_add_attachment_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_add_attachment_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.base64content !== null && this.base64content !== undefined) {
    output.writeFieldBegin('base64content', Thrift.Type.STRING, 2);
    output.writeBinary(this.base64content);
    output.writeFieldEnd();
  }
  if (this.is_pdf !== null && this.is_pdf !== undefined) {
    output.writeFieldBegin('is_pdf', Thrift.Type.BOOL, 3);
    output.writeBool(this.is_pdf);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_add_attachment_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_add_attachment_result.prototype = {};
company_management_add_attachment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_add_attachment_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_add_attachment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_del_attachment_args = function(args) {
  this.ssid = null;
  this.id = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
company_management_del_attachment_args.prototype = {};
company_management_del_attachment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_del_attachment_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_del_attachment_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_del_attachment_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_del_attachment_result.prototype = {};
company_management_del_attachment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_del_attachment_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_del_attachment_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_attachment_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_all_attachment_args.prototype = {};
company_management_get_all_attachment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_attachment_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_attachment_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_attachment_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.company_attachment]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_all_attachment_result.prototype = {};
company_management_get_all_attachment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp341 = input.readListBegin();
        var _size40 = _rtmp341.size || 0;
        for (var _i42 = 0; _i42 < _size40; ++_i42) {
          var elem43 = null;
          elem43 = new ttypes.company_attachment();
          elem43.read(input);
          this.success.push(elem43);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_attachment_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_attachment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter44 in this.success) {
      if (this.success.hasOwnProperty(iter44)) {
        iter44 = this.success[iter44];
        iter44.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_attachment_args = function(args) {
  this.company_name = null;
  if (args) {
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
  }
};
company_management_get_attachment_args.prototype = {};
company_management_get_attachment_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_attachment_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_attachment_args');
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 1);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_attachment_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_attachment_result.prototype = {};
company_management_get_attachment_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRING) {
        this.success = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_attachment_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_attachment_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRING, 0);
    output.writeString(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_real_access_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_real_access_args.prototype = {};
company_management_get_real_access_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_real_access_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_real_access_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_real_access_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.real_access_record]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_real_access_result.prototype = {};
company_management_get_real_access_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp346 = input.readListBegin();
        var _size45 = _rtmp346.size || 0;
        for (var _i47 = 0; _i47 < _size45; ++_i47) {
          var elem48 = null;
          elem48 = new ttypes.real_access_record();
          elem48.read(input);
          this.success.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_real_access_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_real_access_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter49 in this.success) {
      if (this.success.hasOwnProperty(iter49)) {
        iter49 = this.success[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_access_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_all_access_args.prototype = {};
company_management_get_all_access_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_access_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_access_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_access_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.real_access_record]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_all_access_result.prototype = {};
company_management_get_all_access_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp351 = input.readListBegin();
        var _size50 = _rtmp351.size || 0;
        for (var _i52 = 0; _i52 < _size50; ++_i52) {
          var elem53 = null;
          elem53 = new ttypes.real_access_record();
          elem53.read(input);
          this.success.push(elem53);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_access_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_access_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter54 in this.success) {
      if (this.success.hasOwnProperty(iter54)) {
        iter54 = this.success[iter54];
        iter54.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_add_contract_args = function(args) {
  this.ssid = null;
  this.contract = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.contract !== undefined && args.contract !== null) {
      this.contract = new ttypes.common_contract(args.contract);
    }
  }
};
company_management_add_contract_args.prototype = {};
company_management_add_contract_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract = new ttypes.common_contract();
        this.contract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_add_contract_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_add_contract_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.contract !== null && this.contract !== undefined) {
    output.writeFieldBegin('contract', Thrift.Type.STRUCT, 2);
    this.contract.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_add_contract_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_add_contract_result.prototype = {};
company_management_add_contract_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_add_contract_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_add_contract_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_update_contract_args = function(args) {
  this.ssid = null;
  this.contract = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.contract !== undefined && args.contract !== null) {
      this.contract = new ttypes.common_contract(args.contract);
    }
  }
};
company_management_update_contract_args.prototype = {};
company_management_update_contract_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.contract = new ttypes.common_contract();
        this.contract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_update_contract_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_update_contract_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.contract !== null && this.contract !== undefined) {
    output.writeFieldBegin('contract', Thrift.Type.STRUCT, 2);
    this.contract.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_update_contract_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_update_contract_result.prototype = {};
company_management_update_contract_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_update_contract_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_update_contract_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_del_contract_args = function(args) {
  this.ssid = null;
  this.id = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
  }
};
company_management_del_contract_args.prototype = {};
company_management_del_contract_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_del_contract_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_del_contract_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 2);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_del_contract_result = function(args) {
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_del_contract_result.prototype = {};
company_management_del_contract_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_del_contract_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_del_contract_result');
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_contract_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_all_contract_args.prototype = {};
company_management_get_all_contract_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_contract_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_contract_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_all_contract_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [ttypes.common_contract]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_all_contract_result.prototype = {};
company_management_get_all_contract_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp356 = input.readListBegin();
        var _size55 = _rtmp356.size || 0;
        for (var _i57 = 0; _i57 < _size55; ++_i57) {
          var elem58 = null;
          elem58 = new ttypes.common_contract();
          elem58.read(input);
          this.success.push(elem58);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_all_contract_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_all_contract_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
    for (var iter59 in this.success) {
      if (this.success.hasOwnProperty(iter59)) {
        iter59 = this.success[iter59];
        iter59.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_contract_args = function(args) {
  this.a_side_company = null;
  this.b_side_company = null;
  if (args) {
    if (args.a_side_company !== undefined && args.a_side_company !== null) {
      this.a_side_company = args.a_side_company;
    }
    if (args.b_side_company !== undefined && args.b_side_company !== null) {
      this.b_side_company = args.b_side_company;
    }
  }
};
company_management_get_contract_args.prototype = {};
company_management_get_contract_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.a_side_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.b_side_company = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_contract_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_contract_args');
  if (this.a_side_company !== null && this.a_side_company !== undefined) {
    output.writeFieldBegin('a_side_company', Thrift.Type.STRING, 1);
    output.writeString(this.a_side_company);
    output.writeFieldEnd();
  }
  if (this.b_side_company !== null && this.b_side_company !== undefined) {
    output.writeFieldBegin('b_side_company', Thrift.Type.STRING, 2);
    output.writeString(this.b_side_company);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_contract_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.common_contract(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_contract_result.prototype = {};
company_management_get_contract_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.common_contract();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_contract_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_contract_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_work_time_args = function(args) {
  this.ssid = null;
  this.start_work_time = null;
  this.end_work_time = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
    if (args.start_work_time !== undefined && args.start_work_time !== null) {
      this.start_work_time = args.start_work_time;
    }
    if (args.end_work_time !== undefined && args.end_work_time !== null) {
      this.end_work_time = args.end_work_time;
    }
  }
};
company_management_set_work_time_args.prototype = {};
company_management_set_work_time_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.start_work_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.end_work_time = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_work_time_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_work_time_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  if (this.start_work_time !== null && this.start_work_time !== undefined) {
    output.writeFieldBegin('start_work_time', Thrift.Type.I64, 2);
    output.writeI64(this.start_work_time);
    output.writeFieldEnd();
  }
  if (this.end_work_time !== null && this.end_work_time !== undefined) {
    output.writeFieldBegin('end_work_time', Thrift.Type.I64, 3);
    output.writeI64(this.end_work_time);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_work_time_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_set_work_time_result.prototype = {};
company_management_set_work_time_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_work_time_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_work_time_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_work_time_args = function(args) {
  this.company_name = null;
  if (args) {
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
  }
};
company_management_get_work_time_args.prototype = {};
company_management_get_work_time_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_work_time_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_work_time_args');
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 1);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_work_time_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.company_work_time(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_work_time_result.prototype = {};
company_management_get_work_time_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.company_work_time();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_work_time_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_work_time_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_company_position_config_args = function(args) {
  this.company_name = null;
  if (args) {
    if (args.company_name !== undefined && args.company_name !== null) {
      this.company_name = args.company_name;
    }
  }
};
company_management_get_company_position_config_args.prototype = {};
company_management_get_company_position_config_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.company_name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_company_position_config_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_company_position_config_args');
  if (this.company_name !== null && this.company_name !== undefined) {
    output.writeFieldBegin('company_name', Thrift.Type.STRING, 1);
    output.writeString(this.company_name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_company_position_config_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.company_positon_lat_lag(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_company_position_config_result.prototype = {};
company_management_get_company_position_config_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.company_positon_lat_lag();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_company_position_config_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_company_position_config_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_third_info_args = function(args) {
  this._info = null;
  this.ssid = null;
  if (args) {
    if (args._info !== undefined && args._info !== null) {
      this._info = new ttypes.third_dev_info(args._info);
    }
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_set_third_info_args.prototype = {};
company_management_set_third_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this._info = new ttypes.third_dev_info();
        this._info.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_third_info_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_third_info_args');
  if (this._info !== null && this._info !== undefined) {
    output.writeFieldBegin('_info', Thrift.Type.STRUCT, 1);
    this._info.write(output);
    output.writeFieldEnd();
  }
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_set_third_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = args.success;
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_set_third_info_result.prototype = {};
company_management_set_third_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_set_third_info_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_set_third_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_third_info_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_third_info_args.prototype = {};
company_management_get_third_info_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_third_info_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_third_info_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_third_info_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new ttypes.third_dev_info(args.success);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_third_info_result.prototype = {};
company_management_get_third_info_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new ttypes.third_dev_info();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_third_info_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_third_info_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_related_company_args = function(args) {
  this.ssid = null;
  if (args) {
    if (args.ssid !== undefined && args.ssid !== null) {
      this.ssid = args.ssid;
    }
  }
};
company_management_get_related_company_args.prototype = {};
company_management_get_related_company_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.ssid = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_related_company_args.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_related_company_args');
  if (this.ssid !== null && this.ssid !== undefined) {
    output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
    output.writeString(this.ssid);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_management_get_related_company_result = function(args) {
  this.success = null;
  this.e = null;
  if (args instanceof ttypes.gen_exp) {
    this.e = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = Thrift.copyList(args.success, [null]);
    }
    if (args.e !== undefined && args.e !== null) {
      this.e = args.e;
    }
  }
};
company_management_get_related_company_result.prototype = {};
company_management_get_related_company_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.LIST) {
        this.success = [];
        var _rtmp361 = input.readListBegin();
        var _size60 = _rtmp361.size || 0;
        for (var _i62 = 0; _i62 < _size60; ++_i62) {
          var elem63 = null;
          elem63 = input.readString();
          this.success.push(elem63);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.e = new ttypes.gen_exp();
        this.e.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

company_management_get_related_company_result.prototype.write = function(output) {
  output.writeStructBegin('company_management_get_related_company_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.LIST, 0);
    output.writeListBegin(Thrift.Type.STRING, this.success.length);
    for (var iter64 in this.success) {
      if (this.success.hasOwnProperty(iter64)) {
        iter64 = this.success[iter64];
        output.writeString(iter64);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.e !== null && this.e !== undefined) {
    output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
    this.e.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var company_managementClient = exports.Client = function(output, pClass) {
  this.output = output;
  this.pClass = pClass;
  this._seqid = 0;
  this._reqs = {};
};
company_managementClient.prototype = {};
company_managementClient.prototype.seqid = function() { return this._seqid; };
company_managementClient.prototype.new_seqid = function() { return this._seqid += 1; };

company_managementClient.prototype.get_all_type = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_type(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_type(ssid);
  }
};

company_managementClient.prototype.send_get_all_type = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_all_type_args(params);
  try {
    output.writeMessageBegin('get_all_type', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_all_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_all_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_type failed: unknown result');
};

company_managementClient.prototype.add_type = function(name, price, last, ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_type(name, price, last, ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_type(name, price, last, ssid);
  }
};

company_managementClient.prototype.send_add_type = function(name, price, last, ssid) {
  var output = new this.pClass(this.output);
  var params = {
    name: name,
    price: price,
    last: last,
    ssid: ssid
  };
  var args = new company_management_add_type_args(params);
  try {
    output.writeMessageBegin('add_type', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_add_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_add_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_type failed: unknown result');
};

company_managementClient.prototype.edit_type = function(stuff, ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_edit_type(stuff, ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_edit_type(stuff, ssid);
  }
};

company_managementClient.prototype.send_edit_type = function(stuff, ssid) {
  var output = new this.pClass(this.output);
  var params = {
    stuff: stuff,
    ssid: ssid
  };
  var args = new company_management_edit_type_args(params);
  try {
    output.writeMessageBegin('edit_type', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_edit_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_edit_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('edit_type failed: unknown result');
};

company_managementClient.prototype.remove_type = function(stuff, ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove_type(stuff, ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove_type(stuff, ssid);
  }
};

company_managementClient.prototype.send_remove_type = function(stuff, ssid) {
  var output = new this.pClass(this.output);
  var params = {
    stuff: stuff,
    ssid: ssid
  };
  var args = new company_management_remove_type_args(params);
  try {
    output.writeMessageBegin('remove_type', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_remove_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_remove_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

company_managementClient.prototype.readd_type = function(stuff, ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_readd_type(stuff, ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_readd_type(stuff, ssid);
  }
};

company_managementClient.prototype.send_readd_type = function(stuff, ssid) {
  var output = new this.pClass(this.output);
  var params = {
    stuff: stuff,
    ssid: ssid
  };
  var args = new company_management_readd_type_args(params);
  try {
    output.writeMessageBegin('readd_type', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_readd_type = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_readd_type_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('readd_type failed: unknown result');
};

company_managementClient.prototype.get_all_apply = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_apply(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_apply(ssid);
  }
};

company_managementClient.prototype.send_get_all_apply = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_all_apply_args(params);
  try {
    output.writeMessageBegin('get_all_apply', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_all_apply = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_all_apply_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_apply failed: unknown result');
};

company_managementClient.prototype.approve_apply = function(apply_id, ssid, approve, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_approve_apply(apply_id, ssid, approve);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_approve_apply(apply_id, ssid, approve);
  }
};

company_managementClient.prototype.send_approve_apply = function(apply_id, ssid, approve) {
  var output = new this.pClass(this.output);
  var params = {
    apply_id: apply_id,
    ssid: ssid,
    approve: approve
  };
  var args = new company_management_approve_apply_args(params);
  try {
    output.writeMessageBegin('approve_apply', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_approve_apply = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_approve_apply_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('approve_apply failed: unknown result');
};

company_managementClient.prototype.generate_statistics = function(ssid, begin_date, end_date, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_generate_statistics(ssid, begin_date, end_date);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_generate_statistics(ssid, begin_date, end_date);
  }
};

company_managementClient.prototype.send_generate_statistics = function(ssid, begin_date, end_date) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    begin_date: begin_date,
    end_date: end_date
  };
  var args = new company_management_generate_statistics_args(params);
  try {
    output.writeMessageBegin('generate_statistics', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_generate_statistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_generate_statistics_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('generate_statistics failed: unknown result');
};

company_managementClient.prototype.set_notice = function(ssid, notice, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_notice(ssid, notice);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_notice(ssid, notice);
  }
};

company_managementClient.prototype.send_set_notice = function(ssid, notice) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    notice: notice
  };
  var args = new company_management_set_notice_args(params);
  try {
    output.writeMessageBegin('set_notice', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_set_notice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_set_notice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_notice failed: unknown result');
};

company_managementClient.prototype.get_notice = function(company_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_notice(company_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_notice(company_name);
  }
};

company_managementClient.prototype.send_get_notice = function(company_name) {
  var output = new this.pClass(this.output);
  var params = {
    company_name: company_name
  };
  var args = new company_management_get_notice_args(params);
  try {
    output.writeMessageBegin('get_notice', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_notice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_notice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_notice failed: unknown result');
};

company_managementClient.prototype.clear_notice = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_clear_notice(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_clear_notice(ssid);
  }
};

company_managementClient.prototype.send_clear_notice = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_clear_notice_args(params);
  try {
    output.writeMessageBegin('clear_notice', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_clear_notice = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_clear_notice_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

company_managementClient.prototype.get_all_compay_user = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_compay_user(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_compay_user(ssid);
  }
};

company_managementClient.prototype.send_get_all_compay_user = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_all_compay_user_args(params);
  try {
    output.writeMessageBegin('get_all_compay_user', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_all_compay_user = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_all_compay_user_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_compay_user failed: unknown result');
};

company_managementClient.prototype.remove_user_from_company = function(ssid, user_id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_remove_user_from_company(ssid, user_id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_remove_user_from_company(ssid, user_id);
  }
};

company_managementClient.prototype.send_remove_user_from_company = function(ssid, user_id) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    user_id: user_id
  };
  var args = new company_management_remove_user_from_company_args(params);
  try {
    output.writeMessageBegin('remove_user_from_company', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_remove_user_from_company = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_remove_user_from_company_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('remove_user_from_company failed: unknown result');
};

company_managementClient.prototype.get_company_logo = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_company_logo(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_company_logo(ssid);
  }
};

company_managementClient.prototype.send_get_company_logo = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_company_logo_args(params);
  try {
    output.writeMessageBegin('get_company_logo', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_company_logo = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_company_logo_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_company_logo failed: unknown result');
};

company_managementClient.prototype.set_address = function(ssid, address, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_address(ssid, address);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_address(ssid, address);
  }
};

company_managementClient.prototype.send_set_address = function(ssid, address) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    address: address
  };
  var args = new company_management_set_address_args(params);
  try {
    output.writeMessageBegin('set_address', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_set_address = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_set_address_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_address failed: unknown result');
};

company_managementClient.prototype.get_address = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_address(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_address(ssid);
  }
};

company_managementClient.prototype.send_get_address = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_address_args(params);
  try {
    output.writeMessageBegin('get_address', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_address = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_address_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_address failed: unknown result');
};

company_managementClient.prototype.set_contact = function(ssid, contact, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_contact(ssid, contact);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_contact(ssid, contact);
  }
};

company_managementClient.prototype.send_set_contact = function(ssid, contact) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    contact: contact
  };
  var args = new company_management_set_contact_args(params);
  try {
    output.writeMessageBegin('set_contact', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_set_contact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_set_contact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_contact failed: unknown result');
};

company_managementClient.prototype.get_contact = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_contact(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_contact(ssid);
  }
};

company_managementClient.prototype.send_get_contact = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_contact_args(params);
  try {
    output.writeMessageBegin('get_contact', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_contact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_contact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_contact failed: unknown result');
};

company_managementClient.prototype.get_address_contact = function(company_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_address_contact(company_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_address_contact(company_name);
  }
};

company_managementClient.prototype.send_get_address_contact = function(company_name) {
  var output = new this.pClass(this.output);
  var params = {
    company_name: company_name
  };
  var args = new company_management_get_address_contact_args(params);
  try {
    output.writeMessageBegin('get_address_contact', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_address_contact = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_address_contact_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_address_contact failed: unknown result');
};

company_managementClient.prototype.add_attachment = function(ssid, base64content, is_pdf, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_attachment(ssid, base64content, is_pdf);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_attachment(ssid, base64content, is_pdf);
  }
};

company_managementClient.prototype.send_add_attachment = function(ssid, base64content, is_pdf) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    base64content: base64content,
    is_pdf: is_pdf
  };
  var args = new company_management_add_attachment_args(params);
  try {
    output.writeMessageBegin('add_attachment', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_add_attachment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_add_attachment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_attachment failed: unknown result');
};

company_managementClient.prototype.del_attachment = function(ssid, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_del_attachment(ssid, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_del_attachment(ssid, id);
  }
};

company_managementClient.prototype.send_del_attachment = function(ssid, id) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    id: id
  };
  var args = new company_management_del_attachment_args(params);
  try {
    output.writeMessageBegin('del_attachment', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_del_attachment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_del_attachment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

company_managementClient.prototype.get_all_attachment = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_attachment(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_attachment(ssid);
  }
};

company_managementClient.prototype.send_get_all_attachment = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_all_attachment_args(params);
  try {
    output.writeMessageBegin('get_all_attachment', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_all_attachment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_all_attachment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_attachment failed: unknown result');
};

company_managementClient.prototype.get_attachment = function(company_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_attachment(company_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_attachment(company_name);
  }
};

company_managementClient.prototype.send_get_attachment = function(company_name) {
  var output = new this.pClass(this.output);
  var params = {
    company_name: company_name
  };
  var args = new company_management_get_attachment_args(params);
  try {
    output.writeMessageBegin('get_attachment', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_attachment = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_attachment_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_attachment failed: unknown result');
};

company_managementClient.prototype.get_real_access = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_real_access(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_real_access(ssid);
  }
};

company_managementClient.prototype.send_get_real_access = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_real_access_args(params);
  try {
    output.writeMessageBegin('get_real_access', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_real_access = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_real_access_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_real_access failed: unknown result');
};

company_managementClient.prototype.get_all_access = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_access(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_access(ssid);
  }
};

company_managementClient.prototype.send_get_all_access = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_all_access_args(params);
  try {
    output.writeMessageBegin('get_all_access', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_all_access = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_all_access_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_access failed: unknown result');
};

company_managementClient.prototype.add_contract = function(ssid, contract, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_add_contract(ssid, contract);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_add_contract(ssid, contract);
  }
};

company_managementClient.prototype.send_add_contract = function(ssid, contract) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    contract: contract
  };
  var args = new company_management_add_contract_args(params);
  try {
    output.writeMessageBegin('add_contract', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_add_contract = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_add_contract_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('add_contract failed: unknown result');
};

company_managementClient.prototype.update_contract = function(ssid, contract, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_update_contract(ssid, contract);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_update_contract(ssid, contract);
  }
};

company_managementClient.prototype.send_update_contract = function(ssid, contract) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    contract: contract
  };
  var args = new company_management_update_contract_args(params);
  try {
    output.writeMessageBegin('update_contract', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_update_contract = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_update_contract_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('update_contract failed: unknown result');
};

company_managementClient.prototype.del_contract = function(ssid, id, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_del_contract(ssid, id);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_del_contract(ssid, id);
  }
};

company_managementClient.prototype.send_del_contract = function(ssid, id) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    id: id
  };
  var args = new company_management_del_contract_args(params);
  try {
    output.writeMessageBegin('del_contract', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_del_contract = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_del_contract_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  callback(null);
};

company_managementClient.prototype.get_all_contract = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_all_contract(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_all_contract(ssid);
  }
};

company_managementClient.prototype.send_get_all_contract = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_all_contract_args(params);
  try {
    output.writeMessageBegin('get_all_contract', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_all_contract = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_all_contract_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_all_contract failed: unknown result');
};

company_managementClient.prototype.get_contract = function(a_side_company, b_side_company, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_contract(a_side_company, b_side_company);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_contract(a_side_company, b_side_company);
  }
};

company_managementClient.prototype.send_get_contract = function(a_side_company, b_side_company) {
  var output = new this.pClass(this.output);
  var params = {
    a_side_company: a_side_company,
    b_side_company: b_side_company
  };
  var args = new company_management_get_contract_args(params);
  try {
    output.writeMessageBegin('get_contract', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_contract = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_contract_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_contract failed: unknown result');
};

company_managementClient.prototype.set_work_time = function(ssid, start_work_time, end_work_time, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_work_time(ssid, start_work_time, end_work_time);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_work_time(ssid, start_work_time, end_work_time);
  }
};

company_managementClient.prototype.send_set_work_time = function(ssid, start_work_time, end_work_time) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid,
    start_work_time: start_work_time,
    end_work_time: end_work_time
  };
  var args = new company_management_set_work_time_args(params);
  try {
    output.writeMessageBegin('set_work_time', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_set_work_time = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_set_work_time_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_work_time failed: unknown result');
};

company_managementClient.prototype.get_work_time = function(company_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_work_time(company_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_work_time(company_name);
  }
};

company_managementClient.prototype.send_get_work_time = function(company_name) {
  var output = new this.pClass(this.output);
  var params = {
    company_name: company_name
  };
  var args = new company_management_get_work_time_args(params);
  try {
    output.writeMessageBegin('get_work_time', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_work_time = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_work_time_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_work_time failed: unknown result');
};

company_managementClient.prototype.get_company_position_config = function(company_name, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_company_position_config(company_name);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_company_position_config(company_name);
  }
};

company_managementClient.prototype.send_get_company_position_config = function(company_name) {
  var output = new this.pClass(this.output);
  var params = {
    company_name: company_name
  };
  var args = new company_management_get_company_position_config_args(params);
  try {
    output.writeMessageBegin('get_company_position_config', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_company_position_config = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_company_position_config_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_company_position_config failed: unknown result');
};

company_managementClient.prototype.set_third_info = function(_info, ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_set_third_info(_info, ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_set_third_info(_info, ssid);
  }
};

company_managementClient.prototype.send_set_third_info = function(_info, ssid) {
  var output = new this.pClass(this.output);
  var params = {
    _info: _info,
    ssid: ssid
  };
  var args = new company_management_set_third_info_args(params);
  try {
    output.writeMessageBegin('set_third_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_set_third_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_set_third_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('set_third_info failed: unknown result');
};

company_managementClient.prototype.get_third_info = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_third_info(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_third_info(ssid);
  }
};

company_managementClient.prototype.send_get_third_info = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_third_info_args(params);
  try {
    output.writeMessageBegin('get_third_info', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_third_info = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_third_info_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_third_info failed: unknown result');
};

company_managementClient.prototype.get_related_company = function(ssid, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_get_related_company(ssid);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_get_related_company(ssid);
  }
};

company_managementClient.prototype.send_get_related_company = function(ssid) {
  var output = new this.pClass(this.output);
  var params = {
    ssid: ssid
  };
  var args = new company_management_get_related_company_args(params);
  try {
    output.writeMessageBegin('get_related_company', Thrift.MessageType.CALL, this.seqid());
    args.write(output);
    output.writeMessageEnd();
    return this.output.flush();
  }
  catch (e) {
    delete this._reqs[this.seqid()];
    if (typeof output.reset === 'function') {
      output.reset();
    }
    throw e;
  }
};

company_managementClient.prototype.recv_get_related_company = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new company_management_get_related_company_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.e) {
    return callback(result.e);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('get_related_company failed: unknown result');
};
var company_managementProcessor = exports.Processor = function(handler) {
  this._handler = handler;
};
company_managementProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
};
company_managementProcessor.prototype.process_get_all_type = function(seqid, input, output) {
  var args = new company_management_get_all_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_type.length === 1) {
    Q.fcall(this._handler.get_all_type.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_all_type_result({success: result});
      output.writeMessageBegin("get_all_type", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_all_type_result(err);
        output.writeMessageBegin("get_all_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_type(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_all_type_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_add_type = function(seqid, input, output) {
  var args = new company_management_add_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_type.length === 4) {
    Q.fcall(this._handler.add_type.bind(this._handler),
      args.name,
      args.price,
      args.last,
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_add_type_result({success: result});
      output.writeMessageBegin("add_type", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_add_type_result(err);
        output.writeMessageBegin("add_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.add_type(args.name, args.price, args.last, args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_add_type_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_edit_type = function(seqid, input, output) {
  var args = new company_management_edit_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.edit_type.length === 2) {
    Q.fcall(this._handler.edit_type.bind(this._handler),
      args.stuff,
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_edit_type_result({success: result});
      output.writeMessageBegin("edit_type", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_edit_type_result(err);
        output.writeMessageBegin("edit_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("edit_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.edit_type(args.stuff, args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_edit_type_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("edit_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("edit_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_remove_type = function(seqid, input, output) {
  var args = new company_management_remove_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove_type.length === 2) {
    Q.fcall(this._handler.remove_type.bind(this._handler),
      args.stuff,
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_remove_type_result({success: result});
      output.writeMessageBegin("remove_type", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_remove_type_result(err);
        output.writeMessageBegin("remove_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.remove_type(args.stuff, args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_remove_type_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("remove_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_readd_type = function(seqid, input, output) {
  var args = new company_management_readd_type_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.readd_type.length === 2) {
    Q.fcall(this._handler.readd_type.bind(this._handler),
      args.stuff,
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_readd_type_result({success: result});
      output.writeMessageBegin("readd_type", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_readd_type_result(err);
        output.writeMessageBegin("readd_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readd_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.readd_type(args.stuff, args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_readd_type_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("readd_type", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("readd_type", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_all_apply = function(seqid, input, output) {
  var args = new company_management_get_all_apply_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_apply.length === 1) {
    Q.fcall(this._handler.get_all_apply.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_all_apply_result({success: result});
      output.writeMessageBegin("get_all_apply", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_all_apply_result(err);
        output.writeMessageBegin("get_all_apply", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_apply", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_apply(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_all_apply_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_apply", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_apply", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_approve_apply = function(seqid, input, output) {
  var args = new company_management_approve_apply_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.approve_apply.length === 3) {
    Q.fcall(this._handler.approve_apply.bind(this._handler),
      args.apply_id,
      args.ssid,
      args.approve
    ).then(function(result) {
      var result_obj = new company_management_approve_apply_result({success: result});
      output.writeMessageBegin("approve_apply", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_approve_apply_result(err);
        output.writeMessageBegin("approve_apply", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("approve_apply", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.approve_apply(args.apply_id, args.ssid, args.approve, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_approve_apply_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("approve_apply", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("approve_apply", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_generate_statistics = function(seqid, input, output) {
  var args = new company_management_generate_statistics_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.generate_statistics.length === 3) {
    Q.fcall(this._handler.generate_statistics.bind(this._handler),
      args.ssid,
      args.begin_date,
      args.end_date
    ).then(function(result) {
      var result_obj = new company_management_generate_statistics_result({success: result});
      output.writeMessageBegin("generate_statistics", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_generate_statistics_result(err);
        output.writeMessageBegin("generate_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generate_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.generate_statistics(args.ssid, args.begin_date, args.end_date, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_generate_statistics_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("generate_statistics", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("generate_statistics", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_set_notice = function(seqid, input, output) {
  var args = new company_management_set_notice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_notice.length === 2) {
    Q.fcall(this._handler.set_notice.bind(this._handler),
      args.ssid,
      args.notice
    ).then(function(result) {
      var result_obj = new company_management_set_notice_result({success: result});
      output.writeMessageBegin("set_notice", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_set_notice_result(err);
        output.writeMessageBegin("set_notice", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_notice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_notice(args.ssid, args.notice, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_set_notice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_notice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_notice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_notice = function(seqid, input, output) {
  var args = new company_management_get_notice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_notice.length === 1) {
    Q.fcall(this._handler.get_notice.bind(this._handler),
      args.company_name
    ).then(function(result) {
      var result_obj = new company_management_get_notice_result({success: result});
      output.writeMessageBegin("get_notice", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_notice_result(err);
        output.writeMessageBegin("get_notice", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_notice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_notice(args.company_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_notice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_notice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_notice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_clear_notice = function(seqid, input, output) {
  var args = new company_management_clear_notice_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.clear_notice.length === 1) {
    Q.fcall(this._handler.clear_notice.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_clear_notice_result({success: result});
      output.writeMessageBegin("clear_notice", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_clear_notice_result(err);
        output.writeMessageBegin("clear_notice", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clear_notice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.clear_notice(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_clear_notice_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("clear_notice", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("clear_notice", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_all_compay_user = function(seqid, input, output) {
  var args = new company_management_get_all_compay_user_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_compay_user.length === 1) {
    Q.fcall(this._handler.get_all_compay_user.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_all_compay_user_result({success: result});
      output.writeMessageBegin("get_all_compay_user", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_all_compay_user_result(err);
        output.writeMessageBegin("get_all_compay_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_compay_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_compay_user(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_all_compay_user_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_compay_user", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_compay_user", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_remove_user_from_company = function(seqid, input, output) {
  var args = new company_management_remove_user_from_company_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.remove_user_from_company.length === 2) {
    Q.fcall(this._handler.remove_user_from_company.bind(this._handler),
      args.ssid,
      args.user_id
    ).then(function(result) {
      var result_obj = new company_management_remove_user_from_company_result({success: result});
      output.writeMessageBegin("remove_user_from_company", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_remove_user_from_company_result(err);
        output.writeMessageBegin("remove_user_from_company", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_user_from_company", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.remove_user_from_company(args.ssid, args.user_id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_remove_user_from_company_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("remove_user_from_company", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("remove_user_from_company", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_company_logo = function(seqid, input, output) {
  var args = new company_management_get_company_logo_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_company_logo.length === 1) {
    Q.fcall(this._handler.get_company_logo.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_company_logo_result({success: result});
      output.writeMessageBegin("get_company_logo", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_company_logo_result(err);
        output.writeMessageBegin("get_company_logo", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_logo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_company_logo(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_company_logo_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_company_logo", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_logo", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_set_address = function(seqid, input, output) {
  var args = new company_management_set_address_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_address.length === 2) {
    Q.fcall(this._handler.set_address.bind(this._handler),
      args.ssid,
      args.address
    ).then(function(result) {
      var result_obj = new company_management_set_address_result({success: result});
      output.writeMessageBegin("set_address", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_set_address_result(err);
        output.writeMessageBegin("set_address", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_address", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_address(args.ssid, args.address, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_set_address_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_address", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_address", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_address = function(seqid, input, output) {
  var args = new company_management_get_address_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_address.length === 1) {
    Q.fcall(this._handler.get_address.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_address_result({success: result});
      output.writeMessageBegin("get_address", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_address_result(err);
        output.writeMessageBegin("get_address", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_address", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_address(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_address_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_address", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_address", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_set_contact = function(seqid, input, output) {
  var args = new company_management_set_contact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_contact.length === 2) {
    Q.fcall(this._handler.set_contact.bind(this._handler),
      args.ssid,
      args.contact
    ).then(function(result) {
      var result_obj = new company_management_set_contact_result({success: result});
      output.writeMessageBegin("set_contact", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_set_contact_result(err);
        output.writeMessageBegin("set_contact", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_contact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_contact(args.ssid, args.contact, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_set_contact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_contact", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_contact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_contact = function(seqid, input, output) {
  var args = new company_management_get_contact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_contact.length === 1) {
    Q.fcall(this._handler.get_contact.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_contact_result({success: result});
      output.writeMessageBegin("get_contact", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_contact_result(err);
        output.writeMessageBegin("get_contact", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_contact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_contact(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_contact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_contact", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_contact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_address_contact = function(seqid, input, output) {
  var args = new company_management_get_address_contact_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_address_contact.length === 1) {
    Q.fcall(this._handler.get_address_contact.bind(this._handler),
      args.company_name
    ).then(function(result) {
      var result_obj = new company_management_get_address_contact_result({success: result});
      output.writeMessageBegin("get_address_contact", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_address_contact_result(err);
        output.writeMessageBegin("get_address_contact", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_address_contact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_address_contact(args.company_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_address_contact_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_address_contact", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_address_contact", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_add_attachment = function(seqid, input, output) {
  var args = new company_management_add_attachment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_attachment.length === 3) {
    Q.fcall(this._handler.add_attachment.bind(this._handler),
      args.ssid,
      args.base64content,
      args.is_pdf
    ).then(function(result) {
      var result_obj = new company_management_add_attachment_result({success: result});
      output.writeMessageBegin("add_attachment", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_add_attachment_result(err);
        output.writeMessageBegin("add_attachment", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_attachment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.add_attachment(args.ssid, args.base64content, args.is_pdf, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_add_attachment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_attachment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_attachment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_del_attachment = function(seqid, input, output) {
  var args = new company_management_del_attachment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.del_attachment.length === 2) {
    Q.fcall(this._handler.del_attachment.bind(this._handler),
      args.ssid,
      args.id
    ).then(function(result) {
      var result_obj = new company_management_del_attachment_result({success: result});
      output.writeMessageBegin("del_attachment", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_del_attachment_result(err);
        output.writeMessageBegin("del_attachment", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_attachment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.del_attachment(args.ssid, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_del_attachment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("del_attachment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_attachment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_all_attachment = function(seqid, input, output) {
  var args = new company_management_get_all_attachment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_attachment.length === 1) {
    Q.fcall(this._handler.get_all_attachment.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_all_attachment_result({success: result});
      output.writeMessageBegin("get_all_attachment", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_all_attachment_result(err);
        output.writeMessageBegin("get_all_attachment", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_attachment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_attachment(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_all_attachment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_attachment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_attachment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_attachment = function(seqid, input, output) {
  var args = new company_management_get_attachment_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_attachment.length === 1) {
    Q.fcall(this._handler.get_attachment.bind(this._handler),
      args.company_name
    ).then(function(result) {
      var result_obj = new company_management_get_attachment_result({success: result});
      output.writeMessageBegin("get_attachment", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_attachment_result(err);
        output.writeMessageBegin("get_attachment", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_attachment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_attachment(args.company_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_attachment_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_attachment", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_attachment", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_real_access = function(seqid, input, output) {
  var args = new company_management_get_real_access_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_real_access.length === 1) {
    Q.fcall(this._handler.get_real_access.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_real_access_result({success: result});
      output.writeMessageBegin("get_real_access", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_real_access_result(err);
        output.writeMessageBegin("get_real_access", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_real_access", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_real_access(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_real_access_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_real_access", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_real_access", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_all_access = function(seqid, input, output) {
  var args = new company_management_get_all_access_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_access.length === 1) {
    Q.fcall(this._handler.get_all_access.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_all_access_result({success: result});
      output.writeMessageBegin("get_all_access", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_all_access_result(err);
        output.writeMessageBegin("get_all_access", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_access", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_access(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_all_access_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_access", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_access", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_add_contract = function(seqid, input, output) {
  var args = new company_management_add_contract_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.add_contract.length === 2) {
    Q.fcall(this._handler.add_contract.bind(this._handler),
      args.ssid,
      args.contract
    ).then(function(result) {
      var result_obj = new company_management_add_contract_result({success: result});
      output.writeMessageBegin("add_contract", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_add_contract_result(err);
        output.writeMessageBegin("add_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.add_contract(args.ssid, args.contract, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_add_contract_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("add_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("add_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_update_contract = function(seqid, input, output) {
  var args = new company_management_update_contract_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.update_contract.length === 2) {
    Q.fcall(this._handler.update_contract.bind(this._handler),
      args.ssid,
      args.contract
    ).then(function(result) {
      var result_obj = new company_management_update_contract_result({success: result});
      output.writeMessageBegin("update_contract", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_update_contract_result(err);
        output.writeMessageBegin("update_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.update_contract(args.ssid, args.contract, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_update_contract_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("update_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("update_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_del_contract = function(seqid, input, output) {
  var args = new company_management_del_contract_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.del_contract.length === 2) {
    Q.fcall(this._handler.del_contract.bind(this._handler),
      args.ssid,
      args.id
    ).then(function(result) {
      var result_obj = new company_management_del_contract_result({success: result});
      output.writeMessageBegin("del_contract", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_del_contract_result(err);
        output.writeMessageBegin("del_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.del_contract(args.ssid, args.id, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_del_contract_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("del_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("del_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_all_contract = function(seqid, input, output) {
  var args = new company_management_get_all_contract_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_all_contract.length === 1) {
    Q.fcall(this._handler.get_all_contract.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_all_contract_result({success: result});
      output.writeMessageBegin("get_all_contract", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_all_contract_result(err);
        output.writeMessageBegin("get_all_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_all_contract(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_all_contract_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_all_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_all_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_contract = function(seqid, input, output) {
  var args = new company_management_get_contract_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_contract.length === 2) {
    Q.fcall(this._handler.get_contract.bind(this._handler),
      args.a_side_company,
      args.b_side_company
    ).then(function(result) {
      var result_obj = new company_management_get_contract_result({success: result});
      output.writeMessageBegin("get_contract", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_contract_result(err);
        output.writeMessageBegin("get_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_contract(args.a_side_company, args.b_side_company, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_contract_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_contract", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_contract", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_set_work_time = function(seqid, input, output) {
  var args = new company_management_set_work_time_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_work_time.length === 3) {
    Q.fcall(this._handler.set_work_time.bind(this._handler),
      args.ssid,
      args.start_work_time,
      args.end_work_time
    ).then(function(result) {
      var result_obj = new company_management_set_work_time_result({success: result});
      output.writeMessageBegin("set_work_time", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_set_work_time_result(err);
        output.writeMessageBegin("set_work_time", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_work_time", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_work_time(args.ssid, args.start_work_time, args.end_work_time, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_set_work_time_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_work_time", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_work_time", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_work_time = function(seqid, input, output) {
  var args = new company_management_get_work_time_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_work_time.length === 1) {
    Q.fcall(this._handler.get_work_time.bind(this._handler),
      args.company_name
    ).then(function(result) {
      var result_obj = new company_management_get_work_time_result({success: result});
      output.writeMessageBegin("get_work_time", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_work_time_result(err);
        output.writeMessageBegin("get_work_time", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_work_time", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_work_time(args.company_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_work_time_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_work_time", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_work_time", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_company_position_config = function(seqid, input, output) {
  var args = new company_management_get_company_position_config_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_company_position_config.length === 1) {
    Q.fcall(this._handler.get_company_position_config.bind(this._handler),
      args.company_name
    ).then(function(result) {
      var result_obj = new company_management_get_company_position_config_result({success: result});
      output.writeMessageBegin("get_company_position_config", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_company_position_config_result(err);
        output.writeMessageBegin("get_company_position_config", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_position_config", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_company_position_config(args.company_name, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_company_position_config_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_company_position_config", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_company_position_config", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_set_third_info = function(seqid, input, output) {
  var args = new company_management_set_third_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.set_third_info.length === 2) {
    Q.fcall(this._handler.set_third_info.bind(this._handler),
      args._info,
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_set_third_info_result({success: result});
      output.writeMessageBegin("set_third_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_set_third_info_result(err);
        output.writeMessageBegin("set_third_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_third_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.set_third_info(args._info, args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_set_third_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("set_third_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("set_third_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_third_info = function(seqid, input, output) {
  var args = new company_management_get_third_info_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_third_info.length === 1) {
    Q.fcall(this._handler.get_third_info.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_third_info_result({success: result});
      output.writeMessageBegin("get_third_info", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_third_info_result(err);
        output.writeMessageBegin("get_third_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_third_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_third_info(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_third_info_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_third_info", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_third_info", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
company_managementProcessor.prototype.process_get_related_company = function(seqid, input, output) {
  var args = new company_management_get_related_company_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.get_related_company.length === 1) {
    Q.fcall(this._handler.get_related_company.bind(this._handler),
      args.ssid
    ).then(function(result) {
      var result_obj = new company_management_get_related_company_result({success: result});
      output.writeMessageBegin("get_related_company", Thrift.MessageType.REPLY, seqid);
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    }).catch(function (err) {
      var result;
      if (err instanceof ttypes.gen_exp) {
        result = new company_management_get_related_company_result(err);
        output.writeMessageBegin("get_related_company", Thrift.MessageType.REPLY, seqid);
      } else {
        result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_related_company", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  } else {
    this._handler.get_related_company(args.ssid, function (err, result) {
      var result_obj;
      if ((err === null || typeof err === 'undefined') || err instanceof ttypes.gen_exp) {
        result_obj = new company_management_get_related_company_result((err !== null || typeof err === 'undefined') ? err : {success: result});
        output.writeMessageBegin("get_related_company", Thrift.MessageType.REPLY, seqid);
      } else {
        result_obj = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("get_related_company", Thrift.MessageType.EXCEPTION, seqid);
      }
      result_obj.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
};
