//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


gen_exp = class {
  constructor(args) {
    this.msg = null;
    if (args) {
      if (args.msg !== undefined && args.msg !== null) {
        this.msg = args.msg;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.msg = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('gen_exp');
    if (this.msg !== null && this.msg !== undefined) {
      output.writeFieldBegin('msg', Thrift.Type.STRING, 1);
      output.writeString(this.msg);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
user_info = class {
  constructor(args) {
    this.user_id = null;
    this.name = null;
    this.logo = null;
    this.company = null;
    this.buyer = null;
    this.phone = null;
    if (args) {
      if (args.user_id !== undefined && args.user_id !== null) {
        this.user_id = args.user_id;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.logo !== undefined && args.logo !== null) {
        this.logo = args.logo;
      }
      if (args.company !== undefined && args.company !== null) {
        this.company = args.company;
      }
      if (args.buyer !== undefined && args.buyer !== null) {
        this.buyer = args.buyer;
      }
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.user_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.logo = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.BOOL) {
          this.buyer = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('user_info');
    if (this.user_id !== null && this.user_id !== undefined) {
      output.writeFieldBegin('user_id', Thrift.Type.I64, 1);
      output.writeI64(this.user_id);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.logo !== null && this.logo !== undefined) {
      output.writeFieldBegin('logo', Thrift.Type.STRING, 3);
      output.writeString(this.logo);
      output.writeFieldEnd();
    }
    if (this.company !== null && this.company !== undefined) {
      output.writeFieldBegin('company', Thrift.Type.STRING, 4);
      output.writeString(this.company);
      output.writeFieldEnd();
    }
    if (this.buyer !== null && this.buyer !== undefined) {
      output.writeFieldBegin('buyer', Thrift.Type.BOOL, 5);
      output.writeBool(this.buyer);
      output.writeFieldEnd();
    }
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 6);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
driver_info = class {
  constructor(args) {
    this.name = null;
    this.phone = null;
    this.id = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('driver_info');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 2);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 3);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
vichele_info_t = class {
  constructor(args) {
    this.number = null;
    this.id = null;
    if (args) {
      if (args.number !== undefined && args.number !== null) {
        this.number = args.number;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('vichele_info_t');
    if (this.number !== null && this.number !== undefined) {
      output.writeFieldBegin('number', Thrift.Type.STRING, 1);
      output.writeString(this.number);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 2);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_detail = class {
  constructor(args) {
    this.name = null;
    this.last = null;
    this.price = null;
    this.company = null;
    this.type_id = null;
    this.saling = null;
    this.company_address = null;
    this.company_contact = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.last !== undefined && args.last !== null) {
        this.last = args.last;
      }
      if (args.price !== undefined && args.price !== null) {
        this.price = args.price;
      }
      if (args.company !== undefined && args.company !== null) {
        this.company = args.company;
      }
      if (args.type_id !== undefined && args.type_id !== null) {
        this.type_id = args.type_id;
      }
      if (args.saling !== undefined && args.saling !== null) {
        this.saling = args.saling;
      }
      if (args.company_address !== undefined && args.company_address !== null) {
        this.company_address = args.company_address;
      }
      if (args.company_contact !== undefined && args.company_contact !== null) {
        this.company_contact = args.company_contact;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.last = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.price = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.type_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.saling = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.company_address = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.company_contact = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_detail');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.last !== null && this.last !== undefined) {
      output.writeFieldBegin('last', Thrift.Type.STRING, 2);
      output.writeString(this.last);
      output.writeFieldEnd();
    }
    if (this.price !== null && this.price !== undefined) {
      output.writeFieldBegin('price', Thrift.Type.I64, 3);
      output.writeI64(this.price);
      output.writeFieldEnd();
    }
    if (this.company !== null && this.company !== undefined) {
      output.writeFieldBegin('company', Thrift.Type.STRING, 4);
      output.writeString(this.company);
      output.writeFieldEnd();
    }
    if (this.type_id !== null && this.type_id !== undefined) {
      output.writeFieldBegin('type_id', Thrift.Type.I64, 5);
      output.writeI64(this.type_id);
      output.writeFieldEnd();
    }
    if (this.saling !== null && this.saling !== undefined) {
      output.writeFieldBegin('saling', Thrift.Type.BOOL, 6);
      output.writeBool(this.saling);
      output.writeFieldEnd();
    }
    if (this.company_address !== null && this.company_address !== undefined) {
      output.writeFieldBegin('company_address', Thrift.Type.STRING, 7);
      output.writeString(this.company_address);
      output.writeFieldEnd();
    }
    if (this.company_contact !== null && this.company_contact !== undefined) {
      output.writeFieldBegin('company_contact', Thrift.Type.STRING, 8);
      output.writeString(this.company_contact);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
user_apply = class {
  constructor(args) {
    this.name = null;
    this.phone = null;
    this.logo = null;
    this.apply_id = null;
    this.status = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
      if (args.logo !== undefined && args.logo !== null) {
        this.logo = args.logo;
      }
      if (args.apply_id !== undefined && args.apply_id !== null) {
        this.apply_id = args.apply_id;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.logo = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.apply_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.status = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('user_apply');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 2);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    if (this.logo !== null && this.logo !== undefined) {
      output.writeFieldBegin('logo', Thrift.Type.STRING, 3);
      output.writeString(this.logo);
      output.writeFieldEnd();
    }
    if (this.apply_id !== null && this.apply_id !== undefined) {
      output.writeFieldBegin('apply_id', Thrift.Type.I64, 4);
      output.writeI64(this.apply_id);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I64, 5);
      output.writeI64(this.status);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
company_address_contact_info = class {
  constructor(args) {
    this.address = null;
    this.contact = null;
    if (args) {
      if (args.address !== undefined && args.address !== null) {
        this.address = args.address;
      }
      if (args.contact !== undefined && args.contact !== null) {
        this.contact = args.contact;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.address = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.contact = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('company_address_contact_info');
    if (this.address !== null && this.address !== undefined) {
      output.writeFieldBegin('address', Thrift.Type.STRING, 1);
      output.writeString(this.address);
      output.writeFieldEnd();
    }
    if (this.contact !== null && this.contact !== undefined) {
      output.writeFieldBegin('contact', Thrift.Type.STRING, 2);
      output.writeString(this.contact);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
company_attachment = class {
  constructor(args) {
    this.id = null;
    this.path = null;
    this.pic_path = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.path !== undefined && args.path !== null) {
        this.path = args.path;
      }
      if (args.pic_path !== undefined && args.pic_path !== null) {
        this.pic_path = args.pic_path;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.path = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.pic_path = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('company_attachment');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 1);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    if (this.path !== null && this.path !== undefined) {
      output.writeFieldBegin('path', Thrift.Type.STRING, 2);
      output.writeString(this.path);
      output.writeFieldEnd();
    }
    if (this.pic_path !== null && this.pic_path !== undefined) {
      output.writeFieldBegin('pic_path', Thrift.Type.STRING, 3);
      output.writeString(this.pic_path);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
plan_status_rule = class {
  constructor(args) {
    this.name = null;
    this.author = null;
    this.timestamp = null;
    this.comment = null;
    this.index = null;
    this.prompt = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.author !== undefined && args.author !== null) {
        this.author = args.author;
      }
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
      if (args.index !== undefined && args.index !== null) {
        this.index = args.index;
      }
      if (args.prompt !== undefined && args.prompt !== null) {
        this.prompt = args.prompt;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.author = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.I64) {
          this.index = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.prompt = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('plan_status_rule');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.author !== null && this.author !== undefined) {
      output.writeFieldBegin('author', Thrift.Type.STRING, 2);
      output.writeString(this.author);
      output.writeFieldEnd();
    }
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 3);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 4);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    if (this.index !== null && this.index !== undefined) {
      output.writeFieldBegin('index', Thrift.Type.I64, 5);
      output.writeI64(this.index);
      output.writeFieldEnd();
    }
    if (this.prompt !== null && this.prompt !== undefined) {
      output.writeFieldBegin('prompt', Thrift.Type.STRING, 6);
      output.writeString(this.prompt);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
common_contract = class {
  constructor(args) {
    this.a_side_company = null;
    this.b_side_company = null;
    this.start_time = null;
    this.end_time = null;
    this.number = null;
    this.id = null;
    this.status = null;
    this.customer_code = null;
    if (args) {
      if (args.a_side_company !== undefined && args.a_side_company !== null) {
        this.a_side_company = args.a_side_company;
      }
      if (args.b_side_company !== undefined && args.b_side_company !== null) {
        this.b_side_company = args.b_side_company;
      }
      if (args.start_time !== undefined && args.start_time !== null) {
        this.start_time = args.start_time;
      }
      if (args.end_time !== undefined && args.end_time !== null) {
        this.end_time = args.end_time;
      }
      if (args.number !== undefined && args.number !== null) {
        this.number = args.number;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.customer_code !== undefined && args.customer_code !== null) {
        this.customer_code = args.customer_code;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.a_side_company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.b_side_company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.start_time = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.end_time = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.status = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.customer_code = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('common_contract');
    if (this.a_side_company !== null && this.a_side_company !== undefined) {
      output.writeFieldBegin('a_side_company', Thrift.Type.STRING, 1);
      output.writeString(this.a_side_company);
      output.writeFieldEnd();
    }
    if (this.b_side_company !== null && this.b_side_company !== undefined) {
      output.writeFieldBegin('b_side_company', Thrift.Type.STRING, 2);
      output.writeString(this.b_side_company);
      output.writeFieldEnd();
    }
    if (this.start_time !== null && this.start_time !== undefined) {
      output.writeFieldBegin('start_time', Thrift.Type.STRING, 3);
      output.writeString(this.start_time);
      output.writeFieldEnd();
    }
    if (this.end_time !== null && this.end_time !== undefined) {
      output.writeFieldBegin('end_time', Thrift.Type.STRING, 4);
      output.writeString(this.end_time);
      output.writeFieldEnd();
    }
    if (this.number !== null && this.number !== undefined) {
      output.writeFieldBegin('number', Thrift.Type.STRING, 5);
      output.writeString(this.number);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 6);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I64, 7);
      output.writeI64(this.status);
      output.writeFieldEnd();
    }
    if (this.customer_code !== null && this.customer_code !== undefined) {
      output.writeFieldBegin('customer_code', Thrift.Type.STRING, 8);
      output.writeString(this.customer_code);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
real_access_record = class {
  constructor(args) {
    this.name = null;
    this.logo = null;
    this.phone = null;
    this.company_name = null;
    this.attachment = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.logo !== undefined && args.logo !== null) {
        this.logo = args.logo;
      }
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
      if (args.company_name !== undefined && args.company_name !== null) {
        this.company_name = args.company_name;
      }
      if (args.attachment !== undefined && args.attachment !== null) {
        this.attachment = args.attachment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.logo = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.company_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.attachment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('real_access_record');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.logo !== null && this.logo !== undefined) {
      output.writeFieldBegin('logo', Thrift.Type.STRING, 2);
      output.writeString(this.logo);
      output.writeFieldEnd();
    }
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 3);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    if (this.company_name !== null && this.company_name !== undefined) {
      output.writeFieldBegin('company_name', Thrift.Type.STRING, 4);
      output.writeString(this.company_name);
      output.writeFieldEnd();
    }
    if (this.attachment !== null && this.attachment !== undefined) {
      output.writeFieldBegin('attachment', Thrift.Type.STRING, 5);
      output.writeString(this.attachment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
company_work_time = class {
  constructor(args) {
    this.start_time = null;
    this.end_time = null;
    if (args) {
      if (args.start_time !== undefined && args.start_time !== null) {
        this.start_time = args.start_time;
      }
      if (args.end_time !== undefined && args.end_time !== null) {
        this.end_time = args.end_time;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.start_time = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.end_time = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('company_work_time');
    if (this.start_time !== null && this.start_time !== undefined) {
      output.writeFieldBegin('start_time', Thrift.Type.I64, 1);
      output.writeI64(this.start_time);
      output.writeFieldEnd();
    }
    if (this.end_time !== null && this.end_time !== undefined) {
      output.writeFieldBegin('end_time', Thrift.Type.I64, 2);
      output.writeI64(this.end_time);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
company_positon_lat_lag = class {
  constructor(args) {
    this.lat = null;
    this.lag = null;
    this.distance = null;
    if (args) {
      if (args.lat !== undefined && args.lat !== null) {
        this.lat = args.lat;
      }
      if (args.lag !== undefined && args.lag !== null) {
        this.lag = args.lag;
      }
      if (args.distance !== undefined && args.distance !== null) {
        this.distance = args.distance;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.DOUBLE) {
          this.lat = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.lag = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.DOUBLE) {
          this.distance = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('company_positon_lat_lag');
    if (this.lat !== null && this.lat !== undefined) {
      output.writeFieldBegin('lat', Thrift.Type.DOUBLE, 1);
      output.writeDouble(this.lat);
      output.writeFieldEnd();
    }
    if (this.lag !== null && this.lag !== undefined) {
      output.writeFieldBegin('lag', Thrift.Type.DOUBLE, 2);
      output.writeDouble(this.lag);
      output.writeFieldEnd();
    }
    if (this.distance !== null && this.distance !== undefined) {
      output.writeFieldBegin('distance', Thrift.Type.DOUBLE, 3);
      output.writeDouble(this.distance);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
plan_confirm_info = class {
  constructor(args) {
    this.timestamp = null;
    this.name = null;
    if (args) {
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('plan_confirm_info');
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
pay_confirm_info = class {
  constructor(args) {
    this.timestamp = null;
    this.name = null;
    if (args) {
      if (args.timestamp !== undefined && args.timestamp !== null) {
        this.timestamp = args.timestamp;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.timestamp = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('pay_confirm_info');
    if (this.timestamp !== null && this.timestamp !== undefined) {
      output.writeFieldBegin('timestamp', Thrift.Type.STRING, 1);
      output.writeString(this.timestamp);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 2);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
vichele_in_plan = class {
  constructor(args) {
    this.main_vichele = null;
    this.behind_vichele = null;
    this.driver_name = null;
    this.driver_phone = null;
    this.count = null;
    this.drop_address = null;
    this.use_for = null;
    this.vichele_id = null;
    this.finish = null;
    this.deliver_timestamp = null;
    this.register_timestamp = null;
    this.register_number = null;
    this.enter_location = null;
    if (args) {
      if (args.main_vichele !== undefined && args.main_vichele !== null) {
        this.main_vichele = args.main_vichele;
      }
      if (args.behind_vichele !== undefined && args.behind_vichele !== null) {
        this.behind_vichele = args.behind_vichele;
      }
      if (args.driver_name !== undefined && args.driver_name !== null) {
        this.driver_name = args.driver_name;
      }
      if (args.driver_phone !== undefined && args.driver_phone !== null) {
        this.driver_phone = args.driver_phone;
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.drop_address !== undefined && args.drop_address !== null) {
        this.drop_address = args.drop_address;
      }
      if (args.use_for !== undefined && args.use_for !== null) {
        this.use_for = args.use_for;
      }
      if (args.vichele_id !== undefined && args.vichele_id !== null) {
        this.vichele_id = args.vichele_id;
      }
      if (args.finish !== undefined && args.finish !== null) {
        this.finish = args.finish;
      }
      if (args.deliver_timestamp !== undefined && args.deliver_timestamp !== null) {
        this.deliver_timestamp = args.deliver_timestamp;
      }
      if (args.register_timestamp !== undefined && args.register_timestamp !== null) {
        this.register_timestamp = args.register_timestamp;
      }
      if (args.register_number !== undefined && args.register_number !== null) {
        this.register_number = args.register_number;
      }
      if (args.enter_location !== undefined && args.enter_location !== null) {
        this.enter_location = args.enter_location;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.main_vichele = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.behind_vichele = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.driver_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.driver_phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.DOUBLE) {
          this.count = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.drop_address = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.use_for = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.I64) {
          this.vichele_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.BOOL) {
          this.finish = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.deliver_timestamp = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.register_timestamp = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.register_number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.enter_location = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('vichele_in_plan');
    if (this.main_vichele !== null && this.main_vichele !== undefined) {
      output.writeFieldBegin('main_vichele', Thrift.Type.STRING, 1);
      output.writeString(this.main_vichele);
      output.writeFieldEnd();
    }
    if (this.behind_vichele !== null && this.behind_vichele !== undefined) {
      output.writeFieldBegin('behind_vichele', Thrift.Type.STRING, 2);
      output.writeString(this.behind_vichele);
      output.writeFieldEnd();
    }
    if (this.driver_name !== null && this.driver_name !== undefined) {
      output.writeFieldBegin('driver_name', Thrift.Type.STRING, 3);
      output.writeString(this.driver_name);
      output.writeFieldEnd();
    }
    if (this.driver_phone !== null && this.driver_phone !== undefined) {
      output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 4);
      output.writeString(this.driver_phone);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.DOUBLE, 5);
      output.writeDouble(this.count);
      output.writeFieldEnd();
    }
    if (this.drop_address !== null && this.drop_address !== undefined) {
      output.writeFieldBegin('drop_address', Thrift.Type.STRING, 6);
      output.writeString(this.drop_address);
      output.writeFieldEnd();
    }
    if (this.use_for !== null && this.use_for !== undefined) {
      output.writeFieldBegin('use_for', Thrift.Type.STRING, 7);
      output.writeString(this.use_for);
      output.writeFieldEnd();
    }
    if (this.vichele_id !== null && this.vichele_id !== undefined) {
      output.writeFieldBegin('vichele_id', Thrift.Type.I64, 8);
      output.writeI64(this.vichele_id);
      output.writeFieldEnd();
    }
    if (this.finish !== null && this.finish !== undefined) {
      output.writeFieldBegin('finish', Thrift.Type.BOOL, 9);
      output.writeBool(this.finish);
      output.writeFieldEnd();
    }
    if (this.deliver_timestamp !== null && this.deliver_timestamp !== undefined) {
      output.writeFieldBegin('deliver_timestamp', Thrift.Type.STRING, 10);
      output.writeString(this.deliver_timestamp);
      output.writeFieldEnd();
    }
    if (this.register_timestamp !== null && this.register_timestamp !== undefined) {
      output.writeFieldBegin('register_timestamp', Thrift.Type.STRING, 11);
      output.writeString(this.register_timestamp);
      output.writeFieldEnd();
    }
    if (this.register_number !== null && this.register_number !== undefined) {
      output.writeFieldBegin('register_number', Thrift.Type.STRING, 12);
      output.writeString(this.register_number);
      output.writeFieldEnd();
    }
    if (this.enter_location !== null && this.enter_location !== undefined) {
      output.writeFieldBegin('enter_location', Thrift.Type.STRING, 13);
      output.writeString(this.enter_location);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan = class {
  constructor(args) {
    this.type_id = null;
    this.count = null;
    this.vichele_info = null;
    this.plan_id = null;
    this.plan_time = null;
    this.created_time = null;
    this.name = null;
    this.price = null;
    this.status = null;
    this.proxy_company = null;
    this.created_user_name = null;
    this.buy_company = null;
    this.sale_company = null;
    this.comment = null;
    this.is_cancel = null;
    if (args) {
      if (args.type_id !== undefined && args.type_id !== null) {
        this.type_id = args.type_id;
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.vichele_info !== undefined && args.vichele_info !== null) {
        this.vichele_info = Thrift.copyList(args.vichele_info, [vichele_in_plan]);
      }
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.plan_time !== undefined && args.plan_time !== null) {
        this.plan_time = args.plan_time;
      }
      if (args.created_time !== undefined && args.created_time !== null) {
        this.created_time = args.created_time;
      }
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.price !== undefined && args.price !== null) {
        this.price = args.price;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.proxy_company !== undefined && args.proxy_company !== null) {
        this.proxy_company = args.proxy_company;
      }
      if (args.created_user_name !== undefined && args.created_user_name !== null) {
        this.created_user_name = args.created_user_name;
      }
      if (args.buy_company !== undefined && args.buy_company !== null) {
        this.buy_company = args.buy_company;
      }
      if (args.sale_company !== undefined && args.sale_company !== null) {
        this.sale_company = args.sale_company;
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
      if (args.is_cancel !== undefined && args.is_cancel !== null) {
        this.is_cancel = args.is_cancel;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.type_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.count = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.vichele_info = [];
          const _rtmp31 = input.readListBegin();
          const _size0 = _rtmp31.size || 0;
          for (let _i2 = 0; _i2 < _size0; ++_i2) {
            let elem3 = null;
            elem3 = new vichele_in_plan();
            elem3.read(input);
            this.vichele_info.push(elem3);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.plan_time = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.I64) {
          this.created_time = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.DOUBLE) {
          this.price = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.I64) {
          this.status = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.proxy_company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.created_user_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.buy_company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.STRING) {
          this.sale_company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 14:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 15:
        if (ftype == Thrift.Type.BOOL) {
          this.is_cancel = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan');
    if (this.type_id !== null && this.type_id !== undefined) {
      output.writeFieldBegin('type_id', Thrift.Type.I64, 1);
      output.writeI64(this.type_id);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.DOUBLE, 2);
      output.writeDouble(this.count);
      output.writeFieldEnd();
    }
    if (this.vichele_info !== null && this.vichele_info !== undefined) {
      output.writeFieldBegin('vichele_info', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.vichele_info.length);
      for (let iter4 in this.vichele_info) {
        if (this.vichele_info.hasOwnProperty(iter4)) {
          iter4 = this.vichele_info[iter4];
          iter4.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 4);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.plan_time !== null && this.plan_time !== undefined) {
      output.writeFieldBegin('plan_time', Thrift.Type.STRING, 5);
      output.writeString(this.plan_time);
      output.writeFieldEnd();
    }
    if (this.created_time !== null && this.created_time !== undefined) {
      output.writeFieldBegin('created_time', Thrift.Type.I64, 6);
      output.writeI64(this.created_time);
      output.writeFieldEnd();
    }
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 7);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.price !== null && this.price !== undefined) {
      output.writeFieldBegin('price', Thrift.Type.DOUBLE, 8);
      output.writeDouble(this.price);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I64, 9);
      output.writeI64(this.status);
      output.writeFieldEnd();
    }
    if (this.proxy_company !== null && this.proxy_company !== undefined) {
      output.writeFieldBegin('proxy_company', Thrift.Type.STRING, 10);
      output.writeString(this.proxy_company);
      output.writeFieldEnd();
    }
    if (this.created_user_name !== null && this.created_user_name !== undefined) {
      output.writeFieldBegin('created_user_name', Thrift.Type.STRING, 11);
      output.writeString(this.created_user_name);
      output.writeFieldEnd();
    }
    if (this.buy_company !== null && this.buy_company !== undefined) {
      output.writeFieldBegin('buy_company', Thrift.Type.STRING, 12);
      output.writeString(this.buy_company);
      output.writeFieldEnd();
    }
    if (this.sale_company !== null && this.sale_company !== undefined) {
      output.writeFieldBegin('sale_company', Thrift.Type.STRING, 13);
      output.writeString(this.sale_company);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 14);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    if (this.is_cancel !== null && this.is_cancel !== undefined) {
      output.writeFieldBegin('is_cancel', Thrift.Type.BOOL, 15);
      output.writeBool(this.is_cancel);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
plan_status = class {
  constructor(args) {
    this.plan_id = null;
    this.status = null;
    this.plan_time = null;
    this.conflict_reason = null;
    this.status_prompt = null;
    this.is_cancel = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.plan_time !== undefined && args.plan_time !== null) {
        this.plan_time = args.plan_time;
      }
      if (args.conflict_reason !== undefined && args.conflict_reason !== null) {
        this.conflict_reason = args.conflict_reason;
      }
      if (args.status_prompt !== undefined && args.status_prompt !== null) {
        this.status_prompt = args.status_prompt;
      }
      if (args.is_cancel !== undefined && args.is_cancel !== null) {
        this.is_cancel = args.is_cancel;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.status = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.plan_time = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.conflict_reason = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.status_prompt = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.is_cancel = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('plan_status');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I64, 2);
      output.writeI64(this.status);
      output.writeFieldEnd();
    }
    if (this.plan_time !== null && this.plan_time !== undefined) {
      output.writeFieldBegin('plan_time', Thrift.Type.I64, 3);
      output.writeI64(this.plan_time);
      output.writeFieldEnd();
    }
    if (this.conflict_reason !== null && this.conflict_reason !== undefined) {
      output.writeFieldBegin('conflict_reason', Thrift.Type.STRING, 4);
      output.writeString(this.conflict_reason);
      output.writeFieldEnd();
    }
    if (this.status_prompt !== null && this.status_prompt !== undefined) {
      output.writeFieldBegin('status_prompt', Thrift.Type.STRING, 5);
      output.writeString(this.status_prompt);
      output.writeFieldEnd();
    }
    if (this.is_cancel !== null && this.is_cancel !== undefined) {
      output.writeFieldBegin('is_cancel', Thrift.Type.BOOL, 6);
      output.writeBool(this.is_cancel);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
plan_number_id = class {
  constructor(args) {
    this.id = null;
    this.number = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.number !== undefined && args.number !== null) {
        this.number = args.number;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('plan_number_id');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 1);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    if (this.number !== null && this.number !== undefined) {
      output.writeFieldBegin('number', Thrift.Type.STRING, 2);
      output.writeString(this.number);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
deliver_info = class {
  constructor(args) {
    this.id = null;
    this.count = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.DOUBLE) {
          this.count = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('deliver_info');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 1);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.DOUBLE, 2);
      output.writeDouble(this.count);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
vichele_statistics = class {
  constructor(args) {
    this.company = null;
    this.main_vichele = null;
    this.behind_vichele = null;
    this.driver_name = null;
    this.driver_phone = null;
    this.delivered = null;
    this.plan_id = null;
    this.plan_order = null;
    if (args) {
      if (args.company !== undefined && args.company !== null) {
        this.company = args.company;
      }
      if (args.main_vichele !== undefined && args.main_vichele !== null) {
        this.main_vichele = args.main_vichele;
      }
      if (args.behind_vichele !== undefined && args.behind_vichele !== null) {
        this.behind_vichele = args.behind_vichele;
      }
      if (args.driver_name !== undefined && args.driver_name !== null) {
        this.driver_name = args.driver_name;
      }
      if (args.driver_phone !== undefined && args.driver_phone !== null) {
        this.driver_phone = args.driver_phone;
      }
      if (args.delivered !== undefined && args.delivered !== null) {
        this.delivered = args.delivered;
      }
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.plan_order !== undefined && args.plan_order !== null) {
        this.plan_order = args.plan_order;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.main_vichele = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.behind_vichele = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.driver_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.driver_phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.BOOL) {
          this.delivered = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.plan_order = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('vichele_statistics');
    if (this.company !== null && this.company !== undefined) {
      output.writeFieldBegin('company', Thrift.Type.STRING, 1);
      output.writeString(this.company);
      output.writeFieldEnd();
    }
    if (this.main_vichele !== null && this.main_vichele !== undefined) {
      output.writeFieldBegin('main_vichele', Thrift.Type.STRING, 2);
      output.writeString(this.main_vichele);
      output.writeFieldEnd();
    }
    if (this.behind_vichele !== null && this.behind_vichele !== undefined) {
      output.writeFieldBegin('behind_vichele', Thrift.Type.STRING, 3);
      output.writeString(this.behind_vichele);
      output.writeFieldEnd();
    }
    if (this.driver_name !== null && this.driver_name !== undefined) {
      output.writeFieldBegin('driver_name', Thrift.Type.STRING, 4);
      output.writeString(this.driver_name);
      output.writeFieldEnd();
    }
    if (this.driver_phone !== null && this.driver_phone !== undefined) {
      output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 5);
      output.writeString(this.driver_phone);
      output.writeFieldEnd();
    }
    if (this.delivered !== null && this.delivered !== undefined) {
      output.writeFieldBegin('delivered', Thrift.Type.BOOL, 6);
      output.writeBool(this.delivered);
      output.writeFieldEnd();
    }
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 7);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.plan_order !== null && this.plan_order !== undefined) {
      output.writeFieldBegin('plan_order', Thrift.Type.STRING, 8);
      output.writeString(this.plan_order);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
vichele_stuff_statistics = class {
  constructor(args) {
    this.vichele = null;
    this.stuff_name = null;
    if (args) {
      if (args.vichele !== undefined && args.vichele !== null) {
        this.vichele = new vichele_statistics(args.vichele);
      }
      if (args.stuff_name !== undefined && args.stuff_name !== null) {
        this.stuff_name = args.stuff_name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.vichele = new vichele_statistics();
          this.vichele.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.stuff_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('vichele_stuff_statistics');
    if (this.vichele !== null && this.vichele !== undefined) {
      output.writeFieldBegin('vichele', Thrift.Type.STRUCT, 1);
      this.vichele.write(output);
      output.writeFieldEnd();
    }
    if (this.stuff_name !== null && this.stuff_name !== undefined) {
      output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 2);
      output.writeString(this.stuff_name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
vichele_search_result = class {
  constructor(args) {
    this.plan_info = null;
    this.vichele_numbers = null;
    this.plan_time = null;
    this.status = null;
    if (args) {
      if (args.plan_info !== undefined && args.plan_info !== null) {
        this.plan_info = new plan_number_id(args.plan_info);
      }
      if (args.vichele_numbers !== undefined && args.vichele_numbers !== null) {
        this.vichele_numbers = args.vichele_numbers;
      }
      if (args.plan_time !== undefined && args.plan_time !== null) {
        this.plan_time = args.plan_time;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.plan_info = new plan_number_id();
          this.plan_info.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.vichele_numbers = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.plan_time = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.status = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('vichele_search_result');
    if (this.plan_info !== null && this.plan_info !== undefined) {
      output.writeFieldBegin('plan_info', Thrift.Type.STRUCT, 1);
      this.plan_info.write(output);
      output.writeFieldEnd();
    }
    if (this.vichele_numbers !== null && this.vichele_numbers !== undefined) {
      output.writeFieldBegin('vichele_numbers', Thrift.Type.STRING, 2);
      output.writeString(this.vichele_numbers);
      output.writeFieldEnd();
    }
    if (this.plan_time !== null && this.plan_time !== undefined) {
      output.writeFieldBegin('plan_time', Thrift.Type.STRING, 3);
      output.writeString(this.plan_time);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.STRING, 4);
      output.writeString(this.status);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
company_plan_brief = class {
  constructor(args) {
    this.today_plan_count = null;
    this.today_vichele_count = null;
    this.tomorrow_plan_count = null;
    this.tomorrow_vichele_count = null;
    if (args) {
      if (args.today_plan_count !== undefined && args.today_plan_count !== null) {
        this.today_plan_count = args.today_plan_count;
      }
      if (args.today_vichele_count !== undefined && args.today_vichele_count !== null) {
        this.today_vichele_count = args.today_vichele_count;
      }
      if (args.tomorrow_plan_count !== undefined && args.tomorrow_plan_count !== null) {
        this.tomorrow_plan_count = args.tomorrow_plan_count;
      }
      if (args.tomorrow_vichele_count !== undefined && args.tomorrow_vichele_count !== null) {
        this.tomorrow_vichele_count = args.tomorrow_vichele_count;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.today_plan_count = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.today_vichele_count = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.tomorrow_plan_count = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.I64) {
          this.tomorrow_vichele_count = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('company_plan_brief');
    if (this.today_plan_count !== null && this.today_plan_count !== undefined) {
      output.writeFieldBegin('today_plan_count', Thrift.Type.I64, 1);
      output.writeI64(this.today_plan_count);
      output.writeFieldEnd();
    }
    if (this.today_vichele_count !== null && this.today_vichele_count !== undefined) {
      output.writeFieldBegin('today_vichele_count', Thrift.Type.I64, 2);
      output.writeI64(this.today_vichele_count);
      output.writeFieldEnd();
    }
    if (this.tomorrow_plan_count !== null && this.tomorrow_plan_count !== undefined) {
      output.writeFieldBegin('tomorrow_plan_count', Thrift.Type.I64, 3);
      output.writeI64(this.tomorrow_plan_count);
      output.writeFieldEnd();
    }
    if (this.tomorrow_vichele_count !== null && this.tomorrow_vichele_count !== undefined) {
      output.writeFieldBegin('tomorrow_vichele_count', Thrift.Type.I64, 4);
      output.writeI64(this.tomorrow_vichele_count);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
today_driver_info = class {
  constructor(args) {
    this.id = null;
    this.destination_company = null;
    this.destination_address = null;
    this.order_company = null;
    this.main_vichele = null;
    this.behind_vichele = null;
    this.stuff_name = null;
    this.register_timestamp = null;
    this.register_number = null;
    this.enter_location = null;
    this.is_registered = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.destination_company !== undefined && args.destination_company !== null) {
        this.destination_company = args.destination_company;
      }
      if (args.destination_address !== undefined && args.destination_address !== null) {
        this.destination_address = args.destination_address;
      }
      if (args.order_company !== undefined && args.order_company !== null) {
        this.order_company = args.order_company;
      }
      if (args.main_vichele !== undefined && args.main_vichele !== null) {
        this.main_vichele = args.main_vichele;
      }
      if (args.behind_vichele !== undefined && args.behind_vichele !== null) {
        this.behind_vichele = args.behind_vichele;
      }
      if (args.stuff_name !== undefined && args.stuff_name !== null) {
        this.stuff_name = args.stuff_name;
      }
      if (args.register_timestamp !== undefined && args.register_timestamp !== null) {
        this.register_timestamp = args.register_timestamp;
      }
      if (args.register_number !== undefined && args.register_number !== null) {
        this.register_number = args.register_number;
      }
      if (args.enter_location !== undefined && args.enter_location !== null) {
        this.enter_location = args.enter_location;
      }
      if (args.is_registered !== undefined && args.is_registered !== null) {
        this.is_registered = args.is_registered;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.destination_company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.destination_address = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.order_company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.main_vichele = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.STRING) {
          this.behind_vichele = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.stuff_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.register_timestamp = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.register_number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.STRING) {
          this.enter_location = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.BOOL) {
          this.is_registered = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('today_driver_info');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 1);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    if (this.destination_company !== null && this.destination_company !== undefined) {
      output.writeFieldBegin('destination_company', Thrift.Type.STRING, 2);
      output.writeString(this.destination_company);
      output.writeFieldEnd();
    }
    if (this.destination_address !== null && this.destination_address !== undefined) {
      output.writeFieldBegin('destination_address', Thrift.Type.STRING, 3);
      output.writeString(this.destination_address);
      output.writeFieldEnd();
    }
    if (this.order_company !== null && this.order_company !== undefined) {
      output.writeFieldBegin('order_company', Thrift.Type.STRING, 4);
      output.writeString(this.order_company);
      output.writeFieldEnd();
    }
    if (this.main_vichele !== null && this.main_vichele !== undefined) {
      output.writeFieldBegin('main_vichele', Thrift.Type.STRING, 5);
      output.writeString(this.main_vichele);
      output.writeFieldEnd();
    }
    if (this.behind_vichele !== null && this.behind_vichele !== undefined) {
      output.writeFieldBegin('behind_vichele', Thrift.Type.STRING, 6);
      output.writeString(this.behind_vichele);
      output.writeFieldEnd();
    }
    if (this.stuff_name !== null && this.stuff_name !== undefined) {
      output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 7);
      output.writeString(this.stuff_name);
      output.writeFieldEnd();
    }
    if (this.register_timestamp !== null && this.register_timestamp !== undefined) {
      output.writeFieldBegin('register_timestamp', Thrift.Type.STRING, 8);
      output.writeString(this.register_timestamp);
      output.writeFieldEnd();
    }
    if (this.register_number !== null && this.register_number !== undefined) {
      output.writeFieldBegin('register_number', Thrift.Type.STRING, 9);
      output.writeString(this.register_number);
      output.writeFieldEnd();
    }
    if (this.enter_location !== null && this.enter_location !== undefined) {
      output.writeFieldBegin('enter_location', Thrift.Type.STRING, 10);
      output.writeString(this.enter_location);
      output.writeFieldEnd();
    }
    if (this.is_registered !== null && this.is_registered !== undefined) {
      output.writeFieldBegin('is_registered', Thrift.Type.BOOL, 11);
      output.writeBool(this.is_registered);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
driver_detail_info = class {
  constructor(args) {
    this.phone = null;
    this.id = null;
    if (args) {
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('driver_detail_info');
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 1);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.STRING, 2);
      output.writeString(this.id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
api_extra_transformation = class {
  constructor(args) {
    this.driver_name = null;
    this.driver_phone = null;
    this.driver_id = null;
    if (args) {
      if (args.driver_name !== undefined && args.driver_name !== null) {
        this.driver_name = args.driver_name;
      }
      if (args.driver_phone !== undefined && args.driver_phone !== null) {
        this.driver_phone = args.driver_phone;
      }
      if (args.driver_id !== undefined && args.driver_id !== null) {
        this.driver_id = args.driver_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.driver_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.driver_phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.driver_id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('api_extra_transformation');
    if (this.driver_name !== null && this.driver_name !== undefined) {
      output.writeFieldBegin('driver_name', Thrift.Type.STRING, 1);
      output.writeString(this.driver_name);
      output.writeFieldEnd();
    }
    if (this.driver_phone !== null && this.driver_phone !== undefined) {
      output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 2);
      output.writeString(this.driver_phone);
      output.writeFieldEnd();
    }
    if (this.driver_id !== null && this.driver_id !== undefined) {
      output.writeFieldBegin('driver_id', Thrift.Type.STRING, 3);
      output.writeString(this.driver_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
api_transformation_info = class {
  constructor(args) {
    this.id = null;
    this.main_vichele_number = null;
    this.behind_vichele_number = null;
    this.stuff_name = null;
    this.enter_count = null;
    this.exit_count = null;
    this.company_name = null;
    this.extra_info = null;
    this.is_sale = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.main_vichele_number !== undefined && args.main_vichele_number !== null) {
        this.main_vichele_number = args.main_vichele_number;
      }
      if (args.behind_vichele_number !== undefined && args.behind_vichele_number !== null) {
        this.behind_vichele_number = args.behind_vichele_number;
      }
      if (args.stuff_name !== undefined && args.stuff_name !== null) {
        this.stuff_name = args.stuff_name;
      }
      if (args.enter_count !== undefined && args.enter_count !== null) {
        this.enter_count = args.enter_count;
      }
      if (args.exit_count !== undefined && args.exit_count !== null) {
        this.exit_count = args.exit_count;
      }
      if (args.company_name !== undefined && args.company_name !== null) {
        this.company_name = args.company_name;
      }
      if (args.extra_info !== undefined && args.extra_info !== null) {
        this.extra_info = new api_extra_transformation(args.extra_info);
      }
      if (args.is_sale !== undefined && args.is_sale !== null) {
        this.is_sale = args.is_sale;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.main_vichele_number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.behind_vichele_number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.stuff_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.DOUBLE) {
          this.enter_count = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.DOUBLE) {
          this.exit_count = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.company_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRUCT) {
          this.extra_info = new api_extra_transformation();
          this.extra_info.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.BOOL) {
          this.is_sale = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('api_transformation_info');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 1);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    if (this.main_vichele_number !== null && this.main_vichele_number !== undefined) {
      output.writeFieldBegin('main_vichele_number', Thrift.Type.STRING, 2);
      output.writeString(this.main_vichele_number);
      output.writeFieldEnd();
    }
    if (this.behind_vichele_number !== null && this.behind_vichele_number !== undefined) {
      output.writeFieldBegin('behind_vichele_number', Thrift.Type.STRING, 3);
      output.writeString(this.behind_vichele_number);
      output.writeFieldEnd();
    }
    if (this.stuff_name !== null && this.stuff_name !== undefined) {
      output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 4);
      output.writeString(this.stuff_name);
      output.writeFieldEnd();
    }
    if (this.enter_count !== null && this.enter_count !== undefined) {
      output.writeFieldBegin('enter_count', Thrift.Type.DOUBLE, 5);
      output.writeDouble(this.enter_count);
      output.writeFieldEnd();
    }
    if (this.exit_count !== null && this.exit_count !== undefined) {
      output.writeFieldBegin('exit_count', Thrift.Type.DOUBLE, 6);
      output.writeDouble(this.exit_count);
      output.writeFieldEnd();
    }
    if (this.company_name !== null && this.company_name !== undefined) {
      output.writeFieldBegin('company_name', Thrift.Type.STRING, 7);
      output.writeString(this.company_name);
      output.writeFieldEnd();
    }
    if (this.extra_info !== null && this.extra_info !== undefined) {
      output.writeFieldBegin('extra_info', Thrift.Type.STRUCT, 8);
      this.extra_info.write(output);
      output.writeFieldEnd();
    }
    if (this.is_sale !== null && this.is_sale !== undefined) {
      output.writeFieldBegin('is_sale', Thrift.Type.BOOL, 9);
      output.writeBool(this.is_sale);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
vichele_stay_alone = class {
  constructor(args) {
    this.id = null;
    this.stuff_name = null;
    this.company_name = null;
    this.main_vichele_number = null;
    this.behind_vichele_number = null;
    this.count = null;
    this.comment = null;
    this.date = null;
    this.destination = null;
    this.status = null;
    this.creator_name = null;
    this.creator_phone = null;
    this.repeated = null;
    if (args) {
      if (args.id !== undefined && args.id !== null) {
        this.id = args.id;
      }
      if (args.stuff_name !== undefined && args.stuff_name !== null) {
        this.stuff_name = args.stuff_name;
      }
      if (args.company_name !== undefined && args.company_name !== null) {
        this.company_name = args.company_name;
      }
      if (args.main_vichele_number !== undefined && args.main_vichele_number !== null) {
        this.main_vichele_number = args.main_vichele_number;
      }
      if (args.behind_vichele_number !== undefined && args.behind_vichele_number !== null) {
        this.behind_vichele_number = args.behind_vichele_number;
      }
      if (args.count !== undefined && args.count !== null) {
        this.count = args.count;
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
      if (args.date !== undefined && args.date !== null) {
        this.date = args.date;
      }
      if (args.destination !== undefined && args.destination !== null) {
        this.destination = args.destination;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.creator_name !== undefined && args.creator_name !== null) {
        this.creator_name = args.creator_name;
      }
      if (args.creator_phone !== undefined && args.creator_phone !== null) {
        this.creator_phone = args.creator_phone;
      }
      if (args.repeated !== undefined && args.repeated !== null) {
        this.repeated = args.repeated;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.stuff_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.company_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.main_vichele_number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 5:
        if (ftype == Thrift.Type.STRING) {
          this.behind_vichele_number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 6:
        if (ftype == Thrift.Type.DOUBLE) {
          this.count = input.readDouble().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 7:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 8:
        if (ftype == Thrift.Type.STRING) {
          this.date = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 9:
        if (ftype == Thrift.Type.STRING) {
          this.destination = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 10:
        if (ftype == Thrift.Type.I64) {
          this.status = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 11:
        if (ftype == Thrift.Type.STRING) {
          this.creator_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 12:
        if (ftype == Thrift.Type.STRING) {
          this.creator_phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 13:
        if (ftype == Thrift.Type.BOOL) {
          this.repeated = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('vichele_stay_alone');
    if (this.id !== null && this.id !== undefined) {
      output.writeFieldBegin('id', Thrift.Type.I64, 1);
      output.writeI64(this.id);
      output.writeFieldEnd();
    }
    if (this.stuff_name !== null && this.stuff_name !== undefined) {
      output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 2);
      output.writeString(this.stuff_name);
      output.writeFieldEnd();
    }
    if (this.company_name !== null && this.company_name !== undefined) {
      output.writeFieldBegin('company_name', Thrift.Type.STRING, 3);
      output.writeString(this.company_name);
      output.writeFieldEnd();
    }
    if (this.main_vichele_number !== null && this.main_vichele_number !== undefined) {
      output.writeFieldBegin('main_vichele_number', Thrift.Type.STRING, 4);
      output.writeString(this.main_vichele_number);
      output.writeFieldEnd();
    }
    if (this.behind_vichele_number !== null && this.behind_vichele_number !== undefined) {
      output.writeFieldBegin('behind_vichele_number', Thrift.Type.STRING, 5);
      output.writeString(this.behind_vichele_number);
      output.writeFieldEnd();
    }
    if (this.count !== null && this.count !== undefined) {
      output.writeFieldBegin('count', Thrift.Type.DOUBLE, 6);
      output.writeDouble(this.count);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 7);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    if (this.date !== null && this.date !== undefined) {
      output.writeFieldBegin('date', Thrift.Type.STRING, 8);
      output.writeString(this.date);
      output.writeFieldEnd();
    }
    if (this.destination !== null && this.destination !== undefined) {
      output.writeFieldBegin('destination', Thrift.Type.STRING, 9);
      output.writeString(this.destination);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I64, 10);
      output.writeI64(this.status);
      output.writeFieldEnd();
    }
    if (this.creator_name !== null && this.creator_name !== undefined) {
      output.writeFieldBegin('creator_name', Thrift.Type.STRING, 11);
      output.writeString(this.creator_name);
      output.writeFieldEnd();
    }
    if (this.creator_phone !== null && this.creator_phone !== undefined) {
      output.writeFieldBegin('creator_phone', Thrift.Type.STRING, 12);
      output.writeString(this.creator_phone);
      output.writeFieldEnd();
    }
    if (this.repeated !== null && this.repeated !== undefined) {
      output.writeFieldBegin('repeated', Thrift.Type.BOOL, 13);
      output.writeBool(this.repeated);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
silent_user_info = class {
  constructor(args) {
    this.name = null;
    this.phone = null;
    if (args) {
      if (args.name !== undefined && args.name !== null) {
        this.name = args.name;
      }
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('silent_user_info');
    if (this.name !== null && this.name !== undefined) {
      output.writeFieldBegin('name', Thrift.Type.STRING, 1);
      output.writeString(this.name);
      output.writeFieldEnd();
    }
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 2);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
