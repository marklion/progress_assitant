//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

stuff_plan_management_create_plan_args = class {
  constructor(args) {
    this.plan = null;
    this.ssid = null;
    this.proxy_company = null;
    if (args) {
      if (args.plan !== undefined && args.plan !== null) {
        this.plan = new stuff_plan(args.plan);
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.proxy_company !== undefined && args.proxy_company !== null) {
        this.proxy_company = args.proxy_company;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.plan = new stuff_plan();
          this.plan.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.proxy_company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_create_plan_args');
    if (this.plan !== null && this.plan !== undefined) {
      output.writeFieldBegin('plan', Thrift.Type.STRUCT, 1);
      this.plan.write(output);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.proxy_company !== null && this.proxy_company !== undefined) {
      output.writeFieldBegin('proxy_company', Thrift.Type.STRING, 3);
      output.writeString(this.proxy_company);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_create_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_create_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_created_plan_args = class {
  constructor(args) {
    this.ssid = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_created_plan_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_created_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [plan_status]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp336 = input.readListBegin();
          const _size35 = _rtmp336.size || 0;
          for (let _i37 = 0; _i37 < _size35; ++_i37) {
            let elem38 = null;
            elem38 = new plan_status();
            elem38.read(input);
            this.success.push(elem38);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_created_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter39 in this.success) {
        if (this.success.hasOwnProperty(iter39)) {
          iter39 = this.success[iter39];
          iter39.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_company_plan_args = class {
  constructor(args) {
    this.ssid = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_company_plan_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_company_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [plan_status]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp341 = input.readListBegin();
          const _size40 = _rtmp341.size || 0;
          for (let _i42 = 0; _i42 < _size40; ++_i42) {
            let elem43 = null;
            elem43 = new plan_status();
            elem43.read(input);
            this.success.push(elem43);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_company_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter44 in this.success) {
        if (this.success.hasOwnProperty(iter44)) {
          iter44 = this.success[iter44];
          iter44.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_plan_args = class {
  constructor(args) {
    this.plan_id = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_plan_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new stuff_plan(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new stuff_plan();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_update_plan_args = class {
  constructor(args) {
    this.plan = null;
    this.ssid = null;
    if (args) {
      if (args.plan !== undefined && args.plan !== null) {
        this.plan = new stuff_plan(args.plan);
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.plan = new stuff_plan();
          this.plan.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_update_plan_args');
    if (this.plan !== null && this.plan !== undefined) {
      output.writeFieldBegin('plan', Thrift.Type.STRUCT, 1);
      this.plan.write(output);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_update_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_update_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_plan_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_plan_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_has_priv_edit_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_has_priv_edit_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_has_priv_edit_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_has_priv_edit_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_upload_payinfo_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    this.content = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.content !== undefined && args.content !== null) {
        this.content = args.content;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.content = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_upload_payinfo_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.content !== null && this.content !== undefined) {
      output.writeFieldBegin('content', Thrift.Type.STRING, 3);
      output.writeString(this.content);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_upload_payinfo_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_upload_payinfo_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_pay_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_pay_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_pay_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_pay_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_close_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_close_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_close_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_close_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_export_plan_args = class {
  constructor(args) {
    this.ssid = null;
    this.plan_ids = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.plan_ids !== undefined && args.plan_ids !== null) {
        this.plan_ids = Thrift.copyList(args.plan_ids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.plan_ids = [];
          const _rtmp346 = input.readListBegin();
          const _size45 = _rtmp346.size || 0;
          for (let _i47 = 0; _i47 < _size45; ++_i47) {
            let elem48 = null;
            elem48 = input.readI64().value;
            this.plan_ids.push(elem48);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_export_plan_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.plan_ids !== null && this.plan_ids !== undefined) {
      output.writeFieldBegin('plan_ids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.plan_ids.length);
      for (let iter49 in this.plan_ids) {
        if (this.plan_ids.hasOwnProperty(iter49)) {
          iter49 = this.plan_ids[iter49];
          output.writeI64(iter49);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_export_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_export_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_except_close_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    this.reason = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.reason !== undefined && args.reason !== null) {
        this.reason = args.reason;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.reason = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_except_close_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.reason !== null && this.reason !== undefined) {
      output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
      output.writeString(this.reason);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_except_close_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_except_close_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_verify_plan_args = class {
  constructor(args) {
    this.plan = null;
    this.ssid = null;
    if (args) {
      if (args.plan !== undefined && args.plan !== null) {
        this.plan = new stuff_plan(args.plan);
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.plan = new stuff_plan();
          this.plan.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_verify_plan_args');
    if (this.plan !== null && this.plan !== undefined) {
      output.writeFieldBegin('plan', Thrift.Type.STRUCT, 1);
      this.plan.write(output);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_verify_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_verify_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_send_file_via_email_args = class {
  constructor(args) {
    this.ssid = null;
    this.filepath = null;
    this.email = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.filepath !== undefined && args.filepath !== null) {
        this.filepath = args.filepath;
      }
      if (args.email !== undefined && args.email !== null) {
        this.email = args.email;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.filepath = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.email = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_send_file_via_email_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.filepath !== null && this.filepath !== undefined) {
      output.writeFieldBegin('filepath', Thrift.Type.STRING, 2);
      output.writeString(this.filepath);
      output.writeFieldEnd();
    }
    if (this.email !== null && this.email !== undefined) {
      output.writeFieldBegin('email', Thrift.Type.STRING, 3);
      output.writeString(this.email);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_send_file_via_email_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_send_file_via_email_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_reject_plan_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    this.reject_reason = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.reject_reason !== undefined && args.reject_reason !== null) {
        this.reject_reason = args.reject_reason;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.reject_reason = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_reject_plan_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.reject_reason !== null && this.reject_reason !== undefined) {
      output.writeFieldBegin('reject_reason', Thrift.Type.STRING, 3);
      output.writeString(this.reject_reason);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_reject_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_reject_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_managementClient = class stuff_plan_managementClient {
  constructor(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
  }

  create_plan (plan, ssid, proxy_company) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_create_plan(plan, ssid, proxy_company, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_create_plan (plan, ssid, proxy_company, callback) {
    const params = {
      plan: plan,
      ssid: ssid,
      proxy_company: proxy_company
    };
    const args = new stuff_plan_management_create_plan_args(params);
    try {
      this.output.writeMessageBegin('create_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_create_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_create_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_create_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'create_plan failed: unknown result';
  }

  get_created_plan (ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_created_plan(ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_created_plan (ssid, callback) {
    const params = {
      ssid: ssid
    };
    const args = new stuff_plan_management_get_created_plan_args(params);
    try {
      this.output.writeMessageBegin('get_created_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_created_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_created_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_created_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_created_plan failed: unknown result';
  }

  get_company_plan (ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_company_plan(ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_company_plan (ssid, callback) {
    const params = {
      ssid: ssid
    };
    const args = new stuff_plan_management_get_company_plan_args(params);
    try {
      this.output.writeMessageBegin('get_company_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_company_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_company_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_company_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_company_plan failed: unknown result';
  }

  get_plan (plan_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_plan(plan_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_plan (plan_id, callback) {
    const params = {
      plan_id: plan_id
    };
    const args = new stuff_plan_management_get_plan_args(params);
    try {
      this.output.writeMessageBegin('get_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_plan failed: unknown result';
  }

  update_plan (plan, ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_update_plan(plan, ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_update_plan (plan, ssid, callback) {
    const params = {
      plan: plan,
      ssid: ssid
    };
    const args = new stuff_plan_management_update_plan_args(params);
    try {
      this.output.writeMessageBegin('update_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_update_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_update_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_update_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'update_plan failed: unknown result';
  }

  confirm_plan (plan_id, ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_confirm_plan(plan_id, ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_confirm_plan (plan_id, ssid, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid
    };
    const args = new stuff_plan_management_confirm_plan_args(params);
    try {
      this.output.writeMessageBegin('confirm_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_confirm_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_confirm_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_confirm_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'confirm_plan failed: unknown result';
  }

  has_priv_edit (plan_id, ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_has_priv_edit(plan_id, ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_has_priv_edit (plan_id, ssid, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid
    };
    const args = new stuff_plan_management_has_priv_edit_args(params);
    try {
      this.output.writeMessageBegin('has_priv_edit', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_has_priv_edit();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_has_priv_edit () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_has_priv_edit_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'has_priv_edit failed: unknown result';
  }

  upload_payinfo (plan_id, ssid, content) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_upload_payinfo(plan_id, ssid, content, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_upload_payinfo (plan_id, ssid, content, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid,
      content: content
    };
    const args = new stuff_plan_management_upload_payinfo_args(params);
    try {
      this.output.writeMessageBegin('upload_payinfo', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_upload_payinfo();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_upload_payinfo () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_upload_payinfo_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'upload_payinfo failed: unknown result';
  }

  confirm_pay (plan_id, ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_confirm_pay(plan_id, ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_confirm_pay (plan_id, ssid, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid
    };
    const args = new stuff_plan_management_confirm_pay_args(params);
    try {
      this.output.writeMessageBegin('confirm_pay', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_confirm_pay();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_confirm_pay () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_confirm_pay_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'confirm_pay failed: unknown result';
  }

  confirm_close (plan_id, ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_confirm_close(plan_id, ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_confirm_close (plan_id, ssid, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid
    };
    const args = new stuff_plan_management_confirm_close_args(params);
    try {
      this.output.writeMessageBegin('confirm_close', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_confirm_close();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_confirm_close () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_confirm_close_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'confirm_close failed: unknown result';
  }

  export_plan (ssid, plan_ids) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_export_plan(ssid, plan_ids, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_export_plan (ssid, plan_ids, callback) {
    const params = {
      ssid: ssid,
      plan_ids: plan_ids
    };
    const args = new stuff_plan_management_export_plan_args(params);
    try {
      this.output.writeMessageBegin('export_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_export_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_export_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_export_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'export_plan failed: unknown result';
  }

  except_close (plan_id, ssid, reason) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_except_close(plan_id, ssid, reason, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_except_close (plan_id, ssid, reason, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid,
      reason: reason
    };
    const args = new stuff_plan_management_except_close_args(params);
    try {
      this.output.writeMessageBegin('except_close', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_except_close();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_except_close () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_except_close_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'except_close failed: unknown result';
  }

  verify_plan (plan, ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_verify_plan(plan, ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_verify_plan (plan, ssid, callback) {
    const params = {
      plan: plan,
      ssid: ssid
    };
    const args = new stuff_plan_management_verify_plan_args(params);
    try {
      this.output.writeMessageBegin('verify_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_verify_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_verify_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_verify_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'verify_plan failed: unknown result';
  }

  send_file_via_email (ssid, filepath, email) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_send_file_via_email(ssid, filepath, email, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_send_file_via_email (ssid, filepath, email, callback) {
    const params = {
      ssid: ssid,
      filepath: filepath,
      email: email
    };
    const args = new stuff_plan_management_send_file_via_email_args(params);
    try {
      this.output.writeMessageBegin('send_file_via_email', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_send_file_via_email();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_send_file_via_email () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_send_file_via_email_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'send_file_via_email failed: unknown result';
  }

  reject_plan (plan_id, ssid, reject_reason) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_reject_plan(plan_id, ssid, reject_reason, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_reject_plan (plan_id, ssid, reject_reason, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid,
      reject_reason: reject_reason
    };
    const args = new stuff_plan_management_reject_plan_args(params);
    try {
      this.output.writeMessageBegin('reject_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_reject_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_reject_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_reject_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'reject_plan failed: unknown result';
  }
};
