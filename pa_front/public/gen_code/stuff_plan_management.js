//
// Autogenerated by Thrift Compiler (0.14.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
if (typeof Int64 === 'undefined' && typeof require === 'function') {
  const Int64 = require('node-int64');
}


//HELPER FUNCTIONS AND STRUCTURES

stuff_plan_management_create_plan_args = class {
  constructor(args) {
    this.plan = null;
    this.ssid = null;
    this.proxy_company = null;
    if (args) {
      if (args.plan !== undefined && args.plan !== null) {
        this.plan = new stuff_plan(args.plan);
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.proxy_company !== undefined && args.proxy_company !== null) {
        this.proxy_company = args.proxy_company;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.plan = new stuff_plan();
          this.plan.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.proxy_company = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_create_plan_args');
    if (this.plan !== null && this.plan !== undefined) {
      output.writeFieldBegin('plan', Thrift.Type.STRUCT, 1);
      this.plan.write(output);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.proxy_company !== null && this.proxy_company !== undefined) {
      output.writeFieldBegin('proxy_company', Thrift.Type.STRING, 3);
      output.writeString(this.proxy_company);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_create_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_create_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_created_plan_args = class {
  constructor(args) {
    this.ssid = null;
    this.anchor = null;
    this.status = null;
    this.stuff_name = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.anchor !== undefined && args.anchor !== null) {
        this.anchor = args.anchor;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.stuff_name !== undefined && args.stuff_name !== null) {
        this.stuff_name = args.stuff_name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.anchor = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.status = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.stuff_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_created_plan_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.anchor !== null && this.anchor !== undefined) {
      output.writeFieldBegin('anchor', Thrift.Type.I64, 2);
      output.writeI64(this.anchor);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I64, 3);
      output.writeI64(this.status);
      output.writeFieldEnd();
    }
    if (this.stuff_name !== null && this.stuff_name !== undefined) {
      output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 4);
      output.writeString(this.stuff_name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_created_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [plan_status]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp381 = input.readListBegin();
          const _size80 = _rtmp381.size || 0;
          for (let _i82 = 0; _i82 < _size80; ++_i82) {
            let elem83 = null;
            elem83 = new plan_status();
            elem83.read(input);
            this.success.push(elem83);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_created_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter84 in this.success) {
        if (this.success.hasOwnProperty(iter84)) {
          iter84 = this.success[iter84];
          iter84.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_company_plan_args = class {
  constructor(args) {
    this.ssid = null;
    this.anchor = null;
    this.status = null;
    this.stuff_name = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.anchor !== undefined && args.anchor !== null) {
        this.anchor = args.anchor;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
      if (args.stuff_name !== undefined && args.stuff_name !== null) {
        this.stuff_name = args.stuff_name;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.anchor = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.status = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.stuff_name = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_company_plan_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.anchor !== null && this.anchor !== undefined) {
      output.writeFieldBegin('anchor', Thrift.Type.I64, 2);
      output.writeI64(this.anchor);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I64, 3);
      output.writeI64(this.status);
      output.writeFieldEnd();
    }
    if (this.stuff_name !== null && this.stuff_name !== undefined) {
      output.writeFieldBegin('stuff_name', Thrift.Type.STRING, 4);
      output.writeString(this.stuff_name);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_company_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [plan_status]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp386 = input.readListBegin();
          const _size85 = _rtmp386.size || 0;
          for (let _i87 = 0; _i87 < _size85; ++_i87) {
            let elem88 = null;
            elem88 = new plan_status();
            elem88.read(input);
            this.success.push(elem88);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_company_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter89 in this.success) {
        if (this.success.hasOwnProperty(iter89)) {
          iter89 = this.success[iter89];
          iter89.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_plan_args = class {
  constructor(args) {
    this.plan_id = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_plan_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new stuff_plan(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new stuff_plan();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_update_plan_args = class {
  constructor(args) {
    this.plan = null;
    this.ssid = null;
    if (args) {
      if (args.plan !== undefined && args.plan !== null) {
        this.plan = new stuff_plan(args.plan);
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.plan = new stuff_plan();
          this.plan.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_update_plan_args');
    if (this.plan !== null && this.plan !== undefined) {
      output.writeFieldBegin('plan', Thrift.Type.STRUCT, 1);
      this.plan.write(output);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_update_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_update_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_plan_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    this.comment = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_plan_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_pay_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    this.comment = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.comment !== undefined && args.comment !== null) {
        this.comment = args.comment;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.comment = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_pay_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.comment !== null && this.comment !== undefined) {
      output.writeFieldBegin('comment', Thrift.Type.STRING, 3);
      output.writeString(this.comment);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_pay_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_pay_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_deliver_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    this.deliver_infos = null;
    this.reason = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.deliver_infos !== undefined && args.deliver_infos !== null) {
        this.deliver_infos = Thrift.copyList(args.deliver_infos, [deliver_info]);
      }
      if (args.reason !== undefined && args.reason !== null) {
        this.reason = args.reason;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.LIST) {
          this.deliver_infos = [];
          const _rtmp391 = input.readListBegin();
          const _size90 = _rtmp391.size || 0;
          for (let _i92 = 0; _i92 < _size90; ++_i92) {
            let elem93 = null;
            elem93 = new deliver_info();
            elem93.read(input);
            this.deliver_infos.push(elem93);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.reason = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_deliver_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.deliver_infos !== null && this.deliver_infos !== undefined) {
      output.writeFieldBegin('deliver_infos', Thrift.Type.LIST, 3);
      output.writeListBegin(Thrift.Type.STRUCT, this.deliver_infos.length);
      for (let iter94 in this.deliver_infos) {
        if (this.deliver_infos.hasOwnProperty(iter94)) {
          iter94 = this.deliver_infos[iter94];
          iter94.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.reason !== null && this.reason !== undefined) {
      output.writeFieldBegin('reason', Thrift.Type.STRING, 4);
      output.writeString(this.reason);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_confirm_deliver_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_confirm_deliver_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_export_plan_args = class {
  constructor(args) {
    this.ssid = null;
    this.plan_ids = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.plan_ids !== undefined && args.plan_ids !== null) {
        this.plan_ids = Thrift.copyList(args.plan_ids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.plan_ids = [];
          const _rtmp396 = input.readListBegin();
          const _size95 = _rtmp396.size || 0;
          for (let _i97 = 0; _i97 < _size95; ++_i97) {
            let elem98 = null;
            elem98 = input.readI64().value;
            this.plan_ids.push(elem98);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_export_plan_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.plan_ids !== null && this.plan_ids !== undefined) {
      output.writeFieldBegin('plan_ids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.plan_ids.length);
      for (let iter99 in this.plan_ids) {
        if (this.plan_ids.hasOwnProperty(iter99)) {
          iter99 = this.plan_ids[iter99];
          output.writeI64(iter99);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_export_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_export_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_except_close_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    this.reason = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.reason !== undefined && args.reason !== null) {
        this.reason = args.reason;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.reason = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_except_close_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.reason !== null && this.reason !== undefined) {
      output.writeFieldBegin('reason', Thrift.Type.STRING, 3);
      output.writeString(this.reason);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_except_close_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_except_close_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_verify_plan_args = class {
  constructor(args) {
    this.plan = null;
    this.ssid = null;
    if (args) {
      if (args.plan !== undefined && args.plan !== null) {
        this.plan = new stuff_plan(args.plan);
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.plan = new stuff_plan();
          this.plan.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_verify_plan_args');
    if (this.plan !== null && this.plan !== undefined) {
      output.writeFieldBegin('plan', Thrift.Type.STRUCT, 1);
      this.plan.write(output);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_verify_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_verify_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_send_file_via_email_args = class {
  constructor(args) {
    this.ssid = null;
    this.filepath = null;
    this.email = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.filepath !== undefined && args.filepath !== null) {
        this.filepath = args.filepath;
      }
      if (args.email !== undefined && args.email !== null) {
        this.email = args.email;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.filepath = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.email = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_send_file_via_email_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.filepath !== null && this.filepath !== undefined) {
      output.writeFieldBegin('filepath', Thrift.Type.STRING, 2);
      output.writeString(this.filepath);
      output.writeFieldEnd();
    }
    if (this.email !== null && this.email !== undefined) {
      output.writeFieldBegin('email', Thrift.Type.STRING, 3);
      output.writeString(this.email);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_send_file_via_email_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_send_file_via_email_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_reject_plan_args = class {
  constructor(args) {
    this.plan_id = null;
    this.ssid = null;
    this.reject_reason = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.reject_reason !== undefined && args.reject_reason !== null) {
        this.reject_reason = args.reject_reason;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.reject_reason = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_reject_plan_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 2);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.reject_reason !== null && this.reject_reason !== undefined) {
      output.writeFieldBegin('reject_reason', Thrift.Type.STRING, 3);
      output.writeString(this.reject_reason);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_reject_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_reject_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_search_plan_by_driver_phone_args = class {
  constructor(args) {
    this.phone = null;
    if (args) {
      if (args.phone !== undefined && args.phone !== null) {
        this.phone = args.phone;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_search_plan_by_driver_phone_args');
    if (this.phone !== null && this.phone !== undefined) {
      output.writeFieldBegin('phone', Thrift.Type.STRING, 1);
      output.writeString(this.phone);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_search_plan_by_driver_phone_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [plan_number_id]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3101 = input.readListBegin();
          const _size100 = _rtmp3101.size || 0;
          for (let _i102 = 0; _i102 < _size100; ++_i102) {
            let elem103 = null;
            elem103 = new plan_number_id();
            elem103.read(input);
            this.success.push(elem103);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_search_plan_by_driver_phone_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter104 in this.success) {
        if (this.success.hasOwnProperty(iter104)) {
          iter104 = this.success[iter104];
          iter104.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_status_rule_args = class {
  constructor(args) {
    this.plan_id = null;
    if (args) {
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_status_rule_args');
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 1);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_status_rule_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [plan_status_rule]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3106 = input.readListBegin();
          const _size105 = _rtmp3106.size || 0;
          for (let _i107 = 0; _i107 < _size105; ++_i107) {
            let elem108 = null;
            elem108 = new plan_status_rule();
            elem108.read(input);
            this.success.push(elem108);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_status_rule_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter109 in this.success) {
        if (this.success.hasOwnProperty(iter109)) {
          iter109 = this.success[iter109];
          iter109.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_change_rule_args = class {
  constructor(args) {
    this.ssid = null;
    this.plan_id = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_change_rule_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 2);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_change_rule_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [null]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3111 = input.readListBegin();
          const _size110 = _rtmp3111.size || 0;
          for (let _i112 = 0; _i112 < _size110; ++_i112) {
            let elem113 = null;
            elem113 = input.readBool().value;
            this.success.push(elem113);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_change_rule_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.BOOL, this.success.length);
      for (let iter114 in this.success) {
        if (this.success.hasOwnProperty(iter114)) {
          iter114 = this.success[iter114];
          output.writeBool(iter114);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_clean_unclose_plan_args = class {
  constructor(args) {
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      input.skip(ftype);
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_clean_unclose_plan_args');
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_clean_unclose_plan_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_clean_unclose_plan_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_today_statistics_args = class {
  constructor(args) {
    this.ssid = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_today_statistics_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_today_statistics_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [vichele_statistics]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3116 = input.readListBegin();
          const _size115 = _rtmp3116.size || 0;
          for (let _i117 = 0; _i117 < _size115; ++_i117) {
            let elem118 = null;
            elem118 = new vichele_statistics();
            elem118.read(input);
            this.success.push(elem118);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_today_statistics_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter119 in this.success) {
        if (this.success.hasOwnProperty(iter119)) {
          iter119 = this.success[iter119];
          iter119.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_plan_created_by_user_args = class {
  constructor(args) {
    this.ssid = null;
    this.plan_id = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_plan_created_by_user_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 2);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_plan_created_by_user_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_plan_created_by_user_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_export_plan_by_plan_date_args = class {
  constructor(args) {
    this.ssid = null;
    this.plan_date = null;
    this.create_date = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.plan_date !== undefined && args.plan_date !== null) {
        this.plan_date = args.plan_date;
      }
      if (args.create_date !== undefined && args.create_date !== null) {
        this.create_date = args.create_date;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.plan_date = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.create_date = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_export_plan_by_plan_date_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.plan_date !== null && this.plan_date !== undefined) {
      output.writeFieldBegin('plan_date', Thrift.Type.STRING, 2);
      output.writeString(this.plan_date);
      output.writeFieldEnd();
    }
    if (this.create_date !== null && this.create_date !== undefined) {
      output.writeFieldBegin('create_date', Thrift.Type.STRING, 3);
      output.writeString(this.create_date);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_export_plan_by_plan_date_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_export_plan_by_plan_date_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_export_plan_by_create_date_args = class {
  constructor(args) {
    this.ssid = null;
    this.begin_date = null;
    this.end_date = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.begin_date !== undefined && args.begin_date !== null) {
        this.begin_date = args.begin_date;
      }
      if (args.end_date !== undefined && args.end_date !== null) {
        this.end_date = args.end_date;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.begin_date = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.I64) {
          this.end_date = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_export_plan_by_create_date_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.begin_date !== null && this.begin_date !== undefined) {
      output.writeFieldBegin('begin_date', Thrift.Type.I64, 2);
      output.writeI64(this.begin_date);
      output.writeFieldEnd();
    }
    if (this.end_date !== null && this.end_date !== undefined) {
      output.writeFieldBegin('end_date', Thrift.Type.I64, 3);
      output.writeI64(this.end_date);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_export_plan_by_create_date_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_export_plan_by_create_date_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_search_plan_by_vichele_number_args = class {
  constructor(args) {
    this.ssid = null;
    this.vichele_number = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.vichele_number !== undefined && args.vichele_number !== null) {
        this.vichele_number = args.vichele_number;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.vichele_number = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_search_plan_by_vichele_number_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.vichele_number !== null && this.vichele_number !== undefined) {
      output.writeFieldBegin('vichele_number', Thrift.Type.STRING, 2);
      output.writeString(this.vichele_number);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_search_plan_by_vichele_number_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [vichele_search_result]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3121 = input.readListBegin();
          const _size120 = _rtmp3121.size || 0;
          for (let _i122 = 0; _i122 < _size120; ++_i122) {
            let elem123 = null;
            elem123 = new vichele_search_result();
            elem123.read(input);
            this.success.push(elem123);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_search_plan_by_vichele_number_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter124 in this.success) {
        if (this.success.hasOwnProperty(iter124)) {
          iter124 = this.success[iter124];
          iter124.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_tomorrow_statistics_args = class {
  constructor(args) {
    this.ssid = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_tomorrow_statistics_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_tomorrow_statistics_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [vichele_statistics]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3126 = input.readListBegin();
          const _size125 = _rtmp3126.size || 0;
          for (let _i127 = 0; _i127 < _size125; ++_i127) {
            let elem128 = null;
            elem128 = new vichele_statistics();
            elem128.read(input);
            this.success.push(elem128);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_tomorrow_statistics_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter129 in this.success) {
        if (this.success.hasOwnProperty(iter129)) {
          iter129 = this.success[iter129];
          iter129.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_company_brief_args = class {
  constructor(args) {
    this.ssid = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_company_brief_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_company_brief_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new company_plan_brief(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new company_plan_brief();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_company_brief_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_push_user_pay_args = class {
  constructor(args) {
    this.ssid = null;
    this.plan_id = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.plan_id !== undefined && args.plan_id !== null) {
        this.plan_id = args.plan_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.plan_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_push_user_pay_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.plan_id !== null && this.plan_id !== undefined) {
      output.writeFieldBegin('plan_id', Thrift.Type.I64, 2);
      output.writeI64(this.plan_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_push_user_pay_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_push_user_pay_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_count_by_status_args = class {
  constructor(args) {
    this.ssid = null;
    this.status = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.status !== undefined && args.status !== null) {
        this.status = args.status;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.status = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_count_by_status_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.status !== null && this.status !== undefined) {
      output.writeFieldBegin('status', Thrift.Type.I64, 2);
      output.writeI64(this.status);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_count_by_status_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.I64) {
          this.success = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_count_by_status_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.I64, 0);
      output.writeI64(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_cancel_vichele_from_plan_args = class {
  constructor(args) {
    this.ssid = null;
    this.ids = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.ids !== undefined && args.ids !== null) {
        this.ids = Thrift.copyList(args.ids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.ids = [];
          const _rtmp3131 = input.readListBegin();
          const _size130 = _rtmp3131.size || 0;
          for (let _i132 = 0; _i132 < _size130; ++_i132) {
            let elem133 = null;
            elem133 = input.readI64().value;
            this.ids.push(elem133);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_cancel_vichele_from_plan_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.ids !== null && this.ids !== undefined) {
      output.writeFieldBegin('ids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.ids.length);
      for (let iter134 in this.ids) {
        if (this.ids.hasOwnProperty(iter134)) {
          iter134 = this.ids[iter134];
          output.writeI64(iter134);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_cancel_vichele_from_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_cancel_vichele_from_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_driver_silent_login_args = class {
  constructor(args) {
    this.code = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_driver_silent_login_args');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.STRING, 1);
      output.writeString(this.code);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_driver_silent_login_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_driver_silent_login_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_driver_silent_send_sms_args = class {
  constructor(args) {
    this.driver_phone = null;
    if (args) {
      if (args.driver_phone !== undefined && args.driver_phone !== null) {
        this.driver_phone = args.driver_phone;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.driver_phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_driver_silent_send_sms_args');
    if (this.driver_phone !== null && this.driver_phone !== undefined) {
      output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 1);
      output.writeString(this.driver_phone);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_driver_silent_send_sms_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_driver_silent_send_sms_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_driver_silent_register_args = class {
  constructor(args) {
    this.code = null;
    this.driver_id = null;
    this.driver_phone = null;
    this.verify_code = null;
    if (args) {
      if (args.code !== undefined && args.code !== null) {
        this.code = args.code;
      }
      if (args.driver_id !== undefined && args.driver_id !== null) {
        this.driver_id = args.driver_id;
      }
      if (args.driver_phone !== undefined && args.driver_phone !== null) {
        this.driver_phone = args.driver_phone;
      }
      if (args.verify_code !== undefined && args.verify_code !== null) {
        this.verify_code = args.verify_code;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.code = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.STRING) {
          this.driver_id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 3:
        if (ftype == Thrift.Type.STRING) {
          this.driver_phone = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 4:
        if (ftype == Thrift.Type.STRING) {
          this.verify_code = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_driver_silent_register_args');
    if (this.code !== null && this.code !== undefined) {
      output.writeFieldBegin('code', Thrift.Type.STRING, 1);
      output.writeString(this.code);
      output.writeFieldEnd();
    }
    if (this.driver_id !== null && this.driver_id !== undefined) {
      output.writeFieldBegin('driver_id', Thrift.Type.STRING, 2);
      output.writeString(this.driver_id);
      output.writeFieldEnd();
    }
    if (this.driver_phone !== null && this.driver_phone !== undefined) {
      output.writeFieldBegin('driver_phone', Thrift.Type.STRING, 3);
      output.writeString(this.driver_phone);
      output.writeFieldEnd();
    }
    if (this.verify_code !== null && this.verify_code !== undefined) {
      output.writeFieldBegin('verify_code', Thrift.Type.STRING, 4);
      output.writeString(this.verify_code);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_driver_silent_register_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRING) {
          this.success = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_driver_silent_register_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRING, 0);
      output.writeString(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_driver_silent_unregister_args = class {
  constructor(args) {
    this.silent_id = null;
    if (args) {
      if (args.silent_id !== undefined && args.silent_id !== null) {
        this.silent_id = args.silent_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.silent_id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_driver_silent_unregister_args');
    if (this.silent_id !== null && this.silent_id !== undefined) {
      output.writeFieldBegin('silent_id', Thrift.Type.STRING, 1);
      output.writeString(this.silent_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_driver_silent_unregister_result = class {
  constructor(args) {
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_driver_silent_unregister_result');
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_verify_driver_silent_login_args = class {
  constructor(args) {
    this.silent_id = null;
    if (args) {
      if (args.silent_id !== undefined && args.silent_id !== null) {
        this.silent_id = args.silent_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.silent_id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_verify_driver_silent_login_args');
    if (this.silent_id !== null && this.silent_id !== undefined) {
      output.writeFieldBegin('silent_id', Thrift.Type.STRING, 1);
      output.writeString(this.silent_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_verify_driver_silent_login_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_verify_driver_silent_login_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_today_driver_info_args = class {
  constructor(args) {
    this.silent_id = null;
    if (args) {
      if (args.silent_id !== undefined && args.silent_id !== null) {
        this.silent_id = args.silent_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.silent_id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_today_driver_info_args');
    if (this.silent_id !== null && this.silent_id !== undefined) {
      output.writeFieldBegin('silent_id', Thrift.Type.STRING, 1);
      output.writeString(this.silent_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_today_driver_info_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = Thrift.copyList(args.success, [today_driver_info]);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.LIST) {
          this.success = [];
          const _rtmp3136 = input.readListBegin();
          const _size135 = _rtmp3136.size || 0;
          for (let _i137 = 0; _i137 < _size135; ++_i137) {
            let elem138 = null;
            elem138 = new today_driver_info();
            elem138.read(input);
            this.success.push(elem138);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_today_driver_info_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.LIST, 0);
      output.writeListBegin(Thrift.Type.STRUCT, this.success.length);
      for (let iter139 in this.success) {
        if (this.success.hasOwnProperty(iter139)) {
          iter139 = this.success[iter139];
          iter139.write(output);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_driver_info_args = class {
  constructor(args) {
    this.silent_id = null;
    if (args) {
      if (args.silent_id !== undefined && args.silent_id !== null) {
        this.silent_id = args.silent_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.silent_id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 0:
          input.skip(ftype);
          break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_driver_info_args');
    if (this.silent_id !== null && this.silent_id !== undefined) {
      output.writeFieldBegin('silent_id', Thrift.Type.STRING, 1);
      output.writeString(this.silent_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_get_driver_info_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = new driver_detail_info(args.success);
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.STRUCT) {
          this.success = new driver_detail_info();
          this.success.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_get_driver_info_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
      this.success.write(output);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_register_vichele_args = class {
  constructor(args) {
    this.silent_id = null;
    this.vichele_id = null;
    if (args) {
      if (args.silent_id !== undefined && args.silent_id !== null) {
        this.silent_id = args.silent_id;
      }
      if (args.vichele_id !== undefined && args.vichele_id !== null) {
        this.vichele_id = args.vichele_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.silent_id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.vichele_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_register_vichele_args');
    if (this.silent_id !== null && this.silent_id !== undefined) {
      output.writeFieldBegin('silent_id', Thrift.Type.STRING, 1);
      output.writeString(this.silent_id);
      output.writeFieldEnd();
    }
    if (this.vichele_id !== null && this.vichele_id !== undefined) {
      output.writeFieldBegin('vichele_id', Thrift.Type.I64, 2);
      output.writeI64(this.vichele_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_register_vichele_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_register_vichele_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_unregister_vichele_args = class {
  constructor(args) {
    this.silent_id = null;
    this.vichele_id = null;
    if (args) {
      if (args.silent_id !== undefined && args.silent_id !== null) {
        this.silent_id = args.silent_id;
      }
      if (args.vichele_id !== undefined && args.vichele_id !== null) {
        this.vichele_id = args.vichele_id;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.silent_id = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.I64) {
          this.vichele_id = input.readI64().value;
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_unregister_vichele_args');
    if (this.silent_id !== null && this.silent_id !== undefined) {
      output.writeFieldBegin('silent_id', Thrift.Type.STRING, 1);
      output.writeString(this.silent_id);
      output.writeFieldEnd();
    }
    if (this.vichele_id !== null && this.vichele_id !== undefined) {
      output.writeFieldBegin('vichele_id', Thrift.Type.I64, 2);
      output.writeI64(this.vichele_id);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_unregister_vichele_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_unregister_vichele_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_multi_confirm_plan_args = class {
  constructor(args) {
    this.ssid = null;
    this.plan_ids = null;
    if (args) {
      if (args.ssid !== undefined && args.ssid !== null) {
        this.ssid = args.ssid;
      }
      if (args.plan_ids !== undefined && args.plan_ids !== null) {
        this.plan_ids = Thrift.copyList(args.plan_ids, [null]);
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 1:
        if (ftype == Thrift.Type.STRING) {
          this.ssid = input.readString().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 2:
        if (ftype == Thrift.Type.LIST) {
          this.plan_ids = [];
          const _rtmp3141 = input.readListBegin();
          const _size140 = _rtmp3141.size || 0;
          for (let _i142 = 0; _i142 < _size140; ++_i142) {
            let elem143 = null;
            elem143 = input.readI64().value;
            this.plan_ids.push(elem143);
          }
          input.readListEnd();
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_multi_confirm_plan_args');
    if (this.ssid !== null && this.ssid !== undefined) {
      output.writeFieldBegin('ssid', Thrift.Type.STRING, 1);
      output.writeString(this.ssid);
      output.writeFieldEnd();
    }
    if (this.plan_ids !== null && this.plan_ids !== undefined) {
      output.writeFieldBegin('plan_ids', Thrift.Type.LIST, 2);
      output.writeListBegin(Thrift.Type.I64, this.plan_ids.length);
      for (let iter144 in this.plan_ids) {
        if (this.plan_ids.hasOwnProperty(iter144)) {
          iter144 = this.plan_ids[iter144];
          output.writeI64(iter144);
        }
      }
      output.writeListEnd();
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_management_multi_confirm_plan_result = class {
  constructor(args) {
    this.success = null;
    this.e = null;
    if (args instanceof gen_exp) {
        this.e = args;
        return;
    }
    if (args) {
      if (args.success !== undefined && args.success !== null) {
        this.success = args.success;
      }
      if (args.e !== undefined && args.e !== null) {
        this.e = args.e;
      }
    }
  }

  read (input) {
    input.readStructBegin();
    while (true) {
      const ret = input.readFieldBegin();
      const ftype = ret.ftype;
      const fid = ret.fid;
      if (ftype == Thrift.Type.STOP) {
        break;
      }
      switch (fid) {
        case 0:
        if (ftype == Thrift.Type.BOOL) {
          this.success = input.readBool().value;
        } else {
          input.skip(ftype);
        }
        break;
        case 1:
        if (ftype == Thrift.Type.STRUCT) {
          this.e = new gen_exp();
          this.e.read(input);
        } else {
          input.skip(ftype);
        }
        break;
        default:
          input.skip(ftype);
      }
      input.readFieldEnd();
    }
    input.readStructEnd();
    return;
  }

  write (output) {
    output.writeStructBegin('stuff_plan_management_multi_confirm_plan_result');
    if (this.success !== null && this.success !== undefined) {
      output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
      output.writeBool(this.success);
      output.writeFieldEnd();
    }
    if (this.e !== null && this.e !== undefined) {
      output.writeFieldBegin('e', Thrift.Type.STRUCT, 1);
      this.e.write(output);
      output.writeFieldEnd();
    }
    output.writeFieldStop();
    output.writeStructEnd();
    return;
  }

};
stuff_plan_managementClient = class stuff_plan_managementClient {
  constructor(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
  }

  create_plan (plan, ssid, proxy_company) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_create_plan(plan, ssid, proxy_company, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_create_plan (plan, ssid, proxy_company, callback) {
    const params = {
      plan: plan,
      ssid: ssid,
      proxy_company: proxy_company
    };
    const args = new stuff_plan_management_create_plan_args(params);
    try {
      this.output.writeMessageBegin('create_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_create_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_create_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_create_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'create_plan failed: unknown result';
  }

  get_created_plan (ssid, anchor, status, stuff_name) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_created_plan(ssid, anchor, status, stuff_name, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_created_plan (ssid, anchor, status, stuff_name, callback) {
    const params = {
      ssid: ssid,
      anchor: anchor,
      status: status,
      stuff_name: stuff_name
    };
    const args = new stuff_plan_management_get_created_plan_args(params);
    try {
      this.output.writeMessageBegin('get_created_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_created_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_created_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_created_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_created_plan failed: unknown result';
  }

  get_company_plan (ssid, anchor, status, stuff_name) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_company_plan(ssid, anchor, status, stuff_name, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_company_plan (ssid, anchor, status, stuff_name, callback) {
    const params = {
      ssid: ssid,
      anchor: anchor,
      status: status,
      stuff_name: stuff_name
    };
    const args = new stuff_plan_management_get_company_plan_args(params);
    try {
      this.output.writeMessageBegin('get_company_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_company_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_company_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_company_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_company_plan failed: unknown result';
  }

  get_plan (plan_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_plan(plan_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_plan (plan_id, callback) {
    const params = {
      plan_id: plan_id
    };
    const args = new stuff_plan_management_get_plan_args(params);
    try {
      this.output.writeMessageBegin('get_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_plan failed: unknown result';
  }

  update_plan (plan, ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_update_plan(plan, ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_update_plan (plan, ssid, callback) {
    const params = {
      plan: plan,
      ssid: ssid
    };
    const args = new stuff_plan_management_update_plan_args(params);
    try {
      this.output.writeMessageBegin('update_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_update_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_update_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_update_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'update_plan failed: unknown result';
  }

  confirm_plan (plan_id, ssid, comment) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_confirm_plan(plan_id, ssid, comment, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_confirm_plan (plan_id, ssid, comment, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid,
      comment: comment
    };
    const args = new stuff_plan_management_confirm_plan_args(params);
    try {
      this.output.writeMessageBegin('confirm_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_confirm_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_confirm_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_confirm_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'confirm_plan failed: unknown result';
  }

  confirm_pay (plan_id, ssid, comment) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_confirm_pay(plan_id, ssid, comment, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_confirm_pay (plan_id, ssid, comment, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid,
      comment: comment
    };
    const args = new stuff_plan_management_confirm_pay_args(params);
    try {
      this.output.writeMessageBegin('confirm_pay', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_confirm_pay();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_confirm_pay () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_confirm_pay_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'confirm_pay failed: unknown result';
  }

  confirm_deliver (plan_id, ssid, deliver_infos, reason) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_confirm_deliver(plan_id, ssid, deliver_infos, reason, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_confirm_deliver (plan_id, ssid, deliver_infos, reason, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid,
      deliver_infos: deliver_infos,
      reason: reason
    };
    const args = new stuff_plan_management_confirm_deliver_args(params);
    try {
      this.output.writeMessageBegin('confirm_deliver', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_confirm_deliver();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_confirm_deliver () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_confirm_deliver_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'confirm_deliver failed: unknown result';
  }

  export_plan (ssid, plan_ids) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_export_plan(ssid, plan_ids, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_export_plan (ssid, plan_ids, callback) {
    const params = {
      ssid: ssid,
      plan_ids: plan_ids
    };
    const args = new stuff_plan_management_export_plan_args(params);
    try {
      this.output.writeMessageBegin('export_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_export_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_export_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_export_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'export_plan failed: unknown result';
  }

  except_close (plan_id, ssid, reason) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_except_close(plan_id, ssid, reason, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_except_close (plan_id, ssid, reason, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid,
      reason: reason
    };
    const args = new stuff_plan_management_except_close_args(params);
    try {
      this.output.writeMessageBegin('except_close', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_except_close();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_except_close () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_except_close_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'except_close failed: unknown result';
  }

  verify_plan (plan, ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_verify_plan(plan, ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_verify_plan (plan, ssid, callback) {
    const params = {
      plan: plan,
      ssid: ssid
    };
    const args = new stuff_plan_management_verify_plan_args(params);
    try {
      this.output.writeMessageBegin('verify_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_verify_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_verify_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_verify_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'verify_plan failed: unknown result';
  }

  send_file_via_email (ssid, filepath, email) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_send_file_via_email(ssid, filepath, email, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_send_file_via_email (ssid, filepath, email, callback) {
    const params = {
      ssid: ssid,
      filepath: filepath,
      email: email
    };
    const args = new stuff_plan_management_send_file_via_email_args(params);
    try {
      this.output.writeMessageBegin('send_file_via_email', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_send_file_via_email();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_send_file_via_email () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_send_file_via_email_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'send_file_via_email failed: unknown result';
  }

  reject_plan (plan_id, ssid, reject_reason) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_reject_plan(plan_id, ssid, reject_reason, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_reject_plan (plan_id, ssid, reject_reason, callback) {
    const params = {
      plan_id: plan_id,
      ssid: ssid,
      reject_reason: reject_reason
    };
    const args = new stuff_plan_management_reject_plan_args(params);
    try {
      this.output.writeMessageBegin('reject_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_reject_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_reject_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_reject_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'reject_plan failed: unknown result';
  }

  search_plan_by_driver_phone (phone) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_search_plan_by_driver_phone(phone, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_search_plan_by_driver_phone (phone, callback) {
    const params = {
      phone: phone
    };
    const args = new stuff_plan_management_search_plan_by_driver_phone_args(params);
    try {
      this.output.writeMessageBegin('search_plan_by_driver_phone', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_search_plan_by_driver_phone();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_search_plan_by_driver_phone () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_search_plan_by_driver_phone_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'search_plan_by_driver_phone failed: unknown result';
  }

  get_status_rule (plan_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_status_rule(plan_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_status_rule (plan_id, callback) {
    const params = {
      plan_id: plan_id
    };
    const args = new stuff_plan_management_get_status_rule_args(params);
    try {
      this.output.writeMessageBegin('get_status_rule', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_status_rule();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_status_rule () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_status_rule_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_status_rule failed: unknown result';
  }

  get_change_rule (ssid, plan_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_change_rule(ssid, plan_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_change_rule (ssid, plan_id, callback) {
    const params = {
      ssid: ssid,
      plan_id: plan_id
    };
    const args = new stuff_plan_management_get_change_rule_args(params);
    try {
      this.output.writeMessageBegin('get_change_rule', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_change_rule();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_change_rule () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_change_rule_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_change_rule failed: unknown result';
  }

  clean_unclose_plan () {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_clean_unclose_plan((error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_clean_unclose_plan (callback) {
    const args = new stuff_plan_management_clean_unclose_plan_args();
    try {
      this.output.writeMessageBegin('clean_unclose_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_clean_unclose_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_clean_unclose_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_clean_unclose_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    return;
  }

  get_today_statistics (ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_today_statistics(ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_today_statistics (ssid, callback) {
    const params = {
      ssid: ssid
    };
    const args = new stuff_plan_management_get_today_statistics_args(params);
    try {
      this.output.writeMessageBegin('get_today_statistics', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_today_statistics();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_today_statistics () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_today_statistics_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_today_statistics failed: unknown result';
  }

  plan_created_by_user (ssid, plan_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_plan_created_by_user(ssid, plan_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_plan_created_by_user (ssid, plan_id, callback) {
    const params = {
      ssid: ssid,
      plan_id: plan_id
    };
    const args = new stuff_plan_management_plan_created_by_user_args(params);
    try {
      this.output.writeMessageBegin('plan_created_by_user', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_plan_created_by_user();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_plan_created_by_user () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_plan_created_by_user_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'plan_created_by_user failed: unknown result';
  }

  export_plan_by_plan_date (ssid, plan_date, create_date) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_export_plan_by_plan_date(ssid, plan_date, create_date, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_export_plan_by_plan_date (ssid, plan_date, create_date, callback) {
    const params = {
      ssid: ssid,
      plan_date: plan_date,
      create_date: create_date
    };
    const args = new stuff_plan_management_export_plan_by_plan_date_args(params);
    try {
      this.output.writeMessageBegin('export_plan_by_plan_date', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_export_plan_by_plan_date();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_export_plan_by_plan_date () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_export_plan_by_plan_date_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'export_plan_by_plan_date failed: unknown result';
  }

  export_plan_by_create_date (ssid, begin_date, end_date) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_export_plan_by_create_date(ssid, begin_date, end_date, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_export_plan_by_create_date (ssid, begin_date, end_date, callback) {
    const params = {
      ssid: ssid,
      begin_date: begin_date,
      end_date: end_date
    };
    const args = new stuff_plan_management_export_plan_by_create_date_args(params);
    try {
      this.output.writeMessageBegin('export_plan_by_create_date', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_export_plan_by_create_date();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_export_plan_by_create_date () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_export_plan_by_create_date_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'export_plan_by_create_date failed: unknown result';
  }

  search_plan_by_vichele_number (ssid, vichele_number) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_search_plan_by_vichele_number(ssid, vichele_number, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_search_plan_by_vichele_number (ssid, vichele_number, callback) {
    const params = {
      ssid: ssid,
      vichele_number: vichele_number
    };
    const args = new stuff_plan_management_search_plan_by_vichele_number_args(params);
    try {
      this.output.writeMessageBegin('search_plan_by_vichele_number', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_search_plan_by_vichele_number();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_search_plan_by_vichele_number () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_search_plan_by_vichele_number_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'search_plan_by_vichele_number failed: unknown result';
  }

  get_tomorrow_statistics (ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_tomorrow_statistics(ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_tomorrow_statistics (ssid, callback) {
    const params = {
      ssid: ssid
    };
    const args = new stuff_plan_management_get_tomorrow_statistics_args(params);
    try {
      this.output.writeMessageBegin('get_tomorrow_statistics', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_tomorrow_statistics();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_tomorrow_statistics () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_tomorrow_statistics_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_tomorrow_statistics failed: unknown result';
  }

  get_company_brief (ssid) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_company_brief(ssid, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_company_brief (ssid, callback) {
    const params = {
      ssid: ssid
    };
    const args = new stuff_plan_management_get_company_brief_args(params);
    try {
      this.output.writeMessageBegin('get_company_brief', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_company_brief();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_company_brief () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_company_brief_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_company_brief failed: unknown result';
  }

  push_user_pay (ssid, plan_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_push_user_pay(ssid, plan_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_push_user_pay (ssid, plan_id, callback) {
    const params = {
      ssid: ssid,
      plan_id: plan_id
    };
    const args = new stuff_plan_management_push_user_pay_args(params);
    try {
      this.output.writeMessageBegin('push_user_pay', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_push_user_pay();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_push_user_pay () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_push_user_pay_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'push_user_pay failed: unknown result';
  }

  get_count_by_status (ssid, status) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_count_by_status(ssid, status, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_count_by_status (ssid, status, callback) {
    const params = {
      ssid: ssid,
      status: status
    };
    const args = new stuff_plan_management_get_count_by_status_args(params);
    try {
      this.output.writeMessageBegin('get_count_by_status', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_count_by_status();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_count_by_status () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_count_by_status_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_count_by_status failed: unknown result';
  }

  cancel_vichele_from_plan (ssid, ids) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_cancel_vichele_from_plan(ssid, ids, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_cancel_vichele_from_plan (ssid, ids, callback) {
    const params = {
      ssid: ssid,
      ids: ids
    };
    const args = new stuff_plan_management_cancel_vichele_from_plan_args(params);
    try {
      this.output.writeMessageBegin('cancel_vichele_from_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_cancel_vichele_from_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_cancel_vichele_from_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_cancel_vichele_from_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'cancel_vichele_from_plan failed: unknown result';
  }

  driver_silent_login (code) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_driver_silent_login(code, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_driver_silent_login (code, callback) {
    const params = {
      code: code
    };
    const args = new stuff_plan_management_driver_silent_login_args(params);
    try {
      this.output.writeMessageBegin('driver_silent_login', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_driver_silent_login();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_driver_silent_login () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_driver_silent_login_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'driver_silent_login failed: unknown result';
  }

  driver_silent_send_sms (driver_phone) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_driver_silent_send_sms(driver_phone, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_driver_silent_send_sms (driver_phone, callback) {
    const params = {
      driver_phone: driver_phone
    };
    const args = new stuff_plan_management_driver_silent_send_sms_args(params);
    try {
      this.output.writeMessageBegin('driver_silent_send_sms', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_driver_silent_send_sms();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_driver_silent_send_sms () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_driver_silent_send_sms_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'driver_silent_send_sms failed: unknown result';
  }

  driver_silent_register (code, driver_id, driver_phone, verify_code) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_driver_silent_register(code, driver_id, driver_phone, verify_code, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_driver_silent_register (code, driver_id, driver_phone, verify_code, callback) {
    const params = {
      code: code,
      driver_id: driver_id,
      driver_phone: driver_phone,
      verify_code: verify_code
    };
    const args = new stuff_plan_management_driver_silent_register_args(params);
    try {
      this.output.writeMessageBegin('driver_silent_register', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_driver_silent_register();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_driver_silent_register () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_driver_silent_register_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'driver_silent_register failed: unknown result';
  }

  driver_silent_unregister (silent_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_driver_silent_unregister(silent_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_driver_silent_unregister (silent_id, callback) {
    const params = {
      silent_id: silent_id
    };
    const args = new stuff_plan_management_driver_silent_unregister_args(params);
    try {
      this.output.writeMessageBegin('driver_silent_unregister', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_driver_silent_unregister();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_driver_silent_unregister () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_driver_silent_unregister_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    return;
  }

  verify_driver_silent_login (silent_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_verify_driver_silent_login(silent_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_verify_driver_silent_login (silent_id, callback) {
    const params = {
      silent_id: silent_id
    };
    const args = new stuff_plan_management_verify_driver_silent_login_args(params);
    try {
      this.output.writeMessageBegin('verify_driver_silent_login', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_verify_driver_silent_login();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_verify_driver_silent_login () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_verify_driver_silent_login_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'verify_driver_silent_login failed: unknown result';
  }

  get_today_driver_info (silent_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_today_driver_info(silent_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_today_driver_info (silent_id, callback) {
    const params = {
      silent_id: silent_id
    };
    const args = new stuff_plan_management_get_today_driver_info_args(params);
    try {
      this.output.writeMessageBegin('get_today_driver_info', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_today_driver_info();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_today_driver_info () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_today_driver_info_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_today_driver_info failed: unknown result';
  }

  get_driver_info (silent_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_get_driver_info(silent_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_get_driver_info (silent_id, callback) {
    const params = {
      silent_id: silent_id
    };
    const args = new stuff_plan_management_get_driver_info_args(params);
    try {
      this.output.writeMessageBegin('get_driver_info', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_get_driver_info();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_get_driver_info () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_get_driver_info_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'get_driver_info failed: unknown result';
  }

  register_vichele (silent_id, vichele_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_register_vichele(silent_id, vichele_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_register_vichele (silent_id, vichele_id, callback) {
    const params = {
      silent_id: silent_id,
      vichele_id: vichele_id
    };
    const args = new stuff_plan_management_register_vichele_args(params);
    try {
      this.output.writeMessageBegin('register_vichele', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_register_vichele();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_register_vichele () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_register_vichele_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'register_vichele failed: unknown result';
  }

  unregister_vichele (silent_id, vichele_id) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_unregister_vichele(silent_id, vichele_id, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_unregister_vichele (silent_id, vichele_id, callback) {
    const params = {
      silent_id: silent_id,
      vichele_id: vichele_id
    };
    const args = new stuff_plan_management_unregister_vichele_args(params);
    try {
      this.output.writeMessageBegin('unregister_vichele', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_unregister_vichele();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_unregister_vichele () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_unregister_vichele_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'unregister_vichele failed: unknown result';
  }

  multi_confirm_plan (ssid, plan_ids) {
    const self = this;
    return new Promise((resolve, reject) => {
      self.send_multi_confirm_plan(ssid, plan_ids, (error, result) => {
        return error ? reject(error) : resolve(result);
      });
    });
  }

  send_multi_confirm_plan (ssid, plan_ids, callback) {
    const params = {
      ssid: ssid,
      plan_ids: plan_ids
    };
    const args = new stuff_plan_management_multi_confirm_plan_args(params);
    try {
      this.output.writeMessageBegin('multi_confirm_plan', Thrift.MessageType.CALL, this.seqid);
      args.write(this.output);
      this.output.writeMessageEnd();
      const self = this;
      this.output.getTransport().flush(true, () => {
        let error = null, result = null;
        try {
          result = self.recv_multi_confirm_plan();
        } catch (e) {
          error = e;
        }
        callback(error, result);
      });
    }
    catch (e) {
      if (typeof this.output.getTransport().reset === 'function') {
        this.output.getTransport().reset();
      }
      throw e;
    }
  }

  recv_multi_confirm_plan () {
    const ret = this.input.readMessageBegin();
    const mtype = ret.mtype;
    if (mtype == Thrift.MessageType.EXCEPTION) {
      const x = new Thrift.TApplicationException();
      x.read(this.input);
      this.input.readMessageEnd();
      throw x;
    }
    const result = new stuff_plan_management_multi_confirm_plan_result();
    result.read(this.input);
    this.input.readMessageEnd();

    if (null !== result.e) {
      throw result.e;
    }
    if (null !== result.success) {
      return result.success;
    }
    throw 'multi_confirm_plan failed: unknown result';
  }
};
