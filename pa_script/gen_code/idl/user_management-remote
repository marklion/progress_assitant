#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from idl import user_management
from idl.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  user_info get_user_info(string ssid)')
    print('  string user_login(string code)')
    print('  bool update_user_info(user_info info, string ssid, string verify_code)')
    print('  void logff_user(string ssid)')
    print('   get_bound_vichele(string ssid, bool main_vichele)')
    print('  bool bind_new_vichele(string ssid, string vichele, bool main_vichele)')
    print('  void remove_vichele(string ssid, i64 id, bool main_vichele)')
    print('  bool update_logo(string content, string ssid)')
    print('  string get_customer_info(i64 user_id)')
    print('  bool is_admin(string ssid)')
    print('  string get_wx_api_signature(i64 timestamp, string nonceStr, string url)')
    print('   get_bound_driver_info(string ssid)')
    print('  bool bind_new_driver(string ssid, driver_info driver)')
    print('  void remove_driver(string ssid, i64 id)')
    print('  bool send_sms_verify(string ssid, string phone)')
    print('  string get_user_email(string ssid)')
    print('  bool has_apply(string ssid)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = user_management.Client(protocol)
transport.open()

if cmd == 'get_user_info':
    if len(args) != 1:
        print('get_user_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_user_info(args[0],))

elif cmd == 'user_login':
    if len(args) != 1:
        print('user_login requires 1 args')
        sys.exit(1)
    pp.pprint(client.user_login(args[0],))

elif cmd == 'update_user_info':
    if len(args) != 3:
        print('update_user_info requires 3 args')
        sys.exit(1)
    pp.pprint(client.update_user_info(eval(args[0]), args[1], args[2],))

elif cmd == 'logff_user':
    if len(args) != 1:
        print('logff_user requires 1 args')
        sys.exit(1)
    pp.pprint(client.logff_user(args[0],))

elif cmd == 'get_bound_vichele':
    if len(args) != 2:
        print('get_bound_vichele requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_bound_vichele(args[0], eval(args[1]),))

elif cmd == 'bind_new_vichele':
    if len(args) != 3:
        print('bind_new_vichele requires 3 args')
        sys.exit(1)
    pp.pprint(client.bind_new_vichele(args[0], args[1], eval(args[2]),))

elif cmd == 'remove_vichele':
    if len(args) != 3:
        print('remove_vichele requires 3 args')
        sys.exit(1)
    pp.pprint(client.remove_vichele(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'update_logo':
    if len(args) != 2:
        print('update_logo requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_logo(args[0], args[1],))

elif cmd == 'get_customer_info':
    if len(args) != 1:
        print('get_customer_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_customer_info(eval(args[0]),))

elif cmd == 'is_admin':
    if len(args) != 1:
        print('is_admin requires 1 args')
        sys.exit(1)
    pp.pprint(client.is_admin(args[0],))

elif cmd == 'get_wx_api_signature':
    if len(args) != 3:
        print('get_wx_api_signature requires 3 args')
        sys.exit(1)
    pp.pprint(client.get_wx_api_signature(eval(args[0]), args[1], args[2],))

elif cmd == 'get_bound_driver_info':
    if len(args) != 1:
        print('get_bound_driver_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_bound_driver_info(args[0],))

elif cmd == 'bind_new_driver':
    if len(args) != 2:
        print('bind_new_driver requires 2 args')
        sys.exit(1)
    pp.pprint(client.bind_new_driver(args[0], eval(args[1]),))

elif cmd == 'remove_driver':
    if len(args) != 2:
        print('remove_driver requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_driver(args[0], eval(args[1]),))

elif cmd == 'send_sms_verify':
    if len(args) != 2:
        print('send_sms_verify requires 2 args')
        sys.exit(1)
    pp.pprint(client.send_sms_verify(args[0], args[1],))

elif cmd == 'get_user_email':
    if len(args) != 1:
        print('get_user_email requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_user_email(args[0],))

elif cmd == 'has_apply':
    if len(args) != 1:
        print('has_apply requires 1 args')
        sys.exit(1)
    pp.pprint(client.has_apply(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
