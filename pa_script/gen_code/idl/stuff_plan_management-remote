#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from idl import stuff_plan_management
from idl.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  i64 create_plan(stuff_plan plan, string ssid, string proxy_company)')
    print('   get_created_plan(string ssid, i64 anchor)')
    print('   get_company_plan(string ssid, i64 anchor)')
    print('  stuff_plan get_plan(i64 plan_id)')
    print('  bool update_plan(stuff_plan plan, string ssid)')
    print('  bool confirm_plan(i64 plan_id, string ssid, string comment)')
    print('  bool confirm_pay(i64 plan_id, string ssid, string comment)')
    print('  bool confirm_deliver(i64 plan_id, string ssid,  deliver_infos, string reason)')
    print('  string export_plan(string ssid,  plan_ids)')
    print('  bool except_close(i64 plan_id, string ssid, string reason)')
    print('  string verify_plan(stuff_plan plan, string ssid)')
    print('  bool send_file_via_email(string ssid, string filepath, string email)')
    print('  bool reject_plan(i64 plan_id, string ssid, string reject_reason)')
    print('   search_plan_by_driver_phone(string phone)')
    print('   get_status_rule(i64 plan_id)')
    print('   get_change_rule(string ssid, i64 plan_id)')
    print('  void clean_unclose_plan()')
    print('   get_today_statistics(string ssid)')
    print('  bool plan_created_by_user(string ssid, i64 plan_id)')
    print('  string export_plan_by_plan_date(string ssid, string plan_date, string create_date)')
    print('  string export_plan_by_create_date(string ssid, i64 begin_date, i64 end_date)')
    print('   search_plan_by_vichele_number(string ssid, string vichele_number)')
    print('   get_tomorrow_statistics(string ssid)')
    print('  company_plan_brief get_company_brief(string ssid)')
    print('  bool push_user_pay(string ssid, i64 plan_id)')
    print('  i64 get_count_by_status(string ssid, i64 status)')
    print('  bool cancel_vichele_from_plan(string ssid,  ids)')
    print('  string driver_silent_login(string code)')
    print('  bool driver_silent_send_sms(string driver_phone)')
    print('  string driver_silent_register(string code, string driver_id, string driver_phone, string verify_code)')
    print('  void driver_silent_unregister(string silent_id)')
    print('  bool verify_driver_silent_login(string silent_id)')
    print('   get_today_driver_info(string silent_id)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = stuff_plan_management.Client(protocol)
transport.open()

if cmd == 'create_plan':
    if len(args) != 3:
        print('create_plan requires 3 args')
        sys.exit(1)
    pp.pprint(client.create_plan(eval(args[0]), args[1], args[2],))

elif cmd == 'get_created_plan':
    if len(args) != 2:
        print('get_created_plan requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_created_plan(args[0], eval(args[1]),))

elif cmd == 'get_company_plan':
    if len(args) != 2:
        print('get_company_plan requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_company_plan(args[0], eval(args[1]),))

elif cmd == 'get_plan':
    if len(args) != 1:
        print('get_plan requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_plan(eval(args[0]),))

elif cmd == 'update_plan':
    if len(args) != 2:
        print('update_plan requires 2 args')
        sys.exit(1)
    pp.pprint(client.update_plan(eval(args[0]), args[1],))

elif cmd == 'confirm_plan':
    if len(args) != 3:
        print('confirm_plan requires 3 args')
        sys.exit(1)
    pp.pprint(client.confirm_plan(eval(args[0]), args[1], args[2],))

elif cmd == 'confirm_pay':
    if len(args) != 3:
        print('confirm_pay requires 3 args')
        sys.exit(1)
    pp.pprint(client.confirm_pay(eval(args[0]), args[1], args[2],))

elif cmd == 'confirm_deliver':
    if len(args) != 4:
        print('confirm_deliver requires 4 args')
        sys.exit(1)
    pp.pprint(client.confirm_deliver(eval(args[0]), args[1], eval(args[2]), args[3],))

elif cmd == 'export_plan':
    if len(args) != 2:
        print('export_plan requires 2 args')
        sys.exit(1)
    pp.pprint(client.export_plan(args[0], eval(args[1]),))

elif cmd == 'except_close':
    if len(args) != 3:
        print('except_close requires 3 args')
        sys.exit(1)
    pp.pprint(client.except_close(eval(args[0]), args[1], args[2],))

elif cmd == 'verify_plan':
    if len(args) != 2:
        print('verify_plan requires 2 args')
        sys.exit(1)
    pp.pprint(client.verify_plan(eval(args[0]), args[1],))

elif cmd == 'send_file_via_email':
    if len(args) != 3:
        print('send_file_via_email requires 3 args')
        sys.exit(1)
    pp.pprint(client.send_file_via_email(args[0], args[1], args[2],))

elif cmd == 'reject_plan':
    if len(args) != 3:
        print('reject_plan requires 3 args')
        sys.exit(1)
    pp.pprint(client.reject_plan(eval(args[0]), args[1], args[2],))

elif cmd == 'search_plan_by_driver_phone':
    if len(args) != 1:
        print('search_plan_by_driver_phone requires 1 args')
        sys.exit(1)
    pp.pprint(client.search_plan_by_driver_phone(args[0],))

elif cmd == 'get_status_rule':
    if len(args) != 1:
        print('get_status_rule requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_status_rule(eval(args[0]),))

elif cmd == 'get_change_rule':
    if len(args) != 2:
        print('get_change_rule requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_change_rule(args[0], eval(args[1]),))

elif cmd == 'clean_unclose_plan':
    if len(args) != 0:
        print('clean_unclose_plan requires 0 args')
        sys.exit(1)
    pp.pprint(client.clean_unclose_plan())

elif cmd == 'get_today_statistics':
    if len(args) != 1:
        print('get_today_statistics requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_today_statistics(args[0],))

elif cmd == 'plan_created_by_user':
    if len(args) != 2:
        print('plan_created_by_user requires 2 args')
        sys.exit(1)
    pp.pprint(client.plan_created_by_user(args[0], eval(args[1]),))

elif cmd == 'export_plan_by_plan_date':
    if len(args) != 3:
        print('export_plan_by_plan_date requires 3 args')
        sys.exit(1)
    pp.pprint(client.export_plan_by_plan_date(args[0], args[1], args[2],))

elif cmd == 'export_plan_by_create_date':
    if len(args) != 3:
        print('export_plan_by_create_date requires 3 args')
        sys.exit(1)
    pp.pprint(client.export_plan_by_create_date(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'search_plan_by_vichele_number':
    if len(args) != 2:
        print('search_plan_by_vichele_number requires 2 args')
        sys.exit(1)
    pp.pprint(client.search_plan_by_vichele_number(args[0], args[1],))

elif cmd == 'get_tomorrow_statistics':
    if len(args) != 1:
        print('get_tomorrow_statistics requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_tomorrow_statistics(args[0],))

elif cmd == 'get_company_brief':
    if len(args) != 1:
        print('get_company_brief requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_company_brief(args[0],))

elif cmd == 'push_user_pay':
    if len(args) != 2:
        print('push_user_pay requires 2 args')
        sys.exit(1)
    pp.pprint(client.push_user_pay(args[0], eval(args[1]),))

elif cmd == 'get_count_by_status':
    if len(args) != 2:
        print('get_count_by_status requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_count_by_status(args[0], eval(args[1]),))

elif cmd == 'cancel_vichele_from_plan':
    if len(args) != 2:
        print('cancel_vichele_from_plan requires 2 args')
        sys.exit(1)
    pp.pprint(client.cancel_vichele_from_plan(args[0], eval(args[1]),))

elif cmd == 'driver_silent_login':
    if len(args) != 1:
        print('driver_silent_login requires 1 args')
        sys.exit(1)
    pp.pprint(client.driver_silent_login(args[0],))

elif cmd == 'driver_silent_send_sms':
    if len(args) != 1:
        print('driver_silent_send_sms requires 1 args')
        sys.exit(1)
    pp.pprint(client.driver_silent_send_sms(args[0],))

elif cmd == 'driver_silent_register':
    if len(args) != 4:
        print('driver_silent_register requires 4 args')
        sys.exit(1)
    pp.pprint(client.driver_silent_register(args[0], args[1], args[2], args[3],))

elif cmd == 'driver_silent_unregister':
    if len(args) != 1:
        print('driver_silent_unregister requires 1 args')
        sys.exit(1)
    pp.pprint(client.driver_silent_unregister(args[0],))

elif cmd == 'verify_driver_silent_login':
    if len(args) != 1:
        print('verify_driver_silent_login requires 1 args')
        sys.exit(1)
    pp.pprint(client.verify_driver_silent_login(args[0],))

elif cmd == 'get_today_driver_info':
    if len(args) != 1:
        print('get_today_driver_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_today_driver_info(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
