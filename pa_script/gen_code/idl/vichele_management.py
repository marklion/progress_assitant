#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys
import logging
from .ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
all_structs = []


class Iface(object):
    def create_vichele_info(self, open_id, vichele_info):
        """
        Parameters:
         - open_id
         - vichele_info

        """
        pass

    def delete_vichele_info(self, open_id, vichele_id):
        """
        Parameters:
         - open_id
         - vichele_id

        """
        pass

    def update_vichele_info(self, open_id, vichele_info):
        """
        Parameters:
         - open_id
         - vichele_info

        """
        pass

    def get_created_vichele_info(self, open_id, ancher, query_key):
        """
        Parameters:
         - open_id
         - ancher
         - query_key

        """
        pass

    def silent_login(self, code):
        """
        Parameters:
         - code

        """
        pass

    def verify_login(self, open_id):
        """
        Parameters:
         - open_id

        """
        pass

    def get_silent_user_info(self, open_id):
        """
        Parameters:
         - open_id

        """
        pass

    def set_silent_user_info(self, open_id, info):
        """
        Parameters:
         - open_id
         - info

        """
        pass

    def get_input_history(self, open_id, search_key):
        """
        Parameters:
         - open_id
         - search_key

        """
        pass

    def get_company_vichele_info(self, ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number):
        """
        Parameters:
         - ssid
         - anchor
         - status
         - enter_date
         - stuff_name
         - supplier_name
         - vichele_number

        """
        pass

    def confirm_vichele(self, ssid, info, company_for_select, all_select, enter_date, stuff_name, supplier_name):
        """
        Parameters:
         - ssid
         - info
         - company_for_select
         - all_select
         - enter_date
         - stuff_name
         - supplier_name

        """
        pass

    def cancel_vichele(self, ssid, info, all_select, enter_date, stuff_name, supplier_name):
        """
        Parameters:
         - ssid
         - info
         - all_select
         - enter_date
         - stuff_name
         - supplier_name

        """
        pass

    def create_vichele_team(self, open_id, team_info):
        """
        Parameters:
         - open_id
         - team_info

        """
        pass

    def update_vichele_team(self, open_id, team_info):
        """
        Parameters:
         - open_id
         - team_info

        """
        pass

    def del_vichele_team(self, open_id, team_id):
        """
        Parameters:
         - open_id
         - team_id

        """
        pass

    def get_all_vichele_team(self, open_id):
        """
        Parameters:
         - open_id

        """
        pass

    def get_vichele_team(self, open_id, team_id):
        """
        Parameters:
         - open_id
         - team_id

        """
        pass

    def change_company_name(self, ssid, vichele_id, company_name):
        """
        Parameters:
         - ssid
         - vichele_id
         - company_name

        """
        pass

    def fill_company_name(self, open_id, vichele_id, company_name):
        """
        Parameters:
         - open_id
         - vichele_id
         - company_name

        """
        pass

    def company_history(self, ssid):
        """
        Parameters:
         - ssid

        """
        pass

    def add_supplier(self, ssid, supplier_info):
        """
        Parameters:
         - ssid
         - supplier_info

        """
        pass

    def update_supplier(self, ssid, supplier_info):
        """
        Parameters:
         - ssid
         - supplier_info

        """
        pass

    def del_supplier(self, ssid, supplier_id):
        """
        Parameters:
         - ssid
         - supplier_id

        """
        pass

    def get_all_supplier(self, ssid):
        """
        Parameters:
         - ssid

        """
        pass

    def smart_assign(self, ssid, vichele_info):
        """
        Parameters:
         - ssid
         - vichele_info

        """
        pass

    def get_max_vichele_by_supplier(self, supplier, company):
        """
        Parameters:
         - supplier
         - company

        """
        pass

    def fill_tmd(self, open_id, vichele_id, tmd_no):
        """
        Parameters:
         - open_id
         - vichele_id
         - tmd_no

        """
        pass

    def fill_enter_weight(self, open_id, vichele_id, enter_weight):
        """
        Parameters:
         - open_id
         - vichele_id
         - enter_weight

        """
        pass

    def fill_weight_attach(self, open_id, vichele_id, weight_attach):
        """
        Parameters:
         - open_id
         - vichele_id
         - weight_attach

        """
        pass

    def add_exception(self, ssid, stuff_name):
        """
        Parameters:
         - ssid
         - stuff_name

        """
        pass

    def del_exception(self, ssid, stuff_name):
        """
        Parameters:
         - ssid
         - stuff_name

        """
        pass

    def get_all_exceptions(self, ssid):
        """
        Parameters:
         - ssid

        """
        pass

    def get_company_brief(self, ssid):
        """
        Parameters:
         - ssid

        """
        pass

    def get_statistics(self, ssid):
        """
        Parameters:
         - ssid

        """
        pass

    def change_price(self, ssid, info, all_select, enter_date, stuff_name, supplier_name, new_price):
        """
        Parameters:
         - ssid
         - info
         - all_select
         - enter_date
         - stuff_name
         - supplier_name
         - new_price

        """
        pass

    def get_bound_stuff(self, company_name, destination_company):
        """
        Parameters:
         - company_name
         - destination_company

        """
        pass


class Client(Iface):
    def __init__(self, iprot, oprot=None):
        self._iprot = self._oprot = iprot
        if oprot is not None:
            self._oprot = oprot
        self._seqid = 0

    def create_vichele_info(self, open_id, vichele_info):
        """
        Parameters:
         - open_id
         - vichele_info

        """
        self.send_create_vichele_info(open_id, vichele_info)
        return self.recv_create_vichele_info()

    def send_create_vichele_info(self, open_id, vichele_info):
        self._oprot.writeMessageBegin('create_vichele_info', TMessageType.CALL, self._seqid)
        args = create_vichele_info_args()
        args.open_id = open_id
        args.vichele_info = vichele_info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_vichele_info(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_vichele_info_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_vichele_info failed: unknown result")

    def delete_vichele_info(self, open_id, vichele_id):
        """
        Parameters:
         - open_id
         - vichele_id

        """
        self.send_delete_vichele_info(open_id, vichele_id)
        return self.recv_delete_vichele_info()

    def send_delete_vichele_info(self, open_id, vichele_id):
        self._oprot.writeMessageBegin('delete_vichele_info', TMessageType.CALL, self._seqid)
        args = delete_vichele_info_args()
        args.open_id = open_id
        args.vichele_id = vichele_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_delete_vichele_info(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = delete_vichele_info_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "delete_vichele_info failed: unknown result")

    def update_vichele_info(self, open_id, vichele_info):
        """
        Parameters:
         - open_id
         - vichele_info

        """
        self.send_update_vichele_info(open_id, vichele_info)
        return self.recv_update_vichele_info()

    def send_update_vichele_info(self, open_id, vichele_info):
        self._oprot.writeMessageBegin('update_vichele_info', TMessageType.CALL, self._seqid)
        args = update_vichele_info_args()
        args.open_id = open_id
        args.vichele_info = vichele_info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_vichele_info(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_vichele_info_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_vichele_info failed: unknown result")

    def get_created_vichele_info(self, open_id, ancher, query_key):
        """
        Parameters:
         - open_id
         - ancher
         - query_key

        """
        self.send_get_created_vichele_info(open_id, ancher, query_key)
        return self.recv_get_created_vichele_info()

    def send_get_created_vichele_info(self, open_id, ancher, query_key):
        self._oprot.writeMessageBegin('get_created_vichele_info', TMessageType.CALL, self._seqid)
        args = get_created_vichele_info_args()
        args.open_id = open_id
        args.ancher = ancher
        args.query_key = query_key
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_created_vichele_info(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_created_vichele_info_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_created_vichele_info failed: unknown result")

    def silent_login(self, code):
        """
        Parameters:
         - code

        """
        self.send_silent_login(code)
        return self.recv_silent_login()

    def send_silent_login(self, code):
        self._oprot.writeMessageBegin('silent_login', TMessageType.CALL, self._seqid)
        args = silent_login_args()
        args.code = code
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_silent_login(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = silent_login_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "silent_login failed: unknown result")

    def verify_login(self, open_id):
        """
        Parameters:
         - open_id

        """
        self.send_verify_login(open_id)
        return self.recv_verify_login()

    def send_verify_login(self, open_id):
        self._oprot.writeMessageBegin('verify_login', TMessageType.CALL, self._seqid)
        args = verify_login_args()
        args.open_id = open_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_verify_login(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = verify_login_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "verify_login failed: unknown result")

    def get_silent_user_info(self, open_id):
        """
        Parameters:
         - open_id

        """
        self.send_get_silent_user_info(open_id)
        return self.recv_get_silent_user_info()

    def send_get_silent_user_info(self, open_id):
        self._oprot.writeMessageBegin('get_silent_user_info', TMessageType.CALL, self._seqid)
        args = get_silent_user_info_args()
        args.open_id = open_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_silent_user_info(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_silent_user_info_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_silent_user_info failed: unknown result")

    def set_silent_user_info(self, open_id, info):
        """
        Parameters:
         - open_id
         - info

        """
        self.send_set_silent_user_info(open_id, info)
        self.recv_set_silent_user_info()

    def send_set_silent_user_info(self, open_id, info):
        self._oprot.writeMessageBegin('set_silent_user_info', TMessageType.CALL, self._seqid)
        args = set_silent_user_info_args()
        args.open_id = open_id
        args.info = info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_set_silent_user_info(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = set_silent_user_info_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.e is not None:
            raise result.e
        return

    def get_input_history(self, open_id, search_key):
        """
        Parameters:
         - open_id
         - search_key

        """
        self.send_get_input_history(open_id, search_key)
        return self.recv_get_input_history()

    def send_get_input_history(self, open_id, search_key):
        self._oprot.writeMessageBegin('get_input_history', TMessageType.CALL, self._seqid)
        args = get_input_history_args()
        args.open_id = open_id
        args.search_key = search_key
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_input_history(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_input_history_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_input_history failed: unknown result")

    def get_company_vichele_info(self, ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number):
        """
        Parameters:
         - ssid
         - anchor
         - status
         - enter_date
         - stuff_name
         - supplier_name
         - vichele_number

        """
        self.send_get_company_vichele_info(ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number)
        return self.recv_get_company_vichele_info()

    def send_get_company_vichele_info(self, ssid, anchor, status, enter_date, stuff_name, supplier_name, vichele_number):
        self._oprot.writeMessageBegin('get_company_vichele_info', TMessageType.CALL, self._seqid)
        args = get_company_vichele_info_args()
        args.ssid = ssid
        args.anchor = anchor
        args.status = status
        args.enter_date = enter_date
        args.stuff_name = stuff_name
        args.supplier_name = supplier_name
        args.vichele_number = vichele_number
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_company_vichele_info(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_company_vichele_info_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_company_vichele_info failed: unknown result")

    def confirm_vichele(self, ssid, info, company_for_select, all_select, enter_date, stuff_name, supplier_name):
        """
        Parameters:
         - ssid
         - info
         - company_for_select
         - all_select
         - enter_date
         - stuff_name
         - supplier_name

        """
        self.send_confirm_vichele(ssid, info, company_for_select, all_select, enter_date, stuff_name, supplier_name)
        return self.recv_confirm_vichele()

    def send_confirm_vichele(self, ssid, info, company_for_select, all_select, enter_date, stuff_name, supplier_name):
        self._oprot.writeMessageBegin('confirm_vichele', TMessageType.CALL, self._seqid)
        args = confirm_vichele_args()
        args.ssid = ssid
        args.info = info
        args.company_for_select = company_for_select
        args.all_select = all_select
        args.enter_date = enter_date
        args.stuff_name = stuff_name
        args.supplier_name = supplier_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_confirm_vichele(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = confirm_vichele_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "confirm_vichele failed: unknown result")

    def cancel_vichele(self, ssid, info, all_select, enter_date, stuff_name, supplier_name):
        """
        Parameters:
         - ssid
         - info
         - all_select
         - enter_date
         - stuff_name
         - supplier_name

        """
        self.send_cancel_vichele(ssid, info, all_select, enter_date, stuff_name, supplier_name)
        return self.recv_cancel_vichele()

    def send_cancel_vichele(self, ssid, info, all_select, enter_date, stuff_name, supplier_name):
        self._oprot.writeMessageBegin('cancel_vichele', TMessageType.CALL, self._seqid)
        args = cancel_vichele_args()
        args.ssid = ssid
        args.info = info
        args.all_select = all_select
        args.enter_date = enter_date
        args.stuff_name = stuff_name
        args.supplier_name = supplier_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_cancel_vichele(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = cancel_vichele_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "cancel_vichele failed: unknown result")

    def create_vichele_team(self, open_id, team_info):
        """
        Parameters:
         - open_id
         - team_info

        """
        self.send_create_vichele_team(open_id, team_info)
        return self.recv_create_vichele_team()

    def send_create_vichele_team(self, open_id, team_info):
        self._oprot.writeMessageBegin('create_vichele_team', TMessageType.CALL, self._seqid)
        args = create_vichele_team_args()
        args.open_id = open_id
        args.team_info = team_info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_create_vichele_team(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = create_vichele_team_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "create_vichele_team failed: unknown result")

    def update_vichele_team(self, open_id, team_info):
        """
        Parameters:
         - open_id
         - team_info

        """
        self.send_update_vichele_team(open_id, team_info)
        return self.recv_update_vichele_team()

    def send_update_vichele_team(self, open_id, team_info):
        self._oprot.writeMessageBegin('update_vichele_team', TMessageType.CALL, self._seqid)
        args = update_vichele_team_args()
        args.open_id = open_id
        args.team_info = team_info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_vichele_team(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_vichele_team_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_vichele_team failed: unknown result")

    def del_vichele_team(self, open_id, team_id):
        """
        Parameters:
         - open_id
         - team_id

        """
        self.send_del_vichele_team(open_id, team_id)
        return self.recv_del_vichele_team()

    def send_del_vichele_team(self, open_id, team_id):
        self._oprot.writeMessageBegin('del_vichele_team', TMessageType.CALL, self._seqid)
        args = del_vichele_team_args()
        args.open_id = open_id
        args.team_id = team_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_del_vichele_team(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = del_vichele_team_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "del_vichele_team failed: unknown result")

    def get_all_vichele_team(self, open_id):
        """
        Parameters:
         - open_id

        """
        self.send_get_all_vichele_team(open_id)
        return self.recv_get_all_vichele_team()

    def send_get_all_vichele_team(self, open_id):
        self._oprot.writeMessageBegin('get_all_vichele_team', TMessageType.CALL, self._seqid)
        args = get_all_vichele_team_args()
        args.open_id = open_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_all_vichele_team(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_all_vichele_team_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_all_vichele_team failed: unknown result")

    def get_vichele_team(self, open_id, team_id):
        """
        Parameters:
         - open_id
         - team_id

        """
        self.send_get_vichele_team(open_id, team_id)
        return self.recv_get_vichele_team()

    def send_get_vichele_team(self, open_id, team_id):
        self._oprot.writeMessageBegin('get_vichele_team', TMessageType.CALL, self._seqid)
        args = get_vichele_team_args()
        args.open_id = open_id
        args.team_id = team_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_vichele_team(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_vichele_team_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_vichele_team failed: unknown result")

    def change_company_name(self, ssid, vichele_id, company_name):
        """
        Parameters:
         - ssid
         - vichele_id
         - company_name

        """
        self.send_change_company_name(ssid, vichele_id, company_name)
        return self.recv_change_company_name()

    def send_change_company_name(self, ssid, vichele_id, company_name):
        self._oprot.writeMessageBegin('change_company_name', TMessageType.CALL, self._seqid)
        args = change_company_name_args()
        args.ssid = ssid
        args.vichele_id = vichele_id
        args.company_name = company_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_change_company_name(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = change_company_name_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "change_company_name failed: unknown result")

    def fill_company_name(self, open_id, vichele_id, company_name):
        """
        Parameters:
         - open_id
         - vichele_id
         - company_name

        """
        self.send_fill_company_name(open_id, vichele_id, company_name)
        return self.recv_fill_company_name()

    def send_fill_company_name(self, open_id, vichele_id, company_name):
        self._oprot.writeMessageBegin('fill_company_name', TMessageType.CALL, self._seqid)
        args = fill_company_name_args()
        args.open_id = open_id
        args.vichele_id = vichele_id
        args.company_name = company_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fill_company_name(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fill_company_name_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fill_company_name failed: unknown result")

    def company_history(self, ssid):
        """
        Parameters:
         - ssid

        """
        self.send_company_history(ssid)
        return self.recv_company_history()

    def send_company_history(self, ssid):
        self._oprot.writeMessageBegin('company_history', TMessageType.CALL, self._seqid)
        args = company_history_args()
        args.ssid = ssid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_company_history(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = company_history_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "company_history failed: unknown result")

    def add_supplier(self, ssid, supplier_info):
        """
        Parameters:
         - ssid
         - supplier_info

        """
        self.send_add_supplier(ssid, supplier_info)
        return self.recv_add_supplier()

    def send_add_supplier(self, ssid, supplier_info):
        self._oprot.writeMessageBegin('add_supplier', TMessageType.CALL, self._seqid)
        args = add_supplier_args()
        args.ssid = ssid
        args.supplier_info = supplier_info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_supplier(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_supplier_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_supplier failed: unknown result")

    def update_supplier(self, ssid, supplier_info):
        """
        Parameters:
         - ssid
         - supplier_info

        """
        self.send_update_supplier(ssid, supplier_info)
        return self.recv_update_supplier()

    def send_update_supplier(self, ssid, supplier_info):
        self._oprot.writeMessageBegin('update_supplier', TMessageType.CALL, self._seqid)
        args = update_supplier_args()
        args.ssid = ssid
        args.supplier_info = supplier_info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_update_supplier(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = update_supplier_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "update_supplier failed: unknown result")

    def del_supplier(self, ssid, supplier_id):
        """
        Parameters:
         - ssid
         - supplier_id

        """
        self.send_del_supplier(ssid, supplier_id)
        return self.recv_del_supplier()

    def send_del_supplier(self, ssid, supplier_id):
        self._oprot.writeMessageBegin('del_supplier', TMessageType.CALL, self._seqid)
        args = del_supplier_args()
        args.ssid = ssid
        args.supplier_id = supplier_id
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_del_supplier(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = del_supplier_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "del_supplier failed: unknown result")

    def get_all_supplier(self, ssid):
        """
        Parameters:
         - ssid

        """
        self.send_get_all_supplier(ssid)
        return self.recv_get_all_supplier()

    def send_get_all_supplier(self, ssid):
        self._oprot.writeMessageBegin('get_all_supplier', TMessageType.CALL, self._seqid)
        args = get_all_supplier_args()
        args.ssid = ssid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_all_supplier(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_all_supplier_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_all_supplier failed: unknown result")

    def smart_assign(self, ssid, vichele_info):
        """
        Parameters:
         - ssid
         - vichele_info

        """
        self.send_smart_assign(ssid, vichele_info)
        return self.recv_smart_assign()

    def send_smart_assign(self, ssid, vichele_info):
        self._oprot.writeMessageBegin('smart_assign', TMessageType.CALL, self._seqid)
        args = smart_assign_args()
        args.ssid = ssid
        args.vichele_info = vichele_info
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_smart_assign(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = smart_assign_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "smart_assign failed: unknown result")

    def get_max_vichele_by_supplier(self, supplier, company):
        """
        Parameters:
         - supplier
         - company

        """
        self.send_get_max_vichele_by_supplier(supplier, company)
        return self.recv_get_max_vichele_by_supplier()

    def send_get_max_vichele_by_supplier(self, supplier, company):
        self._oprot.writeMessageBegin('get_max_vichele_by_supplier', TMessageType.CALL, self._seqid)
        args = get_max_vichele_by_supplier_args()
        args.supplier = supplier
        args.company = company
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_max_vichele_by_supplier(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_max_vichele_by_supplier_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_max_vichele_by_supplier failed: unknown result")

    def fill_tmd(self, open_id, vichele_id, tmd_no):
        """
        Parameters:
         - open_id
         - vichele_id
         - tmd_no

        """
        self.send_fill_tmd(open_id, vichele_id, tmd_no)
        return self.recv_fill_tmd()

    def send_fill_tmd(self, open_id, vichele_id, tmd_no):
        self._oprot.writeMessageBegin('fill_tmd', TMessageType.CALL, self._seqid)
        args = fill_tmd_args()
        args.open_id = open_id
        args.vichele_id = vichele_id
        args.tmd_no = tmd_no
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fill_tmd(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fill_tmd_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fill_tmd failed: unknown result")

    def fill_enter_weight(self, open_id, vichele_id, enter_weight):
        """
        Parameters:
         - open_id
         - vichele_id
         - enter_weight

        """
        self.send_fill_enter_weight(open_id, vichele_id, enter_weight)
        return self.recv_fill_enter_weight()

    def send_fill_enter_weight(self, open_id, vichele_id, enter_weight):
        self._oprot.writeMessageBegin('fill_enter_weight', TMessageType.CALL, self._seqid)
        args = fill_enter_weight_args()
        args.open_id = open_id
        args.vichele_id = vichele_id
        args.enter_weight = enter_weight
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fill_enter_weight(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fill_enter_weight_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fill_enter_weight failed: unknown result")

    def fill_weight_attach(self, open_id, vichele_id, weight_attach):
        """
        Parameters:
         - open_id
         - vichele_id
         - weight_attach

        """
        self.send_fill_weight_attach(open_id, vichele_id, weight_attach)
        return self.recv_fill_weight_attach()

    def send_fill_weight_attach(self, open_id, vichele_id, weight_attach):
        self._oprot.writeMessageBegin('fill_weight_attach', TMessageType.CALL, self._seqid)
        args = fill_weight_attach_args()
        args.open_id = open_id
        args.vichele_id = vichele_id
        args.weight_attach = weight_attach
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_fill_weight_attach(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = fill_weight_attach_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "fill_weight_attach failed: unknown result")

    def add_exception(self, ssid, stuff_name):
        """
        Parameters:
         - ssid
         - stuff_name

        """
        self.send_add_exception(ssid, stuff_name)
        return self.recv_add_exception()

    def send_add_exception(self, ssid, stuff_name):
        self._oprot.writeMessageBegin('add_exception', TMessageType.CALL, self._seqid)
        args = add_exception_args()
        args.ssid = ssid
        args.stuff_name = stuff_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_add_exception(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = add_exception_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "add_exception failed: unknown result")

    def del_exception(self, ssid, stuff_name):
        """
        Parameters:
         - ssid
         - stuff_name

        """
        self.send_del_exception(ssid, stuff_name)
        return self.recv_del_exception()

    def send_del_exception(self, ssid, stuff_name):
        self._oprot.writeMessageBegin('del_exception', TMessageType.CALL, self._seqid)
        args = del_exception_args()
        args.ssid = ssid
        args.stuff_name = stuff_name
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_del_exception(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = del_exception_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "del_exception failed: unknown result")

    def get_all_exceptions(self, ssid):
        """
        Parameters:
         - ssid

        """
        self.send_get_all_exceptions(ssid)
        return self.recv_get_all_exceptions()

    def send_get_all_exceptions(self, ssid):
        self._oprot.writeMessageBegin('get_all_exceptions', TMessageType.CALL, self._seqid)
        args = get_all_exceptions_args()
        args.ssid = ssid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_all_exceptions(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_all_exceptions_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_all_exceptions failed: unknown result")

    def get_company_brief(self, ssid):
        """
        Parameters:
         - ssid

        """
        self.send_get_company_brief(ssid)
        return self.recv_get_company_brief()

    def send_get_company_brief(self, ssid):
        self._oprot.writeMessageBegin('get_company_brief', TMessageType.CALL, self._seqid)
        args = get_company_brief_args()
        args.ssid = ssid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_company_brief(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_company_brief_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_company_brief failed: unknown result")

    def get_statistics(self, ssid):
        """
        Parameters:
         - ssid

        """
        self.send_get_statistics(ssid)
        return self.recv_get_statistics()

    def send_get_statistics(self, ssid):
        self._oprot.writeMessageBegin('get_statistics', TMessageType.CALL, self._seqid)
        args = get_statistics_args()
        args.ssid = ssid
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_statistics(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_statistics_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_statistics failed: unknown result")

    def change_price(self, ssid, info, all_select, enter_date, stuff_name, supplier_name, new_price):
        """
        Parameters:
         - ssid
         - info
         - all_select
         - enter_date
         - stuff_name
         - supplier_name
         - new_price

        """
        self.send_change_price(ssid, info, all_select, enter_date, stuff_name, supplier_name, new_price)
        return self.recv_change_price()

    def send_change_price(self, ssid, info, all_select, enter_date, stuff_name, supplier_name, new_price):
        self._oprot.writeMessageBegin('change_price', TMessageType.CALL, self._seqid)
        args = change_price_args()
        args.ssid = ssid
        args.info = info
        args.all_select = all_select
        args.enter_date = enter_date
        args.stuff_name = stuff_name
        args.supplier_name = supplier_name
        args.new_price = new_price
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_change_price(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = change_price_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "change_price failed: unknown result")

    def get_bound_stuff(self, company_name, destination_company):
        """
        Parameters:
         - company_name
         - destination_company

        """
        self.send_get_bound_stuff(company_name, destination_company)
        return self.recv_get_bound_stuff()

    def send_get_bound_stuff(self, company_name, destination_company):
        self._oprot.writeMessageBegin('get_bound_stuff', TMessageType.CALL, self._seqid)
        args = get_bound_stuff_args()
        args.company_name = company_name
        args.destination_company = destination_company
        args.write(self._oprot)
        self._oprot.writeMessageEnd()
        self._oprot.trans.flush()

    def recv_get_bound_stuff(self):
        iprot = self._iprot
        (fname, mtype, rseqid) = iprot.readMessageBegin()
        if mtype == TMessageType.EXCEPTION:
            x = TApplicationException()
            x.read(iprot)
            iprot.readMessageEnd()
            raise x
        result = get_bound_stuff_result()
        result.read(iprot)
        iprot.readMessageEnd()
        if result.success is not None:
            return result.success
        if result.e is not None:
            raise result.e
        raise TApplicationException(TApplicationException.MISSING_RESULT, "get_bound_stuff failed: unknown result")


class Processor(Iface, TProcessor):
    def __init__(self, handler):
        self._handler = handler
        self._processMap = {}
        self._processMap["create_vichele_info"] = Processor.process_create_vichele_info
        self._processMap["delete_vichele_info"] = Processor.process_delete_vichele_info
        self._processMap["update_vichele_info"] = Processor.process_update_vichele_info
        self._processMap["get_created_vichele_info"] = Processor.process_get_created_vichele_info
        self._processMap["silent_login"] = Processor.process_silent_login
        self._processMap["verify_login"] = Processor.process_verify_login
        self._processMap["get_silent_user_info"] = Processor.process_get_silent_user_info
        self._processMap["set_silent_user_info"] = Processor.process_set_silent_user_info
        self._processMap["get_input_history"] = Processor.process_get_input_history
        self._processMap["get_company_vichele_info"] = Processor.process_get_company_vichele_info
        self._processMap["confirm_vichele"] = Processor.process_confirm_vichele
        self._processMap["cancel_vichele"] = Processor.process_cancel_vichele
        self._processMap["create_vichele_team"] = Processor.process_create_vichele_team
        self._processMap["update_vichele_team"] = Processor.process_update_vichele_team
        self._processMap["del_vichele_team"] = Processor.process_del_vichele_team
        self._processMap["get_all_vichele_team"] = Processor.process_get_all_vichele_team
        self._processMap["get_vichele_team"] = Processor.process_get_vichele_team
        self._processMap["change_company_name"] = Processor.process_change_company_name
        self._processMap["fill_company_name"] = Processor.process_fill_company_name
        self._processMap["company_history"] = Processor.process_company_history
        self._processMap["add_supplier"] = Processor.process_add_supplier
        self._processMap["update_supplier"] = Processor.process_update_supplier
        self._processMap["del_supplier"] = Processor.process_del_supplier
        self._processMap["get_all_supplier"] = Processor.process_get_all_supplier
        self._processMap["smart_assign"] = Processor.process_smart_assign
        self._processMap["get_max_vichele_by_supplier"] = Processor.process_get_max_vichele_by_supplier
        self._processMap["fill_tmd"] = Processor.process_fill_tmd
        self._processMap["fill_enter_weight"] = Processor.process_fill_enter_weight
        self._processMap["fill_weight_attach"] = Processor.process_fill_weight_attach
        self._processMap["add_exception"] = Processor.process_add_exception
        self._processMap["del_exception"] = Processor.process_del_exception
        self._processMap["get_all_exceptions"] = Processor.process_get_all_exceptions
        self._processMap["get_company_brief"] = Processor.process_get_company_brief
        self._processMap["get_statistics"] = Processor.process_get_statistics
        self._processMap["change_price"] = Processor.process_change_price
        self._processMap["get_bound_stuff"] = Processor.process_get_bound_stuff
        self._on_message_begin = None

    def on_message_begin(self, func):
        self._on_message_begin = func

    def process(self, iprot, oprot):
        (name, type, seqid) = iprot.readMessageBegin()
        if self._on_message_begin:
            self._on_message_begin(name, type, seqid)
        if name not in self._processMap:
            iprot.skip(TType.STRUCT)
            iprot.readMessageEnd()
            x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
            oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
            x.write(oprot)
            oprot.writeMessageEnd()
            oprot.trans.flush()
            return
        else:
            self._processMap[name](self, seqid, iprot, oprot)
        return True

    def process_create_vichele_info(self, seqid, iprot, oprot):
        args = create_vichele_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_vichele_info_result()
        try:
            result.success = self._handler.create_vichele_info(args.open_id, args.vichele_info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_vichele_info", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_delete_vichele_info(self, seqid, iprot, oprot):
        args = delete_vichele_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = delete_vichele_info_result()
        try:
            result.success = self._handler.delete_vichele_info(args.open_id, args.vichele_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("delete_vichele_info", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_vichele_info(self, seqid, iprot, oprot):
        args = update_vichele_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_vichele_info_result()
        try:
            result.success = self._handler.update_vichele_info(args.open_id, args.vichele_info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_vichele_info", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_created_vichele_info(self, seqid, iprot, oprot):
        args = get_created_vichele_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_created_vichele_info_result()
        try:
            result.success = self._handler.get_created_vichele_info(args.open_id, args.ancher, args.query_key)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_created_vichele_info", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_silent_login(self, seqid, iprot, oprot):
        args = silent_login_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = silent_login_result()
        try:
            result.success = self._handler.silent_login(args.code)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("silent_login", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_verify_login(self, seqid, iprot, oprot):
        args = verify_login_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = verify_login_result()
        try:
            result.success = self._handler.verify_login(args.open_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("verify_login", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_silent_user_info(self, seqid, iprot, oprot):
        args = get_silent_user_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_silent_user_info_result()
        try:
            result.success = self._handler.get_silent_user_info(args.open_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_silent_user_info", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_set_silent_user_info(self, seqid, iprot, oprot):
        args = set_silent_user_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = set_silent_user_info_result()
        try:
            self._handler.set_silent_user_info(args.open_id, args.info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("set_silent_user_info", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_input_history(self, seqid, iprot, oprot):
        args = get_input_history_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_input_history_result()
        try:
            result.success = self._handler.get_input_history(args.open_id, args.search_key)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_input_history", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_company_vichele_info(self, seqid, iprot, oprot):
        args = get_company_vichele_info_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_company_vichele_info_result()
        try:
            result.success = self._handler.get_company_vichele_info(args.ssid, args.anchor, args.status, args.enter_date, args.stuff_name, args.supplier_name, args.vichele_number)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_company_vichele_info", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_confirm_vichele(self, seqid, iprot, oprot):
        args = confirm_vichele_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = confirm_vichele_result()
        try:
            result.success = self._handler.confirm_vichele(args.ssid, args.info, args.company_for_select, args.all_select, args.enter_date, args.stuff_name, args.supplier_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("confirm_vichele", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_cancel_vichele(self, seqid, iprot, oprot):
        args = cancel_vichele_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = cancel_vichele_result()
        try:
            result.success = self._handler.cancel_vichele(args.ssid, args.info, args.all_select, args.enter_date, args.stuff_name, args.supplier_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("cancel_vichele", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_create_vichele_team(self, seqid, iprot, oprot):
        args = create_vichele_team_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = create_vichele_team_result()
        try:
            result.success = self._handler.create_vichele_team(args.open_id, args.team_info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("create_vichele_team", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_vichele_team(self, seqid, iprot, oprot):
        args = update_vichele_team_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_vichele_team_result()
        try:
            result.success = self._handler.update_vichele_team(args.open_id, args.team_info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_vichele_team", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_del_vichele_team(self, seqid, iprot, oprot):
        args = del_vichele_team_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = del_vichele_team_result()
        try:
            result.success = self._handler.del_vichele_team(args.open_id, args.team_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("del_vichele_team", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_all_vichele_team(self, seqid, iprot, oprot):
        args = get_all_vichele_team_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_all_vichele_team_result()
        try:
            result.success = self._handler.get_all_vichele_team(args.open_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_all_vichele_team", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_vichele_team(self, seqid, iprot, oprot):
        args = get_vichele_team_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_vichele_team_result()
        try:
            result.success = self._handler.get_vichele_team(args.open_id, args.team_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_vichele_team", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_change_company_name(self, seqid, iprot, oprot):
        args = change_company_name_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = change_company_name_result()
        try:
            result.success = self._handler.change_company_name(args.ssid, args.vichele_id, args.company_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("change_company_name", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_fill_company_name(self, seqid, iprot, oprot):
        args = fill_company_name_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fill_company_name_result()
        try:
            result.success = self._handler.fill_company_name(args.open_id, args.vichele_id, args.company_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fill_company_name", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_company_history(self, seqid, iprot, oprot):
        args = company_history_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = company_history_result()
        try:
            result.success = self._handler.company_history(args.ssid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("company_history", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_supplier(self, seqid, iprot, oprot):
        args = add_supplier_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_supplier_result()
        try:
            result.success = self._handler.add_supplier(args.ssid, args.supplier_info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_supplier", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_update_supplier(self, seqid, iprot, oprot):
        args = update_supplier_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = update_supplier_result()
        try:
            result.success = self._handler.update_supplier(args.ssid, args.supplier_info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("update_supplier", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_del_supplier(self, seqid, iprot, oprot):
        args = del_supplier_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = del_supplier_result()
        try:
            result.success = self._handler.del_supplier(args.ssid, args.supplier_id)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("del_supplier", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_all_supplier(self, seqid, iprot, oprot):
        args = get_all_supplier_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_all_supplier_result()
        try:
            result.success = self._handler.get_all_supplier(args.ssid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_all_supplier", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_smart_assign(self, seqid, iprot, oprot):
        args = smart_assign_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = smart_assign_result()
        try:
            result.success = self._handler.smart_assign(args.ssid, args.vichele_info)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("smart_assign", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_max_vichele_by_supplier(self, seqid, iprot, oprot):
        args = get_max_vichele_by_supplier_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_max_vichele_by_supplier_result()
        try:
            result.success = self._handler.get_max_vichele_by_supplier(args.supplier, args.company)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_max_vichele_by_supplier", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_fill_tmd(self, seqid, iprot, oprot):
        args = fill_tmd_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fill_tmd_result()
        try:
            result.success = self._handler.fill_tmd(args.open_id, args.vichele_id, args.tmd_no)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fill_tmd", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_fill_enter_weight(self, seqid, iprot, oprot):
        args = fill_enter_weight_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fill_enter_weight_result()
        try:
            result.success = self._handler.fill_enter_weight(args.open_id, args.vichele_id, args.enter_weight)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fill_enter_weight", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_fill_weight_attach(self, seqid, iprot, oprot):
        args = fill_weight_attach_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = fill_weight_attach_result()
        try:
            result.success = self._handler.fill_weight_attach(args.open_id, args.vichele_id, args.weight_attach)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("fill_weight_attach", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_add_exception(self, seqid, iprot, oprot):
        args = add_exception_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = add_exception_result()
        try:
            result.success = self._handler.add_exception(args.ssid, args.stuff_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("add_exception", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_del_exception(self, seqid, iprot, oprot):
        args = del_exception_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = del_exception_result()
        try:
            result.success = self._handler.del_exception(args.ssid, args.stuff_name)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("del_exception", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_all_exceptions(self, seqid, iprot, oprot):
        args = get_all_exceptions_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_all_exceptions_result()
        try:
            result.success = self._handler.get_all_exceptions(args.ssid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_all_exceptions", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_company_brief(self, seqid, iprot, oprot):
        args = get_company_brief_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_company_brief_result()
        try:
            result.success = self._handler.get_company_brief(args.ssid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_company_brief", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_statistics(self, seqid, iprot, oprot):
        args = get_statistics_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_statistics_result()
        try:
            result.success = self._handler.get_statistics(args.ssid)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_statistics", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_change_price(self, seqid, iprot, oprot):
        args = change_price_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = change_price_result()
        try:
            result.success = self._handler.change_price(args.ssid, args.info, args.all_select, args.enter_date, args.stuff_name, args.supplier_name, args.new_price)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("change_price", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

    def process_get_bound_stuff(self, seqid, iprot, oprot):
        args = get_bound_stuff_args()
        args.read(iprot)
        iprot.readMessageEnd()
        result = get_bound_stuff_result()
        try:
            result.success = self._handler.get_bound_stuff(args.company_name, args.destination_company)
            msg_type = TMessageType.REPLY
        except TTransport.TTransportException:
            raise
        except gen_exp as e:
            msg_type = TMessageType.REPLY
            result.e = e
        except TApplicationException as ex:
            logging.exception('TApplication exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = ex
        except Exception:
            logging.exception('Unexpected exception in handler')
            msg_type = TMessageType.EXCEPTION
            result = TApplicationException(TApplicationException.INTERNAL_ERROR, 'Internal error')
        oprot.writeMessageBegin("get_bound_stuff", msg_type, seqid)
        result.write(oprot)
        oprot.writeMessageEnd()
        oprot.trans.flush()

# HELPER FUNCTIONS AND STRUCTURES


class create_vichele_info_args(object):
    """
    Attributes:
     - open_id
     - vichele_info

    """


    def __init__(self, open_id=None, vichele_info=None,):
        self.open_id = open_id
        self.vichele_info = vichele_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vichele_info = []
                    (_etype262, _size259) = iprot.readListBegin()
                    for _i263 in range(_size259):
                        _elem264 = vichele_stay_alone()
                        _elem264.read(iprot)
                        self.vichele_info.append(_elem264)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_vichele_info_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.vichele_info is not None:
            oprot.writeFieldBegin('vichele_info', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.vichele_info))
            for iter265 in self.vichele_info:
                iter265.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_vichele_info_args)
create_vichele_info_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vichele_info', (TType.STRUCT, [vichele_stay_alone, None], False), None, ),  # 2
)


class create_vichele_info_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_vichele_info_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_vichele_info_result)
create_vichele_info_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class delete_vichele_info_args(object):
    """
    Attributes:
     - open_id
     - vichele_id

    """


    def __init__(self, open_id=None, vichele_id=None,):
        self.open_id = open_id
        self.vichele_id = vichele_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vichele_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_vichele_info_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.vichele_id is not None:
            oprot.writeFieldBegin('vichele_id', TType.I64, 2)
            oprot.writeI64(self.vichele_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_vichele_info_args)
delete_vichele_info_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'vichele_id', None, None, ),  # 2
)


class delete_vichele_info_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('delete_vichele_info_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(delete_vichele_info_result)
delete_vichele_info_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class update_vichele_info_args(object):
    """
    Attributes:
     - open_id
     - vichele_info

    """


    def __init__(self, open_id=None, vichele_info=None,):
        self.open_id = open_id
        self.vichele_info = vichele_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.vichele_info = vichele_stay_alone()
                    self.vichele_info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_vichele_info_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.vichele_info is not None:
            oprot.writeFieldBegin('vichele_info', TType.STRUCT, 2)
            self.vichele_info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_vichele_info_args)
update_vichele_info_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'vichele_info', [vichele_stay_alone, None], None, ),  # 2
)


class update_vichele_info_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_vichele_info_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_vichele_info_result)
update_vichele_info_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_created_vichele_info_args(object):
    """
    Attributes:
     - open_id
     - ancher
     - query_key

    """


    def __init__(self, open_id=None, ancher=None, query_key=None,):
        self.open_id = open_id
        self.ancher = ancher
        self.query_key = query_key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.ancher = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.query_key = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_created_vichele_info_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.ancher is not None:
            oprot.writeFieldBegin('ancher', TType.I64, 2)
            oprot.writeI64(self.ancher)
            oprot.writeFieldEnd()
        if self.query_key is not None:
            oprot.writeFieldBegin('query_key', TType.STRING, 3)
            oprot.writeString(self.query_key.encode('utf-8') if sys.version_info[0] == 2 else self.query_key)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_created_vichele_info_args)
get_created_vichele_info_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'ancher', None, None, ),  # 2
    (3, TType.STRING, 'query_key', 'UTF8', None, ),  # 3
)


class get_created_vichele_info_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype269, _size266) = iprot.readListBegin()
                    for _i270 in range(_size266):
                        _elem271 = vichele_stay_alone()
                        _elem271.read(iprot)
                        self.success.append(_elem271)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_created_vichele_info_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter272 in self.success:
                iter272.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_created_vichele_info_result)
get_created_vichele_info_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [vichele_stay_alone, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class silent_login_args(object):
    """
    Attributes:
     - code

    """


    def __init__(self, code=None,):
        self.code = code

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.code = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('silent_login_args')
        if self.code is not None:
            oprot.writeFieldBegin('code', TType.STRING, 1)
            oprot.writeString(self.code.encode('utf-8') if sys.version_info[0] == 2 else self.code)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(silent_login_args)
silent_login_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'code', 'UTF8', None, ),  # 1
)


class silent_login_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('silent_login_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(silent_login_result)
silent_login_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class verify_login_args(object):
    """
    Attributes:
     - open_id

    """


    def __init__(self, open_id=None,):
        self.open_id = open_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('verify_login_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(verify_login_args)
verify_login_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
)


class verify_login_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('verify_login_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(verify_login_result)
verify_login_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_silent_user_info_args(object):
    """
    Attributes:
     - open_id

    """


    def __init__(self, open_id=None,):
        self.open_id = open_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_silent_user_info_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_silent_user_info_args)
get_silent_user_info_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
)


class get_silent_user_info_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = silent_user_info()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_silent_user_info_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_silent_user_info_result)
get_silent_user_info_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [silent_user_info, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class set_silent_user_info_args(object):
    """
    Attributes:
     - open_id
     - info

    """


    def __init__(self, open_id=None, info=None,):
        self.open_id = open_id
        self.info = info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.info = silent_user_info()
                    self.info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_silent_user_info_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.STRUCT, 2)
            self.info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_silent_user_info_args)
set_silent_user_info_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'info', [silent_user_info, None], None, ),  # 2
)


class set_silent_user_info_result(object):
    """
    Attributes:
     - e

    """


    def __init__(self, e=None,):
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('set_silent_user_info_result')
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(set_silent_user_info_result)
set_silent_user_info_result.thrift_spec = (
    None,  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_input_history_args(object):
    """
    Attributes:
     - open_id
     - search_key

    """


    def __init__(self, open_id=None, search_key=None,):
        self.open_id = open_id
        self.search_key = search_key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.search_key = vichele_stay_alone()
                    self.search_key.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_input_history_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.search_key is not None:
            oprot.writeFieldBegin('search_key', TType.STRUCT, 2)
            self.search_key.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_input_history_args)
get_input_history_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'search_key', [vichele_stay_alone, None], None, ),  # 2
)


class get_input_history_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype276, _size273) = iprot.readListBegin()
                    for _i277 in range(_size273):
                        _elem278 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.success.append(_elem278)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_input_history_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for iter279 in self.success:
                oprot.writeString(iter279.encode('utf-8') if sys.version_info[0] == 2 else iter279)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_input_history_result)
get_input_history_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_company_vichele_info_args(object):
    """
    Attributes:
     - ssid
     - anchor
     - status
     - enter_date
     - stuff_name
     - supplier_name
     - vichele_number

    """


    def __init__(self, ssid=None, anchor=None, status=None, enter_date=None, stuff_name=None, supplier_name=None, vichele_number=None,):
        self.ssid = ssid
        self.anchor = anchor
        self.status = status
        self.enter_date = enter_date
        self.stuff_name = stuff_name
        self.supplier_name = supplier_name
        self.vichele_number = vichele_number

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.anchor = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.status = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.enter_date = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.stuff_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.supplier_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.vichele_number = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_company_vichele_info_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.anchor is not None:
            oprot.writeFieldBegin('anchor', TType.I64, 2)
            oprot.writeI64(self.anchor)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I64, 3)
            oprot.writeI64(self.status)
            oprot.writeFieldEnd()
        if self.enter_date is not None:
            oprot.writeFieldBegin('enter_date', TType.STRING, 4)
            oprot.writeString(self.enter_date.encode('utf-8') if sys.version_info[0] == 2 else self.enter_date)
            oprot.writeFieldEnd()
        if self.stuff_name is not None:
            oprot.writeFieldBegin('stuff_name', TType.STRING, 5)
            oprot.writeString(self.stuff_name.encode('utf-8') if sys.version_info[0] == 2 else self.stuff_name)
            oprot.writeFieldEnd()
        if self.supplier_name is not None:
            oprot.writeFieldBegin('supplier_name', TType.STRING, 6)
            oprot.writeString(self.supplier_name.encode('utf-8') if sys.version_info[0] == 2 else self.supplier_name)
            oprot.writeFieldEnd()
        if self.vichele_number is not None:
            oprot.writeFieldBegin('vichele_number', TType.STRING, 7)
            oprot.writeString(self.vichele_number.encode('utf-8') if sys.version_info[0] == 2 else self.vichele_number)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_company_vichele_info_args)
get_company_vichele_info_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'anchor', None, None, ),  # 2
    (3, TType.I64, 'status', None, None, ),  # 3
    (4, TType.STRING, 'enter_date', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'stuff_name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'supplier_name', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'vichele_number', 'UTF8', None, ),  # 7
)


class get_company_vichele_info_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype283, _size280) = iprot.readListBegin()
                    for _i284 in range(_size280):
                        _elem285 = vichele_stay_alone()
                        _elem285.read(iprot)
                        self.success.append(_elem285)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_company_vichele_info_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter286 in self.success:
                iter286.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_company_vichele_info_result)
get_company_vichele_info_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [vichele_stay_alone, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class confirm_vichele_args(object):
    """
    Attributes:
     - ssid
     - info
     - company_for_select
     - all_select
     - enter_date
     - stuff_name
     - supplier_name

    """


    def __init__(self, ssid=None, info=None, company_for_select=None, all_select=None, enter_date=None, stuff_name=None, supplier_name=None,):
        self.ssid = ssid
        self.info = info
        self.company_for_select = company_for_select
        self.all_select = all_select
        self.enter_date = enter_date
        self.stuff_name = stuff_name
        self.supplier_name = supplier_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.info = []
                    (_etype290, _size287) = iprot.readListBegin()
                    for _i291 in range(_size287):
                        _elem292 = vichele_stay_alone()
                        _elem292.read(iprot)
                        self.info.append(_elem292)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.company_for_select = []
                    (_etype296, _size293) = iprot.readListBegin()
                    for _i297 in range(_size293):
                        _elem298 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.company_for_select.append(_elem298)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.all_select = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.enter_date = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.stuff_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.supplier_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('confirm_vichele_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.info))
            for iter299 in self.info:
                iter299.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.company_for_select is not None:
            oprot.writeFieldBegin('company_for_select', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.company_for_select))
            for iter300 in self.company_for_select:
                oprot.writeString(iter300.encode('utf-8') if sys.version_info[0] == 2 else iter300)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_select is not None:
            oprot.writeFieldBegin('all_select', TType.BOOL, 4)
            oprot.writeBool(self.all_select)
            oprot.writeFieldEnd()
        if self.enter_date is not None:
            oprot.writeFieldBegin('enter_date', TType.STRING, 5)
            oprot.writeString(self.enter_date.encode('utf-8') if sys.version_info[0] == 2 else self.enter_date)
            oprot.writeFieldEnd()
        if self.stuff_name is not None:
            oprot.writeFieldBegin('stuff_name', TType.STRING, 6)
            oprot.writeString(self.stuff_name.encode('utf-8') if sys.version_info[0] == 2 else self.stuff_name)
            oprot.writeFieldEnd()
        if self.supplier_name is not None:
            oprot.writeFieldBegin('supplier_name', TType.STRING, 7)
            oprot.writeString(self.supplier_name.encode('utf-8') if sys.version_info[0] == 2 else self.supplier_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(confirm_vichele_args)
confirm_vichele_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'info', (TType.STRUCT, [vichele_stay_alone, None], False), None, ),  # 2
    (3, TType.LIST, 'company_for_select', (TType.STRING, 'UTF8', False), None, ),  # 3
    (4, TType.BOOL, 'all_select', None, None, ),  # 4
    (5, TType.STRING, 'enter_date', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'stuff_name', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'supplier_name', 'UTF8', None, ),  # 7
)


class confirm_vichele_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('confirm_vichele_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(confirm_vichele_result)
confirm_vichele_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class cancel_vichele_args(object):
    """
    Attributes:
     - ssid
     - info
     - all_select
     - enter_date
     - stuff_name
     - supplier_name

    """


    def __init__(self, ssid=None, info=None, all_select=None, enter_date=None, stuff_name=None, supplier_name=None,):
        self.ssid = ssid
        self.info = info
        self.all_select = all_select
        self.enter_date = enter_date
        self.stuff_name = stuff_name
        self.supplier_name = supplier_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.info = []
                    (_etype304, _size301) = iprot.readListBegin()
                    for _i305 in range(_size301):
                        _elem306 = vichele_stay_alone()
                        _elem306.read(iprot)
                        self.info.append(_elem306)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.all_select = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.enter_date = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.stuff_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.supplier_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cancel_vichele_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.info))
            for iter307 in self.info:
                iter307.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_select is not None:
            oprot.writeFieldBegin('all_select', TType.BOOL, 3)
            oprot.writeBool(self.all_select)
            oprot.writeFieldEnd()
        if self.enter_date is not None:
            oprot.writeFieldBegin('enter_date', TType.STRING, 4)
            oprot.writeString(self.enter_date.encode('utf-8') if sys.version_info[0] == 2 else self.enter_date)
            oprot.writeFieldEnd()
        if self.stuff_name is not None:
            oprot.writeFieldBegin('stuff_name', TType.STRING, 5)
            oprot.writeString(self.stuff_name.encode('utf-8') if sys.version_info[0] == 2 else self.stuff_name)
            oprot.writeFieldEnd()
        if self.supplier_name is not None:
            oprot.writeFieldBegin('supplier_name', TType.STRING, 6)
            oprot.writeString(self.supplier_name.encode('utf-8') if sys.version_info[0] == 2 else self.supplier_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(cancel_vichele_args)
cancel_vichele_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'info', (TType.STRUCT, [vichele_stay_alone, None], False), None, ),  # 2
    (3, TType.BOOL, 'all_select', None, None, ),  # 3
    (4, TType.STRING, 'enter_date', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'stuff_name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'supplier_name', 'UTF8', None, ),  # 6
)


class cancel_vichele_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('cancel_vichele_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(cancel_vichele_result)
cancel_vichele_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class create_vichele_team_args(object):
    """
    Attributes:
     - open_id
     - team_info

    """


    def __init__(self, open_id=None, team_info=None,):
        self.open_id = open_id
        self.team_info = team_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.team_info = vichele_team()
                    self.team_info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_vichele_team_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.team_info is not None:
            oprot.writeFieldBegin('team_info', TType.STRUCT, 2)
            self.team_info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_vichele_team_args)
create_vichele_team_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'team_info', [vichele_team, None], None, ),  # 2
)


class create_vichele_team_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('create_vichele_team_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(create_vichele_team_result)
create_vichele_team_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class update_vichele_team_args(object):
    """
    Attributes:
     - open_id
     - team_info

    """


    def __init__(self, open_id=None, team_info=None,):
        self.open_id = open_id
        self.team_info = team_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.team_info = vichele_team()
                    self.team_info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_vichele_team_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.team_info is not None:
            oprot.writeFieldBegin('team_info', TType.STRUCT, 2)
            self.team_info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_vichele_team_args)
update_vichele_team_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'team_info', [vichele_team, None], None, ),  # 2
)


class update_vichele_team_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_vichele_team_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_vichele_team_result)
update_vichele_team_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class del_vichele_team_args(object):
    """
    Attributes:
     - open_id
     - team_id

    """


    def __init__(self, open_id=None, team_id=None,):
        self.open_id = open_id
        self.team_id = team_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.team_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('del_vichele_team_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.team_id is not None:
            oprot.writeFieldBegin('team_id', TType.I64, 2)
            oprot.writeI64(self.team_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(del_vichele_team_args)
del_vichele_team_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'team_id', None, None, ),  # 2
)


class del_vichele_team_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('del_vichele_team_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(del_vichele_team_result)
del_vichele_team_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_all_vichele_team_args(object):
    """
    Attributes:
     - open_id

    """


    def __init__(self, open_id=None,):
        self.open_id = open_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_all_vichele_team_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_all_vichele_team_args)
get_all_vichele_team_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
)


class get_all_vichele_team_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype311, _size308) = iprot.readListBegin()
                    for _i312 in range(_size308):
                        _elem313 = vichele_team()
                        _elem313.read(iprot)
                        self.success.append(_elem313)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_all_vichele_team_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter314 in self.success:
                iter314.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_all_vichele_team_result)
get_all_vichele_team_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [vichele_team, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_vichele_team_args(object):
    """
    Attributes:
     - open_id
     - team_id

    """


    def __init__(self, open_id=None, team_id=None,):
        self.open_id = open_id
        self.team_id = team_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.team_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_vichele_team_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.team_id is not None:
            oprot.writeFieldBegin('team_id', TType.I64, 2)
            oprot.writeI64(self.team_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_vichele_team_args)
get_vichele_team_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'team_id', None, None, ),  # 2
)


class get_vichele_team_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = vichele_team()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_vichele_team_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_vichele_team_result)
get_vichele_team_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [vichele_team, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class change_company_name_args(object):
    """
    Attributes:
     - ssid
     - vichele_id
     - company_name

    """


    def __init__(self, ssid=None, vichele_id=None, company_name=None,):
        self.ssid = ssid
        self.vichele_id = vichele_id
        self.company_name = company_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vichele_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.company_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('change_company_name_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.vichele_id is not None:
            oprot.writeFieldBegin('vichele_id', TType.I64, 2)
            oprot.writeI64(self.vichele_id)
            oprot.writeFieldEnd()
        if self.company_name is not None:
            oprot.writeFieldBegin('company_name', TType.STRING, 3)
            oprot.writeString(self.company_name.encode('utf-8') if sys.version_info[0] == 2 else self.company_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(change_company_name_args)
change_company_name_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'vichele_id', None, None, ),  # 2
    (3, TType.STRING, 'company_name', 'UTF8', None, ),  # 3
)


class change_company_name_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('change_company_name_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(change_company_name_result)
change_company_name_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class fill_company_name_args(object):
    """
    Attributes:
     - open_id
     - vichele_id
     - company_name

    """


    def __init__(self, open_id=None, vichele_id=None, company_name=None,):
        self.open_id = open_id
        self.vichele_id = vichele_id
        self.company_name = company_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vichele_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.company_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fill_company_name_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.vichele_id is not None:
            oprot.writeFieldBegin('vichele_id', TType.I64, 2)
            oprot.writeI64(self.vichele_id)
            oprot.writeFieldEnd()
        if self.company_name is not None:
            oprot.writeFieldBegin('company_name', TType.STRING, 3)
            oprot.writeString(self.company_name.encode('utf-8') if sys.version_info[0] == 2 else self.company_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fill_company_name_args)
fill_company_name_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'vichele_id', None, None, ),  # 2
    (3, TType.STRING, 'company_name', 'UTF8', None, ),  # 3
)


class fill_company_name_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fill_company_name_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fill_company_name_result)
fill_company_name_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class company_history_args(object):
    """
    Attributes:
     - ssid

    """


    def __init__(self, ssid=None,):
        self.ssid = ssid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('company_history_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(company_history_args)
company_history_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
)


class company_history_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype318, _size315) = iprot.readListBegin()
                    for _i319 in range(_size315):
                        _elem320 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.success.append(_elem320)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('company_history_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for iter321 in self.success:
                oprot.writeString(iter321.encode('utf-8') if sys.version_info[0] == 2 else iter321)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(company_history_result)
company_history_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class add_supplier_args(object):
    """
    Attributes:
     - ssid
     - supplier_info

    """


    def __init__(self, ssid=None, supplier_info=None,):
        self.ssid = ssid
        self.supplier_info = supplier_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.supplier_info = supplier_basic_info()
                    self.supplier_info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_supplier_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.supplier_info is not None:
            oprot.writeFieldBegin('supplier_info', TType.STRUCT, 2)
            self.supplier_info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_supplier_args)
add_supplier_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'supplier_info', [supplier_basic_info, None], None, ),  # 2
)


class add_supplier_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_supplier_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_supplier_result)
add_supplier_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class update_supplier_args(object):
    """
    Attributes:
     - ssid
     - supplier_info

    """


    def __init__(self, ssid=None, supplier_info=None,):
        self.ssid = ssid
        self.supplier_info = supplier_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRUCT:
                    self.supplier_info = supplier_basic_info()
                    self.supplier_info.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_supplier_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.supplier_info is not None:
            oprot.writeFieldBegin('supplier_info', TType.STRUCT, 2)
            self.supplier_info.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_supplier_args)
update_supplier_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.STRUCT, 'supplier_info', [supplier_basic_info, None], None, ),  # 2
)


class update_supplier_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('update_supplier_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(update_supplier_result)
update_supplier_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class del_supplier_args(object):
    """
    Attributes:
     - ssid
     - supplier_id

    """


    def __init__(self, ssid=None, supplier_id=None,):
        self.ssid = ssid
        self.supplier_id = supplier_id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.supplier_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('del_supplier_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.supplier_id is not None:
            oprot.writeFieldBegin('supplier_id', TType.I64, 2)
            oprot.writeI64(self.supplier_id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(del_supplier_args)
del_supplier_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.I64, 'supplier_id', None, None, ),  # 2
)


class del_supplier_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('del_supplier_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(del_supplier_result)
del_supplier_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_all_supplier_args(object):
    """
    Attributes:
     - ssid

    """


    def __init__(self, ssid=None,):
        self.ssid = ssid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_all_supplier_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_all_supplier_args)
get_all_supplier_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
)


class get_all_supplier_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype325, _size322) = iprot.readListBegin()
                    for _i326 in range(_size322):
                        _elem327 = supplier_basic_info()
                        _elem327.read(iprot)
                        self.success.append(_elem327)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_all_supplier_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRUCT, len(self.success))
            for iter328 in self.success:
                iter328.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_all_supplier_result)
get_all_supplier_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT, [supplier_basic_info, None], False), None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class smart_assign_args(object):
    """
    Attributes:
     - ssid
     - vichele_info

    """


    def __init__(self, ssid=None, vichele_info=None,):
        self.ssid = ssid
        self.vichele_info = vichele_info

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.vichele_info = []
                    (_etype332, _size329) = iprot.readListBegin()
                    for _i333 in range(_size329):
                        _elem334 = vichele_stay_alone()
                        _elem334.read(iprot)
                        self.vichele_info.append(_elem334)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('smart_assign_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.vichele_info is not None:
            oprot.writeFieldBegin('vichele_info', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.vichele_info))
            for iter335 in self.vichele_info:
                iter335.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(smart_assign_args)
smart_assign_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'vichele_info', (TType.STRUCT, [vichele_stay_alone, None], False), None, ),  # 2
)


class smart_assign_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('smart_assign_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(smart_assign_result)
smart_assign_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_max_vichele_by_supplier_args(object):
    """
    Attributes:
     - supplier
     - company

    """


    def __init__(self, supplier=None, company=None,):
        self.supplier = supplier
        self.company = company

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.supplier = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.company = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_max_vichele_by_supplier_args')
        if self.supplier is not None:
            oprot.writeFieldBegin('supplier', TType.STRING, 1)
            oprot.writeString(self.supplier.encode('utf-8') if sys.version_info[0] == 2 else self.supplier)
            oprot.writeFieldEnd()
        if self.company is not None:
            oprot.writeFieldBegin('company', TType.STRING, 2)
            oprot.writeString(self.company.encode('utf-8') if sys.version_info[0] == 2 else self.company)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_max_vichele_by_supplier_args)
get_max_vichele_by_supplier_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'supplier', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'company', 'UTF8', None, ),  # 2
)


class get_max_vichele_by_supplier_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.I64:
                    self.success = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_max_vichele_by_supplier_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.I64, 0)
            oprot.writeI64(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_max_vichele_by_supplier_result)
get_max_vichele_by_supplier_result.thrift_spec = (
    (0, TType.I64, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class fill_tmd_args(object):
    """
    Attributes:
     - open_id
     - vichele_id
     - tmd_no

    """


    def __init__(self, open_id=None, vichele_id=None, tmd_no=None,):
        self.open_id = open_id
        self.vichele_id = vichele_id
        self.tmd_no = tmd_no

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vichele_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.tmd_no = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fill_tmd_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.vichele_id is not None:
            oprot.writeFieldBegin('vichele_id', TType.I64, 2)
            oprot.writeI64(self.vichele_id)
            oprot.writeFieldEnd()
        if self.tmd_no is not None:
            oprot.writeFieldBegin('tmd_no', TType.STRING, 3)
            oprot.writeString(self.tmd_no.encode('utf-8') if sys.version_info[0] == 2 else self.tmd_no)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fill_tmd_args)
fill_tmd_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'vichele_id', None, None, ),  # 2
    (3, TType.STRING, 'tmd_no', 'UTF8', None, ),  # 3
)


class fill_tmd_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fill_tmd_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fill_tmd_result)
fill_tmd_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class fill_enter_weight_args(object):
    """
    Attributes:
     - open_id
     - vichele_id
     - enter_weight

    """


    def __init__(self, open_id=None, vichele_id=None, enter_weight=None,):
        self.open_id = open_id
        self.vichele_id = vichele_id
        self.enter_weight = enter_weight

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vichele_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.DOUBLE:
                    self.enter_weight = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fill_enter_weight_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.vichele_id is not None:
            oprot.writeFieldBegin('vichele_id', TType.I64, 2)
            oprot.writeI64(self.vichele_id)
            oprot.writeFieldEnd()
        if self.enter_weight is not None:
            oprot.writeFieldBegin('enter_weight', TType.DOUBLE, 3)
            oprot.writeDouble(self.enter_weight)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fill_enter_weight_args)
fill_enter_weight_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'vichele_id', None, None, ),  # 2
    (3, TType.DOUBLE, 'enter_weight', None, None, ),  # 3
)


class fill_enter_weight_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fill_enter_weight_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fill_enter_weight_result)
fill_enter_weight_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class fill_weight_attach_args(object):
    """
    Attributes:
     - open_id
     - vichele_id
     - weight_attach

    """


    def __init__(self, open_id=None, vichele_id=None, weight_attach=None,):
        self.open_id = open_id
        self.vichele_id = vichele_id
        self.weight_attach = weight_attach

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.open_id = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.vichele_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.weight_attach = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fill_weight_attach_args')
        if self.open_id is not None:
            oprot.writeFieldBegin('open_id', TType.STRING, 1)
            oprot.writeString(self.open_id.encode('utf-8') if sys.version_info[0] == 2 else self.open_id)
            oprot.writeFieldEnd()
        if self.vichele_id is not None:
            oprot.writeFieldBegin('vichele_id', TType.I64, 2)
            oprot.writeI64(self.vichele_id)
            oprot.writeFieldEnd()
        if self.weight_attach is not None:
            oprot.writeFieldBegin('weight_attach', TType.STRING, 3)
            oprot.writeString(self.weight_attach.encode('utf-8') if sys.version_info[0] == 2 else self.weight_attach)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fill_weight_attach_args)
fill_weight_attach_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'open_id', 'UTF8', None, ),  # 1
    (2, TType.I64, 'vichele_id', None, None, ),  # 2
    (3, TType.STRING, 'weight_attach', 'UTF8', None, ),  # 3
)


class fill_weight_attach_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('fill_weight_attach_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(fill_weight_attach_result)
fill_weight_attach_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class add_exception_args(object):
    """
    Attributes:
     - ssid
     - stuff_name

    """


    def __init__(self, ssid=None, stuff_name=None,):
        self.ssid = ssid
        self.stuff_name = stuff_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.stuff_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_exception_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.stuff_name is not None:
            oprot.writeFieldBegin('stuff_name', TType.STRING, 2)
            oprot.writeString(self.stuff_name.encode('utf-8') if sys.version_info[0] == 2 else self.stuff_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_exception_args)
add_exception_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'stuff_name', 'UTF8', None, ),  # 2
)


class add_exception_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('add_exception_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(add_exception_result)
add_exception_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class del_exception_args(object):
    """
    Attributes:
     - ssid
     - stuff_name

    """


    def __init__(self, ssid=None, stuff_name=None,):
        self.ssid = ssid
        self.stuff_name = stuff_name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.stuff_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('del_exception_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.stuff_name is not None:
            oprot.writeFieldBegin('stuff_name', TType.STRING, 2)
            oprot.writeString(self.stuff_name.encode('utf-8') if sys.version_info[0] == 2 else self.stuff_name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(del_exception_args)
del_exception_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'stuff_name', 'UTF8', None, ),  # 2
)


class del_exception_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('del_exception_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(del_exception_result)
del_exception_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_all_exceptions_args(object):
    """
    Attributes:
     - ssid

    """


    def __init__(self, ssid=None,):
        self.ssid = ssid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_all_exceptions_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_all_exceptions_args)
get_all_exceptions_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
)


class get_all_exceptions_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.LIST:
                    self.success = []
                    (_etype339, _size336) = iprot.readListBegin()
                    for _i340 in range(_size336):
                        _elem341 = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                        self.success.append(_elem341)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_all_exceptions_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.LIST, 0)
            oprot.writeListBegin(TType.STRING, len(self.success))
            for iter342 in self.success:
                oprot.writeString(iter342.encode('utf-8') if sys.version_info[0] == 2 else iter342)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_all_exceptions_result)
get_all_exceptions_result.thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRING, 'UTF8', False), None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_company_brief_args(object):
    """
    Attributes:
     - ssid

    """


    def __init__(self, ssid=None,):
        self.ssid = ssid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_company_brief_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_company_brief_args)
get_company_brief_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
)


class get_company_brief_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = single_vichele_brief()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_company_brief_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_company_brief_result)
get_company_brief_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [single_vichele_brief, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_statistics_args(object):
    """
    Attributes:
     - ssid

    """


    def __init__(self, ssid=None,):
        self.ssid = ssid

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_statistics_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_statistics_args)
get_statistics_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
)


class get_statistics_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRUCT:
                    self.success = vichele_stay_alone_statistics()
                    self.success.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_statistics_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRUCT, 0)
            self.success.write(oprot)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_statistics_result)
get_statistics_result.thrift_spec = (
    (0, TType.STRUCT, 'success', [vichele_stay_alone_statistics, None], None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class change_price_args(object):
    """
    Attributes:
     - ssid
     - info
     - all_select
     - enter_date
     - stuff_name
     - supplier_name
     - new_price

    """


    def __init__(self, ssid=None, info=None, all_select=None, enter_date=None, stuff_name=None, supplier_name=None, new_price=None,):
        self.ssid = ssid
        self.info = info
        self.all_select = all_select
        self.enter_date = enter_date
        self.stuff_name = stuff_name
        self.supplier_name = supplier_name
        self.new_price = new_price

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.ssid = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.LIST:
                    self.info = []
                    (_etype346, _size343) = iprot.readListBegin()
                    for _i347 in range(_size343):
                        _elem348 = vichele_stay_alone()
                        _elem348.read(iprot)
                        self.info.append(_elem348)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.BOOL:
                    self.all_select = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.enter_date = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.stuff_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.supplier_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.DOUBLE:
                    self.new_price = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('change_price_args')
        if self.ssid is not None:
            oprot.writeFieldBegin('ssid', TType.STRING, 1)
            oprot.writeString(self.ssid.encode('utf-8') if sys.version_info[0] == 2 else self.ssid)
            oprot.writeFieldEnd()
        if self.info is not None:
            oprot.writeFieldBegin('info', TType.LIST, 2)
            oprot.writeListBegin(TType.STRUCT, len(self.info))
            for iter349 in self.info:
                iter349.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.all_select is not None:
            oprot.writeFieldBegin('all_select', TType.BOOL, 3)
            oprot.writeBool(self.all_select)
            oprot.writeFieldEnd()
        if self.enter_date is not None:
            oprot.writeFieldBegin('enter_date', TType.STRING, 4)
            oprot.writeString(self.enter_date.encode('utf-8') if sys.version_info[0] == 2 else self.enter_date)
            oprot.writeFieldEnd()
        if self.stuff_name is not None:
            oprot.writeFieldBegin('stuff_name', TType.STRING, 5)
            oprot.writeString(self.stuff_name.encode('utf-8') if sys.version_info[0] == 2 else self.stuff_name)
            oprot.writeFieldEnd()
        if self.supplier_name is not None:
            oprot.writeFieldBegin('supplier_name', TType.STRING, 6)
            oprot.writeString(self.supplier_name.encode('utf-8') if sys.version_info[0] == 2 else self.supplier_name)
            oprot.writeFieldEnd()
        if self.new_price is not None:
            oprot.writeFieldBegin('new_price', TType.DOUBLE, 7)
            oprot.writeDouble(self.new_price)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(change_price_args)
change_price_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'ssid', 'UTF8', None, ),  # 1
    (2, TType.LIST, 'info', (TType.STRUCT, [vichele_stay_alone, None], False), None, ),  # 2
    (3, TType.BOOL, 'all_select', None, None, ),  # 3
    (4, TType.STRING, 'enter_date', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'stuff_name', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'supplier_name', 'UTF8', None, ),  # 6
    (7, TType.DOUBLE, 'new_price', None, None, ),  # 7
)


class change_price_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.BOOL:
                    self.success = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('change_price_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.BOOL, 0)
            oprot.writeBool(self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(change_price_result)
change_price_result.thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)


class get_bound_stuff_args(object):
    """
    Attributes:
     - company_name
     - destination_company

    """


    def __init__(self, company_name=None, destination_company=None,):
        self.company_name = company_name
        self.destination_company = destination_company

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.company_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.destination_company = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_bound_stuff_args')
        if self.company_name is not None:
            oprot.writeFieldBegin('company_name', TType.STRING, 1)
            oprot.writeString(self.company_name.encode('utf-8') if sys.version_info[0] == 2 else self.company_name)
            oprot.writeFieldEnd()
        if self.destination_company is not None:
            oprot.writeFieldBegin('destination_company', TType.STRING, 2)
            oprot.writeString(self.destination_company.encode('utf-8') if sys.version_info[0] == 2 else self.destination_company)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_bound_stuff_args)
get_bound_stuff_args.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'company_name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'destination_company', 'UTF8', None, ),  # 2
)


class get_bound_stuff_result(object):
    """
    Attributes:
     - success
     - e

    """


    def __init__(self, success=None, e=None,):
        self.success = success
        self.e = e

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 0:
                if ftype == TType.STRING:
                    self.success = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 1:
                if ftype == TType.STRUCT:
                    self.e = gen_exp.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('get_bound_stuff_result')
        if self.success is not None:
            oprot.writeFieldBegin('success', TType.STRING, 0)
            oprot.writeString(self.success.encode('utf-8') if sys.version_info[0] == 2 else self.success)
            oprot.writeFieldEnd()
        if self.e is not None:
            oprot.writeFieldBegin('e', TType.STRUCT, 1)
            self.e.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(get_bound_stuff_result)
get_bound_stuff_result.thrift_spec = (
    (0, TType.STRING, 'success', 'UTF8', None, ),  # 0
    (1, TType.STRUCT, 'e', [gen_exp, None], None, ),  # 1
)
fix_spec(all_structs)
del all_structs
