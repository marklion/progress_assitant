#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class gen_exp(TException):
    """
    Attributes:
     - msg

    """


    def __init__(self, msg=None,):
        super(gen_exp, self).__setattr__('msg', msg)

    def __setattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __delattr__(self, *args):
        raise TypeError("can't modify immutable instance")

    def __hash__(self):
        return hash(self.__class__) ^ hash((self.msg, ))

    @classmethod
    def read(cls, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and cls.thrift_spec is not None:
            return iprot._fast_decode(None, iprot, [cls, cls.thrift_spec])
        iprot.readStructBegin()
        msg = None
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    msg = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()
        return cls(
            msg=msg,
        )

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('gen_exp')
        if self.msg is not None:
            oprot.writeFieldBegin('msg', TType.STRING, 1)
            oprot.writeString(self.msg.encode('utf-8') if sys.version_info[0] == 2 else self.msg)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __str__(self):
        return repr(self)

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class user_info(object):
    """
    Attributes:
     - user_id
     - name
     - logo
     - company
     - buyer
     - phone

    """


    def __init__(self, user_id=None, name=None, logo=None, company=None, buyer=None, phone=None,):
        self.user_id = user_id
        self.name = name
        self.logo = logo
        self.company = company
        self.buyer = buyer
        self.phone = phone

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.user_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.logo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.company = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.buyer = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('user_info')
        if self.user_id is not None:
            oprot.writeFieldBegin('user_id', TType.I64, 1)
            oprot.writeI64(self.user_id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.logo is not None:
            oprot.writeFieldBegin('logo', TType.STRING, 3)
            oprot.writeString(self.logo.encode('utf-8') if sys.version_info[0] == 2 else self.logo)
            oprot.writeFieldEnd()
        if self.company is not None:
            oprot.writeFieldBegin('company', TType.STRING, 4)
            oprot.writeString(self.company.encode('utf-8') if sys.version_info[0] == 2 else self.company)
            oprot.writeFieldEnd()
        if self.buyer is not None:
            oprot.writeFieldBegin('buyer', TType.BOOL, 5)
            oprot.writeBool(self.buyer)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 6)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class driver_info(object):
    """
    Attributes:
     - name
     - phone
     - id

    """


    def __init__(self, name=None, phone=None, id=None,):
        self.name = name
        self.phone = phone
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('driver_info')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 2)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 3)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class vichele_info_t(object):
    """
    Attributes:
     - number
     - id

    """


    def __init__(self, number=None, id=None,):
        self.number = number
        self.id = id

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.number = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('vichele_info_t')
        if self.number is not None:
            oprot.writeFieldBegin('number', TType.STRING, 1)
            oprot.writeString(self.number.encode('utf-8') if sys.version_info[0] == 2 else self.number)
            oprot.writeFieldEnd()
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 2)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class stuff_detail(object):
    """
    Attributes:
     - name
     - last
     - price
     - company
     - type_id
     - saling
     - company_address
     - company_contact

    """


    def __init__(self, name=None, last=None, price=None, company=None, type_id=None, saling=None, company_address=None, company_contact=None,):
        self.name = name
        self.last = last
        self.price = price
        self.company = company
        self.type_id = type_id
        self.saling = saling
        self.company_address = company_address
        self.company_contact = company_contact

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.last = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.price = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.company = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.type_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.saling = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.company_address = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.company_contact = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stuff_detail')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.last is not None:
            oprot.writeFieldBegin('last', TType.STRING, 2)
            oprot.writeString(self.last.encode('utf-8') if sys.version_info[0] == 2 else self.last)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.I64, 3)
            oprot.writeI64(self.price)
            oprot.writeFieldEnd()
        if self.company is not None:
            oprot.writeFieldBegin('company', TType.STRING, 4)
            oprot.writeString(self.company.encode('utf-8') if sys.version_info[0] == 2 else self.company)
            oprot.writeFieldEnd()
        if self.type_id is not None:
            oprot.writeFieldBegin('type_id', TType.I64, 5)
            oprot.writeI64(self.type_id)
            oprot.writeFieldEnd()
        if self.saling is not None:
            oprot.writeFieldBegin('saling', TType.BOOL, 6)
            oprot.writeBool(self.saling)
            oprot.writeFieldEnd()
        if self.company_address is not None:
            oprot.writeFieldBegin('company_address', TType.STRING, 7)
            oprot.writeString(self.company_address.encode('utf-8') if sys.version_info[0] == 2 else self.company_address)
            oprot.writeFieldEnd()
        if self.company_contact is not None:
            oprot.writeFieldBegin('company_contact', TType.STRING, 8)
            oprot.writeString(self.company_contact.encode('utf-8') if sys.version_info[0] == 2 else self.company_contact)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class user_apply(object):
    """
    Attributes:
     - name
     - phone
     - logo
     - apply_id
     - status

    """


    def __init__(self, name=None, phone=None, logo=None, apply_id=None, status=None,):
        self.name = name
        self.phone = phone
        self.logo = logo
        self.apply_id = apply_id
        self.status = status

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.phone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.logo = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.apply_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.status = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('user_apply')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.phone is not None:
            oprot.writeFieldBegin('phone', TType.STRING, 2)
            oprot.writeString(self.phone.encode('utf-8') if sys.version_info[0] == 2 else self.phone)
            oprot.writeFieldEnd()
        if self.logo is not None:
            oprot.writeFieldBegin('logo', TType.STRING, 3)
            oprot.writeString(self.logo.encode('utf-8') if sys.version_info[0] == 2 else self.logo)
            oprot.writeFieldEnd()
        if self.apply_id is not None:
            oprot.writeFieldBegin('apply_id', TType.I64, 4)
            oprot.writeI64(self.apply_id)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I64, 5)
            oprot.writeI64(self.status)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class company_address_contact_info(object):
    """
    Attributes:
     - address
     - contact

    """


    def __init__(self, address=None, contact=None,):
        self.address = address
        self.contact = contact

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.address = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.contact = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('company_address_contact_info')
        if self.address is not None:
            oprot.writeFieldBegin('address', TType.STRING, 1)
            oprot.writeString(self.address.encode('utf-8') if sys.version_info[0] == 2 else self.address)
            oprot.writeFieldEnd()
        if self.contact is not None:
            oprot.writeFieldBegin('contact', TType.STRING, 2)
            oprot.writeString(self.contact.encode('utf-8') if sys.version_info[0] == 2 else self.contact)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class company_attachment(object):
    """
    Attributes:
     - id
     - path
     - pic_path

    """


    def __init__(self, id=None, path=None, pic_path=None,):
        self.id = id
        self.path = path
        self.pic_path = pic_path

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.pic_path = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('company_attachment')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.path is not None:
            oprot.writeFieldBegin('path', TType.STRING, 2)
            oprot.writeString(self.path.encode('utf-8') if sys.version_info[0] == 2 else self.path)
            oprot.writeFieldEnd()
        if self.pic_path is not None:
            oprot.writeFieldBegin('pic_path', TType.STRING, 3)
            oprot.writeString(self.pic_path.encode('utf-8') if sys.version_info[0] == 2 else self.pic_path)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class plan_status_rule(object):
    """
    Attributes:
     - name
     - author
     - timestamp
     - comment
     - index
     - prompt

    """


    def __init__(self, name=None, author=None, timestamp=None, comment=None, index=None, prompt=None,):
        self.name = name
        self.author = author
        self.timestamp = timestamp
        self.comment = comment
        self.index = index
        self.prompt = prompt

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.author = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.timestamp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.comment = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.index = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.prompt = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('plan_status_rule')
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 1)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.author is not None:
            oprot.writeFieldBegin('author', TType.STRING, 2)
            oprot.writeString(self.author.encode('utf-8') if sys.version_info[0] == 2 else self.author)
            oprot.writeFieldEnd()
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.STRING, 3)
            oprot.writeString(self.timestamp.encode('utf-8') if sys.version_info[0] == 2 else self.timestamp)
            oprot.writeFieldEnd()
        if self.comment is not None:
            oprot.writeFieldBegin('comment', TType.STRING, 4)
            oprot.writeString(self.comment.encode('utf-8') if sys.version_info[0] == 2 else self.comment)
            oprot.writeFieldEnd()
        if self.index is not None:
            oprot.writeFieldBegin('index', TType.I64, 5)
            oprot.writeI64(self.index)
            oprot.writeFieldEnd()
        if self.prompt is not None:
            oprot.writeFieldBegin('prompt', TType.STRING, 6)
            oprot.writeString(self.prompt.encode('utf-8') if sys.version_info[0] == 2 else self.prompt)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class plan_confirm_info(object):
    """
    Attributes:
     - timestamp
     - name

    """


    def __init__(self, timestamp=None, name=None,):
        self.timestamp = timestamp
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.timestamp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('plan_confirm_info')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.STRING, 1)
            oprot.writeString(self.timestamp.encode('utf-8') if sys.version_info[0] == 2 else self.timestamp)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class pay_confirm_info(object):
    """
    Attributes:
     - timestamp
     - name

    """


    def __init__(self, timestamp=None, name=None,):
        self.timestamp = timestamp
        self.name = name

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.timestamp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('pay_confirm_info')
        if self.timestamp is not None:
            oprot.writeFieldBegin('timestamp', TType.STRING, 1)
            oprot.writeString(self.timestamp.encode('utf-8') if sys.version_info[0] == 2 else self.timestamp)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class vichele_in_plan(object):
    """
    Attributes:
     - main_vichele
     - behind_vichele
     - driver_name
     - driver_phone
     - count
     - drop_address
     - use_for
     - vichele_id
     - finish
     - deliver_timestamp

    """


    def __init__(self, main_vichele=None, behind_vichele=None, driver_name=None, driver_phone=None, count=None, drop_address=None, use_for=None, vichele_id=None, finish=None, deliver_timestamp=None,):
        self.main_vichele = main_vichele
        self.behind_vichele = behind_vichele
        self.driver_name = driver_name
        self.driver_phone = driver_phone
        self.count = count
        self.drop_address = drop_address
        self.use_for = use_for
        self.vichele_id = vichele_id
        self.finish = finish
        self.deliver_timestamp = deliver_timestamp

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.main_vichele = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.behind_vichele = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.driver_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.driver_phone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.count = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.drop_address = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.use_for = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I64:
                    self.vichele_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.BOOL:
                    self.finish = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.deliver_timestamp = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('vichele_in_plan')
        if self.main_vichele is not None:
            oprot.writeFieldBegin('main_vichele', TType.STRING, 1)
            oprot.writeString(self.main_vichele.encode('utf-8') if sys.version_info[0] == 2 else self.main_vichele)
            oprot.writeFieldEnd()
        if self.behind_vichele is not None:
            oprot.writeFieldBegin('behind_vichele', TType.STRING, 2)
            oprot.writeString(self.behind_vichele.encode('utf-8') if sys.version_info[0] == 2 else self.behind_vichele)
            oprot.writeFieldEnd()
        if self.driver_name is not None:
            oprot.writeFieldBegin('driver_name', TType.STRING, 3)
            oprot.writeString(self.driver_name.encode('utf-8') if sys.version_info[0] == 2 else self.driver_name)
            oprot.writeFieldEnd()
        if self.driver_phone is not None:
            oprot.writeFieldBegin('driver_phone', TType.STRING, 4)
            oprot.writeString(self.driver_phone.encode('utf-8') if sys.version_info[0] == 2 else self.driver_phone)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.DOUBLE, 5)
            oprot.writeDouble(self.count)
            oprot.writeFieldEnd()
        if self.drop_address is not None:
            oprot.writeFieldBegin('drop_address', TType.STRING, 6)
            oprot.writeString(self.drop_address.encode('utf-8') if sys.version_info[0] == 2 else self.drop_address)
            oprot.writeFieldEnd()
        if self.use_for is not None:
            oprot.writeFieldBegin('use_for', TType.STRING, 7)
            oprot.writeString(self.use_for.encode('utf-8') if sys.version_info[0] == 2 else self.use_for)
            oprot.writeFieldEnd()
        if self.vichele_id is not None:
            oprot.writeFieldBegin('vichele_id', TType.I64, 8)
            oprot.writeI64(self.vichele_id)
            oprot.writeFieldEnd()
        if self.finish is not None:
            oprot.writeFieldBegin('finish', TType.BOOL, 9)
            oprot.writeBool(self.finish)
            oprot.writeFieldEnd()
        if self.deliver_timestamp is not None:
            oprot.writeFieldBegin('deliver_timestamp', TType.STRING, 10)
            oprot.writeString(self.deliver_timestamp.encode('utf-8') if sys.version_info[0] == 2 else self.deliver_timestamp)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class stuff_plan(object):
    """
    Attributes:
     - type_id
     - count
     - vichele_info
     - plan_id
     - plan_time
     - created_time
     - name
     - price
     - status
     - proxy_company
     - created_user_name
     - buy_company
     - sale_company
     - comment
     - is_cancel

    """


    def __init__(self, type_id=None, count=None, vichele_info=None, plan_id=None, plan_time=None, created_time=None, name=None, price=None, status=None, proxy_company=None, created_user_name=None, buy_company=None, sale_company=None, comment=None, is_cancel=None,):
        self.type_id = type_id
        self.count = count
        self.vichele_info = vichele_info
        self.plan_id = plan_id
        self.plan_time = plan_time
        self.created_time = created_time
        self.name = name
        self.price = price
        self.status = status
        self.proxy_company = proxy_company
        self.created_user_name = created_user_name
        self.buy_company = buy_company
        self.sale_company = sale_company
        self.comment = comment
        self.is_cancel = is_cancel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.type_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.count = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.vichele_info = []
                    (_etype3, _size0) = iprot.readListBegin()
                    for _i4 in range(_size0):
                        _elem5 = vichele_in_plan()
                        _elem5.read(iprot)
                        self.vichele_info.append(_elem5)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.plan_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.plan_time = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.created_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.DOUBLE:
                    self.price = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I64:
                    self.status = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.proxy_company = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.created_user_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.buy_company = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.STRING:
                    self.sale_company = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 14:
                if ftype == TType.STRING:
                    self.comment = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 15:
                if ftype == TType.BOOL:
                    self.is_cancel = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('stuff_plan')
        if self.type_id is not None:
            oprot.writeFieldBegin('type_id', TType.I64, 1)
            oprot.writeI64(self.type_id)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.DOUBLE, 2)
            oprot.writeDouble(self.count)
            oprot.writeFieldEnd()
        if self.vichele_info is not None:
            oprot.writeFieldBegin('vichele_info', TType.LIST, 3)
            oprot.writeListBegin(TType.STRUCT, len(self.vichele_info))
            for iter6 in self.vichele_info:
                iter6.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.plan_id is not None:
            oprot.writeFieldBegin('plan_id', TType.I64, 4)
            oprot.writeI64(self.plan_id)
            oprot.writeFieldEnd()
        if self.plan_time is not None:
            oprot.writeFieldBegin('plan_time', TType.STRING, 5)
            oprot.writeString(self.plan_time.encode('utf-8') if sys.version_info[0] == 2 else self.plan_time)
            oprot.writeFieldEnd()
        if self.created_time is not None:
            oprot.writeFieldBegin('created_time', TType.I64, 6)
            oprot.writeI64(self.created_time)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 7)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.price is not None:
            oprot.writeFieldBegin('price', TType.DOUBLE, 8)
            oprot.writeDouble(self.price)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I64, 9)
            oprot.writeI64(self.status)
            oprot.writeFieldEnd()
        if self.proxy_company is not None:
            oprot.writeFieldBegin('proxy_company', TType.STRING, 10)
            oprot.writeString(self.proxy_company.encode('utf-8') if sys.version_info[0] == 2 else self.proxy_company)
            oprot.writeFieldEnd()
        if self.created_user_name is not None:
            oprot.writeFieldBegin('created_user_name', TType.STRING, 11)
            oprot.writeString(self.created_user_name.encode('utf-8') if sys.version_info[0] == 2 else self.created_user_name)
            oprot.writeFieldEnd()
        if self.buy_company is not None:
            oprot.writeFieldBegin('buy_company', TType.STRING, 12)
            oprot.writeString(self.buy_company.encode('utf-8') if sys.version_info[0] == 2 else self.buy_company)
            oprot.writeFieldEnd()
        if self.sale_company is not None:
            oprot.writeFieldBegin('sale_company', TType.STRING, 13)
            oprot.writeString(self.sale_company.encode('utf-8') if sys.version_info[0] == 2 else self.sale_company)
            oprot.writeFieldEnd()
        if self.comment is not None:
            oprot.writeFieldBegin('comment', TType.STRING, 14)
            oprot.writeString(self.comment.encode('utf-8') if sys.version_info[0] == 2 else self.comment)
            oprot.writeFieldEnd()
        if self.is_cancel is not None:
            oprot.writeFieldBegin('is_cancel', TType.BOOL, 15)
            oprot.writeBool(self.is_cancel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class plan_status(object):
    """
    Attributes:
     - plan_id
     - status
     - plan_time
     - conflict_reason
     - status_prompt
     - is_cancel

    """


    def __init__(self, plan_id=None, status=None, plan_time=None, conflict_reason=None, status_prompt=None, is_cancel=None,):
        self.plan_id = plan_id
        self.status = status
        self.plan_time = plan_time
        self.conflict_reason = conflict_reason
        self.status_prompt = status_prompt
        self.is_cancel = is_cancel

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.plan_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I64:
                    self.status = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.plan_time = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.conflict_reason = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.status_prompt = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.is_cancel = iprot.readBool()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('plan_status')
        if self.plan_id is not None:
            oprot.writeFieldBegin('plan_id', TType.I64, 1)
            oprot.writeI64(self.plan_id)
            oprot.writeFieldEnd()
        if self.status is not None:
            oprot.writeFieldBegin('status', TType.I64, 2)
            oprot.writeI64(self.status)
            oprot.writeFieldEnd()
        if self.plan_time is not None:
            oprot.writeFieldBegin('plan_time', TType.I64, 3)
            oprot.writeI64(self.plan_time)
            oprot.writeFieldEnd()
        if self.conflict_reason is not None:
            oprot.writeFieldBegin('conflict_reason', TType.STRING, 4)
            oprot.writeString(self.conflict_reason.encode('utf-8') if sys.version_info[0] == 2 else self.conflict_reason)
            oprot.writeFieldEnd()
        if self.status_prompt is not None:
            oprot.writeFieldBegin('status_prompt', TType.STRING, 5)
            oprot.writeString(self.status_prompt.encode('utf-8') if sys.version_info[0] == 2 else self.status_prompt)
            oprot.writeFieldEnd()
        if self.is_cancel is not None:
            oprot.writeFieldBegin('is_cancel', TType.BOOL, 6)
            oprot.writeBool(self.is_cancel)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class plan_number_id(object):
    """
    Attributes:
     - id
     - number

    """


    def __init__(self, id=None, number=None,):
        self.id = id
        self.number = number

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.number = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('plan_number_id')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.number is not None:
            oprot.writeFieldBegin('number', TType.STRING, 2)
            oprot.writeString(self.number.encode('utf-8') if sys.version_info[0] == 2 else self.number)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class deliver_info(object):
    """
    Attributes:
     - id
     - count

    """


    def __init__(self, id=None, count=None,):
        self.id = id
        self.count = count

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.I64:
                    self.id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.DOUBLE:
                    self.count = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('deliver_info')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.I64, 1)
            oprot.writeI64(self.id)
            oprot.writeFieldEnd()
        if self.count is not None:
            oprot.writeFieldBegin('count', TType.DOUBLE, 2)
            oprot.writeDouble(self.count)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class vichele_statistics(object):
    """
    Attributes:
     - company
     - main_vichele
     - behind_vichele
     - driver_name
     - driver_phone
     - delivered
     - plan_id
     - plan_order

    """


    def __init__(self, company=None, main_vichele=None, behind_vichele=None, driver_name=None, driver_phone=None, delivered=None, plan_id=None, plan_order=None,):
        self.company = company
        self.main_vichele = main_vichele
        self.behind_vichele = behind_vichele
        self.driver_name = driver_name
        self.driver_phone = driver_phone
        self.delivered = delivered
        self.plan_id = plan_id
        self.plan_order = plan_order

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.company = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.main_vichele = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.behind_vichele = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.driver_name = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.driver_phone = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.BOOL:
                    self.delivered = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.plan_id = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.plan_order = iprot.readString().decode('utf-8', errors='replace') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('vichele_statistics')
        if self.company is not None:
            oprot.writeFieldBegin('company', TType.STRING, 1)
            oprot.writeString(self.company.encode('utf-8') if sys.version_info[0] == 2 else self.company)
            oprot.writeFieldEnd()
        if self.main_vichele is not None:
            oprot.writeFieldBegin('main_vichele', TType.STRING, 2)
            oprot.writeString(self.main_vichele.encode('utf-8') if sys.version_info[0] == 2 else self.main_vichele)
            oprot.writeFieldEnd()
        if self.behind_vichele is not None:
            oprot.writeFieldBegin('behind_vichele', TType.STRING, 3)
            oprot.writeString(self.behind_vichele.encode('utf-8') if sys.version_info[0] == 2 else self.behind_vichele)
            oprot.writeFieldEnd()
        if self.driver_name is not None:
            oprot.writeFieldBegin('driver_name', TType.STRING, 4)
            oprot.writeString(self.driver_name.encode('utf-8') if sys.version_info[0] == 2 else self.driver_name)
            oprot.writeFieldEnd()
        if self.driver_phone is not None:
            oprot.writeFieldBegin('driver_phone', TType.STRING, 5)
            oprot.writeString(self.driver_phone.encode('utf-8') if sys.version_info[0] == 2 else self.driver_phone)
            oprot.writeFieldEnd()
        if self.delivered is not None:
            oprot.writeFieldBegin('delivered', TType.BOOL, 6)
            oprot.writeBool(self.delivered)
            oprot.writeFieldEnd()
        if self.plan_id is not None:
            oprot.writeFieldBegin('plan_id', TType.I64, 7)
            oprot.writeI64(self.plan_id)
            oprot.writeFieldEnd()
        if self.plan_order is not None:
            oprot.writeFieldBegin('plan_order', TType.STRING, 8)
            oprot.writeString(self.plan_order.encode('utf-8') if sys.version_info[0] == 2 else self.plan_order)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(gen_exp)
gen_exp.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'msg', 'UTF8', None, ),  # 1
)
all_structs.append(user_info)
user_info.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'user_id', None, None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'logo', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'company', 'UTF8', None, ),  # 4
    (5, TType.BOOL, 'buyer', None, None, ),  # 5
    (6, TType.STRING, 'phone', 'UTF8', None, ),  # 6
)
all_structs.append(driver_info)
driver_info.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'phone', 'UTF8', None, ),  # 2
    (3, TType.I64, 'id', None, None, ),  # 3
)
all_structs.append(vichele_info_t)
vichele_info_t.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'number', 'UTF8', None, ),  # 1
    (2, TType.I64, 'id', None, None, ),  # 2
)
all_structs.append(stuff_detail)
stuff_detail.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'last', 'UTF8', None, ),  # 2
    (3, TType.I64, 'price', None, None, ),  # 3
    (4, TType.STRING, 'company', 'UTF8', None, ),  # 4
    (5, TType.I64, 'type_id', None, None, ),  # 5
    (6, TType.BOOL, 'saling', None, None, ),  # 6
    (7, TType.STRING, 'company_address', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'company_contact', 'UTF8', None, ),  # 8
)
all_structs.append(user_apply)
user_apply.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'phone', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'logo', 'UTF8', None, ),  # 3
    (4, TType.I64, 'apply_id', None, None, ),  # 4
    (5, TType.I64, 'status', None, None, ),  # 5
)
all_structs.append(company_address_contact_info)
company_address_contact_info.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'address', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'contact', 'UTF8', None, ),  # 2
)
all_structs.append(company_attachment)
company_attachment.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'path', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'pic_path', 'UTF8', None, ),  # 3
)
all_structs.append(plan_status_rule)
plan_status_rule.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'name', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'author', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'timestamp', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'comment', 'UTF8', None, ),  # 4
    (5, TType.I64, 'index', None, None, ),  # 5
    (6, TType.STRING, 'prompt', 'UTF8', None, ),  # 6
)
all_structs.append(plan_confirm_info)
plan_confirm_info.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'timestamp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(pay_confirm_info)
pay_confirm_info.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'timestamp', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
)
all_structs.append(vichele_in_plan)
vichele_in_plan.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'main_vichele', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'behind_vichele', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'driver_name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'driver_phone', 'UTF8', None, ),  # 4
    (5, TType.DOUBLE, 'count', None, None, ),  # 5
    (6, TType.STRING, 'drop_address', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'use_for', 'UTF8', None, ),  # 7
    (8, TType.I64, 'vichele_id', None, None, ),  # 8
    (9, TType.BOOL, 'finish', None, None, ),  # 9
    (10, TType.STRING, 'deliver_timestamp', 'UTF8', None, ),  # 10
)
all_structs.append(stuff_plan)
stuff_plan.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'type_id', None, None, ),  # 1
    (2, TType.DOUBLE, 'count', None, None, ),  # 2
    (3, TType.LIST, 'vichele_info', (TType.STRUCT, [vichele_in_plan, None], False), None, ),  # 3
    (4, TType.I64, 'plan_id', None, None, ),  # 4
    (5, TType.STRING, 'plan_time', 'UTF8', None, ),  # 5
    (6, TType.I64, 'created_time', None, None, ),  # 6
    (7, TType.STRING, 'name', 'UTF8', None, ),  # 7
    (8, TType.DOUBLE, 'price', None, None, ),  # 8
    (9, TType.I64, 'status', None, None, ),  # 9
    (10, TType.STRING, 'proxy_company', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'created_user_name', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'buy_company', 'UTF8', None, ),  # 12
    (13, TType.STRING, 'sale_company', 'UTF8', None, ),  # 13
    (14, TType.STRING, 'comment', 'UTF8', None, ),  # 14
    (15, TType.BOOL, 'is_cancel', None, None, ),  # 15
)
all_structs.append(plan_status)
plan_status.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'plan_id', None, None, ),  # 1
    (2, TType.I64, 'status', None, None, ),  # 2
    (3, TType.I64, 'plan_time', None, None, ),  # 3
    (4, TType.STRING, 'conflict_reason', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'status_prompt', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'is_cancel', None, None, ),  # 6
)
all_structs.append(plan_number_id)
plan_number_id.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.STRING, 'number', 'UTF8', None, ),  # 2
)
all_structs.append(deliver_info)
deliver_info.thrift_spec = (
    None,  # 0
    (1, TType.I64, 'id', None, None, ),  # 1
    (2, TType.DOUBLE, 'count', None, None, ),  # 2
)
all_structs.append(vichele_statistics)
vichele_statistics.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'company', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'main_vichele', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'behind_vichele', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'driver_name', 'UTF8', None, ),  # 4
    (5, TType.STRING, 'driver_phone', 'UTF8', None, ),  # 5
    (6, TType.BOOL, 'delivered', None, None, ),  # 6
    (7, TType.I64, 'plan_id', None, None, ),  # 7
    (8, TType.STRING, 'plan_order', 'UTF8', None, ),  # 8
)
fix_spec(all_structs)
del all_structs
