#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from idl import company_management
from idl.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('   get_all_type(string ssid)')
    print('  i64 add_type(string name, i64 price, string last, string ssid)')
    print('  bool edit_type(stuff_detail stuff, string ssid)')
    print('  void remove_type(stuff_detail stuff, string ssid)')
    print('  bool readd_type(stuff_detail stuff, string ssid)')
    print('   get_all_apply(string ssid)')
    print('  bool approve_apply(i64 apply_id, string ssid, bool approve)')
    print('  string generate_statistics(string ssid, i64 begin_date, i64 end_date)')
    print('  bool set_notice(string ssid, string notice)')
    print('  string get_notice(string company_name)')
    print('  void clear_notice(string ssid)')
    print('   get_all_compay_user(string ssid)')
    print('  bool remove_user_from_company(string ssid, i64 user_id)')
    print('  string get_company_logo(string ssid)')
    print('  bool set_address(string ssid, string address)')
    print('  string get_address(string ssid)')
    print('  bool set_contact(string ssid, string contact)')
    print('  string get_contact(string ssid)')
    print('  company_address_contact_info get_address_contact(string company_name)')
    print('  bool add_attachment(string ssid, string base64content, bool is_pdf)')
    print('  void del_attachment(string ssid, i64 id)')
    print('   get_all_attachment(string ssid)')
    print('  string get_attachment(string company_name)')
    print('   get_real_access(string ssid)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = company_management.Client(protocol)
transport.open()

if cmd == 'get_all_type':
    if len(args) != 1:
        print('get_all_type requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_type(args[0],))

elif cmd == 'add_type':
    if len(args) != 4:
        print('add_type requires 4 args')
        sys.exit(1)
    pp.pprint(client.add_type(args[0], eval(args[1]), args[2], args[3],))

elif cmd == 'edit_type':
    if len(args) != 2:
        print('edit_type requires 2 args')
        sys.exit(1)
    pp.pprint(client.edit_type(eval(args[0]), args[1],))

elif cmd == 'remove_type':
    if len(args) != 2:
        print('remove_type requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_type(eval(args[0]), args[1],))

elif cmd == 'readd_type':
    if len(args) != 2:
        print('readd_type requires 2 args')
        sys.exit(1)
    pp.pprint(client.readd_type(eval(args[0]), args[1],))

elif cmd == 'get_all_apply':
    if len(args) != 1:
        print('get_all_apply requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_apply(args[0],))

elif cmd == 'approve_apply':
    if len(args) != 3:
        print('approve_apply requires 3 args')
        sys.exit(1)
    pp.pprint(client.approve_apply(eval(args[0]), args[1], eval(args[2]),))

elif cmd == 'generate_statistics':
    if len(args) != 3:
        print('generate_statistics requires 3 args')
        sys.exit(1)
    pp.pprint(client.generate_statistics(args[0], eval(args[1]), eval(args[2]),))

elif cmd == 'set_notice':
    if len(args) != 2:
        print('set_notice requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_notice(args[0], args[1],))

elif cmd == 'get_notice':
    if len(args) != 1:
        print('get_notice requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_notice(args[0],))

elif cmd == 'clear_notice':
    if len(args) != 1:
        print('clear_notice requires 1 args')
        sys.exit(1)
    pp.pprint(client.clear_notice(args[0],))

elif cmd == 'get_all_compay_user':
    if len(args) != 1:
        print('get_all_compay_user requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_compay_user(args[0],))

elif cmd == 'remove_user_from_company':
    if len(args) != 2:
        print('remove_user_from_company requires 2 args')
        sys.exit(1)
    pp.pprint(client.remove_user_from_company(args[0], eval(args[1]),))

elif cmd == 'get_company_logo':
    if len(args) != 1:
        print('get_company_logo requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_company_logo(args[0],))

elif cmd == 'set_address':
    if len(args) != 2:
        print('set_address requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_address(args[0], args[1],))

elif cmd == 'get_address':
    if len(args) != 1:
        print('get_address requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_address(args[0],))

elif cmd == 'set_contact':
    if len(args) != 2:
        print('set_contact requires 2 args')
        sys.exit(1)
    pp.pprint(client.set_contact(args[0], args[1],))

elif cmd == 'get_contact':
    if len(args) != 1:
        print('get_contact requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_contact(args[0],))

elif cmd == 'get_address_contact':
    if len(args) != 1:
        print('get_address_contact requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_address_contact(args[0],))

elif cmd == 'add_attachment':
    if len(args) != 3:
        print('add_attachment requires 3 args')
        sys.exit(1)
    pp.pprint(client.add_attachment(args[0], args[1], eval(args[2]),))

elif cmd == 'del_attachment':
    if len(args) != 2:
        print('del_attachment requires 2 args')
        sys.exit(1)
    pp.pprint(client.del_attachment(args[0], eval(args[1]),))

elif cmd == 'get_all_attachment':
    if len(args) != 1:
        print('get_all_attachment requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_all_attachment(args[0],))

elif cmd == 'get_attachment':
    if len(args) != 1:
        print('get_attachment requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_attachment(args[0],))

elif cmd == 'get_real_access':
    if len(args) != 1:
        print('get_real_access requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_real_access(args[0],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
