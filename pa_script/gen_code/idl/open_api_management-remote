#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.14.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from idl import open_api_management
from idl.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  bool register_api_user(string company_name, string email, string password)')
    print('  bool verify_email_code(string email, string code)')
    print('  bool unregister_api_user(string email, string password)')
    print('  string get_token(string email, string password)')
    print('   get_today_transformation(string token)')
    print('  bool push_exit_count(i64 id, double count, bool is_sale, string token)')
    print('  bool push_arrange(i64 id, string order, bool is_sale, string location, string token)')
    print('  bool proc_call_vehicle(call_vehicle_req _req, string token)')
    print('  vehicle_info_resp proc_vehicle_info(string plateNo, string driverId, string token)')
    print('   proc_all_vehicle_info(string token)')
    print('  bool proc_push_weight(push_weight_req _req, string token)')
    print('  bool proc_add_black_list(i64 type, string target, string reason, string expire_date, string token)')
    print('  bool proc_del_black_list(i64 type, string target, string token)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = open_api_management.Client(protocol)
transport.open()

if cmd == 'register_api_user':
    if len(args) != 3:
        print('register_api_user requires 3 args')
        sys.exit(1)
    pp.pprint(client.register_api_user(args[0], args[1], args[2],))

elif cmd == 'verify_email_code':
    if len(args) != 2:
        print('verify_email_code requires 2 args')
        sys.exit(1)
    pp.pprint(client.verify_email_code(args[0], args[1],))

elif cmd == 'unregister_api_user':
    if len(args) != 2:
        print('unregister_api_user requires 2 args')
        sys.exit(1)
    pp.pprint(client.unregister_api_user(args[0], args[1],))

elif cmd == 'get_token':
    if len(args) != 2:
        print('get_token requires 2 args')
        sys.exit(1)
    pp.pprint(client.get_token(args[0], args[1],))

elif cmd == 'get_today_transformation':
    if len(args) != 1:
        print('get_today_transformation requires 1 args')
        sys.exit(1)
    pp.pprint(client.get_today_transformation(args[0],))

elif cmd == 'push_exit_count':
    if len(args) != 4:
        print('push_exit_count requires 4 args')
        sys.exit(1)
    pp.pprint(client.push_exit_count(eval(args[0]), eval(args[1]), eval(args[2]), args[3],))

elif cmd == 'push_arrange':
    if len(args) != 5:
        print('push_arrange requires 5 args')
        sys.exit(1)
    pp.pprint(client.push_arrange(eval(args[0]), args[1], eval(args[2]), args[3], args[4],))

elif cmd == 'proc_call_vehicle':
    if len(args) != 2:
        print('proc_call_vehicle requires 2 args')
        sys.exit(1)
    pp.pprint(client.proc_call_vehicle(eval(args[0]), args[1],))

elif cmd == 'proc_vehicle_info':
    if len(args) != 3:
        print('proc_vehicle_info requires 3 args')
        sys.exit(1)
    pp.pprint(client.proc_vehicle_info(args[0], args[1], args[2],))

elif cmd == 'proc_all_vehicle_info':
    if len(args) != 1:
        print('proc_all_vehicle_info requires 1 args')
        sys.exit(1)
    pp.pprint(client.proc_all_vehicle_info(args[0],))

elif cmd == 'proc_push_weight':
    if len(args) != 2:
        print('proc_push_weight requires 2 args')
        sys.exit(1)
    pp.pprint(client.proc_push_weight(eval(args[0]), args[1],))

elif cmd == 'proc_add_black_list':
    if len(args) != 5:
        print('proc_add_black_list requires 5 args')
        sys.exit(1)
    pp.pprint(client.proc_add_black_list(eval(args[0]), args[1], args[2], args[3], args[4],))

elif cmd == 'proc_del_black_list':
    if len(args) != 3:
        print('proc_del_black_list requires 3 args')
        sys.exit(1)
    pp.pprint(client.proc_del_black_list(eval(args[0]), args[1], args[2],))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
