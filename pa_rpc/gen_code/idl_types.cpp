/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "idl_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




gen_exp::~gen_exp() noexcept {
}


void gen_exp::__set_msg(const std::string& val) {
  this->msg = val;
}
std::ostream& operator<<(std::ostream& out, const gen_exp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t gen_exp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t gen_exp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("gen_exp");

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(gen_exp &a, gen_exp &b) {
  using ::std::swap;
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

gen_exp::gen_exp(const gen_exp& other0) : TException() {
  msg = other0.msg;
  __isset = other0.__isset;
}
gen_exp& gen_exp::operator=(const gen_exp& other1) {
  msg = other1.msg;
  __isset = other1.__isset;
  return *this;
}
void gen_exp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "gen_exp(";
  out << "msg=" << to_string(msg);
  out << ")";
}

const char* gen_exp::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: gen_exp";
  }
}


user_info::~user_info() noexcept {
}


void user_info::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void user_info::__set_name(const std::string& val) {
  this->name = val;
}

void user_info::__set_logo(const std::string& val) {
  this->logo = val;
}

void user_info::__set_company(const std::string& val) {
  this->company = val;
}

void user_info::__set_buyer(const bool val) {
  this->buyer = val;
}

void user_info::__set_phone(const std::string& val) {
  this->phone = val;
}
std::ostream& operator<<(std::ostream& out, const user_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t user_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logo);
          this->__isset.logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->buyer);
          this->__isset.buyer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t user_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("user_info");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->logo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyer", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->buyer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(user_info &a, user_info &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.name, b.name);
  swap(a.logo, b.logo);
  swap(a.company, b.company);
  swap(a.buyer, b.buyer);
  swap(a.phone, b.phone);
  swap(a.__isset, b.__isset);
}

user_info::user_info(const user_info& other2) {
  user_id = other2.user_id;
  name = other2.name;
  logo = other2.logo;
  company = other2.company;
  buyer = other2.buyer;
  phone = other2.phone;
  __isset = other2.__isset;
}
user_info& user_info::operator=(const user_info& other3) {
  user_id = other3.user_id;
  name = other3.name;
  logo = other3.logo;
  company = other3.company;
  buyer = other3.buyer;
  phone = other3.phone;
  __isset = other3.__isset;
  return *this;
}
void user_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "user_info(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "logo=" << to_string(logo);
  out << ", " << "company=" << to_string(company);
  out << ", " << "buyer=" << to_string(buyer);
  out << ", " << "phone=" << to_string(phone);
  out << ")";
}


driver_info::~driver_info() noexcept {
}


void driver_info::__set_name(const std::string& val) {
  this->name = val;
}

void driver_info::__set_phone(const std::string& val) {
  this->phone = val;
}

void driver_info::__set_id(const int64_t val) {
  this->id = val;
}
std::ostream& operator<<(std::ostream& out, const driver_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t driver_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t driver_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("driver_info");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(driver_info &a, driver_info &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.phone, b.phone);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

driver_info::driver_info(const driver_info& other4) {
  name = other4.name;
  phone = other4.phone;
  id = other4.id;
  __isset = other4.__isset;
}
driver_info& driver_info::operator=(const driver_info& other5) {
  name = other5.name;
  phone = other5.phone;
  id = other5.id;
  __isset = other5.__isset;
  return *this;
}
void driver_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "driver_info(";
  out << "name=" << to_string(name);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


vichele_info_t::~vichele_info_t() noexcept {
}


void vichele_info_t::__set_number(const std::string& val) {
  this->number = val;
}

void vichele_info_t::__set_id(const int64_t val) {
  this->id = val;
}
std::ostream& operator<<(std::ostream& out, const vichele_info_t& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vichele_info_t::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->number);
          this->__isset.number = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->id);
          this->__isset.id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t vichele_info_t::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vichele_info_t");

  xfer += oprot->writeFieldBegin("number", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->number);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("id", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vichele_info_t &a, vichele_info_t &b) {
  using ::std::swap;
  swap(a.number, b.number);
  swap(a.id, b.id);
  swap(a.__isset, b.__isset);
}

vichele_info_t::vichele_info_t(const vichele_info_t& other6) {
  number = other6.number;
  id = other6.id;
  __isset = other6.__isset;
}
vichele_info_t& vichele_info_t::operator=(const vichele_info_t& other7) {
  number = other7.number;
  id = other7.id;
  __isset = other7.__isset;
  return *this;
}
void vichele_info_t::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vichele_info_t(";
  out << "number=" << to_string(number);
  out << ", " << "id=" << to_string(id);
  out << ")";
}


stuff_detail::~stuff_detail() noexcept {
}


void stuff_detail::__set_name(const std::string& val) {
  this->name = val;
}

void stuff_detail::__set_last(const std::string& val) {
  this->last = val;
}

void stuff_detail::__set_price(const int64_t val) {
  this->price = val;
}

void stuff_detail::__set_company(const std::string& val) {
  this->company = val;
}

void stuff_detail::__set_type_id(const int64_t val) {
  this->type_id = val;
}

void stuff_detail::__set_saling(const bool val) {
  this->saling = val;
}
std::ostream& operator<<(std::ostream& out, const stuff_detail& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t stuff_detail::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last);
          this->__isset.last = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->saling);
          this->__isset.saling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stuff_detail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("stuff_detail");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->last);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saling", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->saling);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stuff_detail &a, stuff_detail &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.last, b.last);
  swap(a.price, b.price);
  swap(a.company, b.company);
  swap(a.type_id, b.type_id);
  swap(a.saling, b.saling);
  swap(a.__isset, b.__isset);
}

stuff_detail::stuff_detail(const stuff_detail& other8) {
  name = other8.name;
  last = other8.last;
  price = other8.price;
  company = other8.company;
  type_id = other8.type_id;
  saling = other8.saling;
  __isset = other8.__isset;
}
stuff_detail& stuff_detail::operator=(const stuff_detail& other9) {
  name = other9.name;
  last = other9.last;
  price = other9.price;
  company = other9.company;
  type_id = other9.type_id;
  saling = other9.saling;
  __isset = other9.__isset;
  return *this;
}
void stuff_detail::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "stuff_detail(";
  out << "name=" << to_string(name);
  out << ", " << "last=" << to_string(last);
  out << ", " << "price=" << to_string(price);
  out << ", " << "company=" << to_string(company);
  out << ", " << "type_id=" << to_string(type_id);
  out << ", " << "saling=" << to_string(saling);
  out << ")";
}


user_apply::~user_apply() noexcept {
}


void user_apply::__set_name(const std::string& val) {
  this->name = val;
}

void user_apply::__set_phone(const std::string& val) {
  this->phone = val;
}

void user_apply::__set_logo(const std::string& val) {
  this->logo = val;
}

void user_apply::__set_apply_id(const int64_t val) {
  this->apply_id = val;
}

void user_apply::__set_status(const int64_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const user_apply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t user_apply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logo);
          this->__isset.logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->apply_id);
          this->__isset.apply_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t user_apply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("user_apply");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->logo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("apply_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->apply_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(user_apply &a, user_apply &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.phone, b.phone);
  swap(a.logo, b.logo);
  swap(a.apply_id, b.apply_id);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

user_apply::user_apply(const user_apply& other10) {
  name = other10.name;
  phone = other10.phone;
  logo = other10.logo;
  apply_id = other10.apply_id;
  status = other10.status;
  __isset = other10.__isset;
}
user_apply& user_apply::operator=(const user_apply& other11) {
  name = other11.name;
  phone = other11.phone;
  logo = other11.logo;
  apply_id = other11.apply_id;
  status = other11.status;
  __isset = other11.__isset;
  return *this;
}
void user_apply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "user_apply(";
  out << "name=" << to_string(name);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "logo=" << to_string(logo);
  out << ", " << "apply_id=" << to_string(apply_id);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


plan_confirm_info::~plan_confirm_info() noexcept {
}


void plan_confirm_info::__set_timestamp(const std::string& val) {
  this->timestamp = val;
}

void plan_confirm_info::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const plan_confirm_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t plan_confirm_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t plan_confirm_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("plan_confirm_info");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(plan_confirm_info &a, plan_confirm_info &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

plan_confirm_info::plan_confirm_info(const plan_confirm_info& other12) {
  timestamp = other12.timestamp;
  name = other12.name;
  __isset = other12.__isset;
}
plan_confirm_info& plan_confirm_info::operator=(const plan_confirm_info& other13) {
  timestamp = other13.timestamp;
  name = other13.name;
  __isset = other13.__isset;
  return *this;
}
void plan_confirm_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "plan_confirm_info(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


pay_confirm_info::~pay_confirm_info() noexcept {
}


void pay_confirm_info::__set_timestamp(const std::string& val) {
  this->timestamp = val;
}

void pay_confirm_info::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const pay_confirm_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t pay_confirm_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t pay_confirm_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("pay_confirm_info");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(pay_confirm_info &a, pay_confirm_info &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

pay_confirm_info::pay_confirm_info(const pay_confirm_info& other14) {
  timestamp = other14.timestamp;
  name = other14.name;
  __isset = other14.__isset;
}
pay_confirm_info& pay_confirm_info::operator=(const pay_confirm_info& other15) {
  timestamp = other15.timestamp;
  name = other15.name;
  __isset = other15.__isset;
  return *this;
}
void pay_confirm_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "pay_confirm_info(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


vichele_in_plan::~vichele_in_plan() noexcept {
}


void vichele_in_plan::__set_main_vichele(const std::string& val) {
  this->main_vichele = val;
}

void vichele_in_plan::__set_behind_vichele(const std::string& val) {
  this->behind_vichele = val;
}

void vichele_in_plan::__set_driver_name(const std::string& val) {
  this->driver_name = val;
}

void vichele_in_plan::__set_driver_phone(const std::string& val) {
  this->driver_phone = val;
}

void vichele_in_plan::__set_count(const double val) {
  this->count = val;
}

void vichele_in_plan::__set_drop_address(const std::string& val) {
  this->drop_address = val;
}

void vichele_in_plan::__set_use_for(const std::string& val) {
  this->use_for = val;
}
std::ostream& operator<<(std::ostream& out, const vichele_in_plan& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t vichele_in_plan::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->main_vichele);
          this->__isset.main_vichele = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->behind_vichele);
          this->__isset.behind_vichele = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_name);
          this->__isset.driver_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->driver_phone);
          this->__isset.driver_phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->drop_address);
          this->__isset.drop_address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->use_for);
          this->__isset.use_for = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t vichele_in_plan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("vichele_in_plan");

  xfer += oprot->writeFieldBegin("main_vichele", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->main_vichele);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("behind_vichele", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->behind_vichele);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->driver_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("driver_phone", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->driver_phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("drop_address", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->drop_address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("use_for", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->use_for);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(vichele_in_plan &a, vichele_in_plan &b) {
  using ::std::swap;
  swap(a.main_vichele, b.main_vichele);
  swap(a.behind_vichele, b.behind_vichele);
  swap(a.driver_name, b.driver_name);
  swap(a.driver_phone, b.driver_phone);
  swap(a.count, b.count);
  swap(a.drop_address, b.drop_address);
  swap(a.use_for, b.use_for);
  swap(a.__isset, b.__isset);
}

vichele_in_plan::vichele_in_plan(const vichele_in_plan& other16) {
  main_vichele = other16.main_vichele;
  behind_vichele = other16.behind_vichele;
  driver_name = other16.driver_name;
  driver_phone = other16.driver_phone;
  count = other16.count;
  drop_address = other16.drop_address;
  use_for = other16.use_for;
  __isset = other16.__isset;
}
vichele_in_plan& vichele_in_plan::operator=(const vichele_in_plan& other17) {
  main_vichele = other17.main_vichele;
  behind_vichele = other17.behind_vichele;
  driver_name = other17.driver_name;
  driver_phone = other17.driver_phone;
  count = other17.count;
  drop_address = other17.drop_address;
  use_for = other17.use_for;
  __isset = other17.__isset;
  return *this;
}
void vichele_in_plan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "vichele_in_plan(";
  out << "main_vichele=" << to_string(main_vichele);
  out << ", " << "behind_vichele=" << to_string(behind_vichele);
  out << ", " << "driver_name=" << to_string(driver_name);
  out << ", " << "driver_phone=" << to_string(driver_phone);
  out << ", " << "count=" << to_string(count);
  out << ", " << "drop_address=" << to_string(drop_address);
  out << ", " << "use_for=" << to_string(use_for);
  out << ")";
}


stuff_plan::~stuff_plan() noexcept {
}


void stuff_plan::__set_type_id(const int64_t val) {
  this->type_id = val;
}

void stuff_plan::__set_count(const double val) {
  this->count = val;
}

void stuff_plan::__set_vichele_info(const std::vector<vichele_in_plan> & val) {
  this->vichele_info = val;
}

void stuff_plan::__set_plan_id(const int64_t val) {
  this->plan_id = val;
}

void stuff_plan::__set_plan_time(const std::string& val) {
  this->plan_time = val;
}

void stuff_plan::__set_created_time(const int64_t val) {
  this->created_time = val;
}

void stuff_plan::__set_name(const std::string& val) {
  this->name = val;
}

void stuff_plan::__set_price(const double val) {
  this->price = val;
}

void stuff_plan::__set_status(const int64_t val) {
  this->status = val;
}

void stuff_plan::__set_comment(const std::string& val) {
  this->comment = val;
}

void stuff_plan::__set_plan_confirm(const plan_confirm_info& val) {
  this->plan_confirm = val;
}

void stuff_plan::__set_pay_confirm(const pay_confirm_info& val) {
  this->pay_confirm = val;
}

void stuff_plan::__set_pay_info(const std::string& val) {
  this->pay_info = val;
}

void stuff_plan::__set_pay_timestamp(const std::string& val) {
  this->pay_timestamp = val;
}

void stuff_plan::__set_close_timestamp(const std::string& val) {
  this->close_timestamp = val;
}

void stuff_plan::__set_close_by(const std::string& val) {
  this->close_by = val;
}

void stuff_plan::__set_except_close_by(const std::string& val) {
  this->except_close_by = val;
}

void stuff_plan::__set_except_close_timestamp(const std::string& val) {
  this->except_close_timestamp = val;
}

void stuff_plan::__set_except_close_reason(const std::string& val) {
  this->except_close_reason = val;
}

void stuff_plan::__set_proxy_company(const std::string& val) {
  this->proxy_company = val;
}

void stuff_plan::__set_created_user_name(const std::string& val) {
  this->created_user_name = val;
}

void stuff_plan::__set_buy_company(const std::string& val) {
  this->buy_company = val;
}

void stuff_plan::__set_sale_company(const std::string& val) {
  this->sale_company = val;
}
std::ostream& operator<<(std::ostream& out, const stuff_plan& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t stuff_plan::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vichele_info.clear();
            uint32_t _size18;
            ::apache::thrift::protocol::TType _etype21;
            xfer += iprot->readListBegin(_etype21, _size18);
            this->vichele_info.resize(_size18);
            uint32_t _i22;
            for (_i22 = 0; _i22 < _size18; ++_i22)
            {
              xfer += this->vichele_info[_i22].read(iprot);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vichele_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_id);
          this->__isset.plan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plan_time);
          this->__isset.plan_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created_time);
          this->__isset.created_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->plan_confirm.read(iprot);
          this->__isset.plan_confirm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pay_confirm.read(iprot);
          this->__isset.pay_confirm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pay_info);
          this->__isset.pay_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pay_timestamp);
          this->__isset.pay_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->close_timestamp);
          this->__isset.close_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->close_by);
          this->__isset.close_by = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->except_close_by);
          this->__isset.except_close_by = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->except_close_timestamp);
          this->__isset.except_close_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->except_close_reason);
          this->__isset.except_close_reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->proxy_company);
          this->__isset.proxy_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->created_user_name);
          this->__isset.created_user_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buy_company);
          this->__isset.buy_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->sale_company);
          this->__isset.sale_company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stuff_plan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("stuff_plan");

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vichele_info", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRUCT, static_cast<uint32_t>(this->vichele_info.size()));
    std::vector<vichele_in_plan> ::const_iterator _iter23;
    for (_iter23 = this->vichele_info.begin(); _iter23 != this->vichele_info.end(); ++_iter23)
    {
      xfer += (*_iter23).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->plan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_time", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->plan_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_time", ::apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->created_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_DOUBLE, 8);
  xfer += oprot->writeDouble(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_confirm", ::apache::thrift::protocol::T_STRUCT, 11);
  xfer += this->plan_confirm.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pay_confirm", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->pay_confirm.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pay_info", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->pay_info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pay_timestamp", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->pay_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_timestamp", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->close_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_by", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->close_by);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("except_close_by", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->except_close_by);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("except_close_timestamp", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->except_close_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("except_close_reason", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->except_close_reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("proxy_company", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->proxy_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_user_name", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->created_user_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buy_company", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->buy_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sale_company", ::apache::thrift::protocol::T_STRING, 23);
  xfer += oprot->writeString(this->sale_company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stuff_plan &a, stuff_plan &b) {
  using ::std::swap;
  swap(a.type_id, b.type_id);
  swap(a.count, b.count);
  swap(a.vichele_info, b.vichele_info);
  swap(a.plan_id, b.plan_id);
  swap(a.plan_time, b.plan_time);
  swap(a.created_time, b.created_time);
  swap(a.name, b.name);
  swap(a.price, b.price);
  swap(a.status, b.status);
  swap(a.comment, b.comment);
  swap(a.plan_confirm, b.plan_confirm);
  swap(a.pay_confirm, b.pay_confirm);
  swap(a.pay_info, b.pay_info);
  swap(a.pay_timestamp, b.pay_timestamp);
  swap(a.close_timestamp, b.close_timestamp);
  swap(a.close_by, b.close_by);
  swap(a.except_close_by, b.except_close_by);
  swap(a.except_close_timestamp, b.except_close_timestamp);
  swap(a.except_close_reason, b.except_close_reason);
  swap(a.proxy_company, b.proxy_company);
  swap(a.created_user_name, b.created_user_name);
  swap(a.buy_company, b.buy_company);
  swap(a.sale_company, b.sale_company);
  swap(a.__isset, b.__isset);
}

stuff_plan::stuff_plan(const stuff_plan& other24) {
  type_id = other24.type_id;
  count = other24.count;
  vichele_info = other24.vichele_info;
  plan_id = other24.plan_id;
  plan_time = other24.plan_time;
  created_time = other24.created_time;
  name = other24.name;
  price = other24.price;
  status = other24.status;
  comment = other24.comment;
  plan_confirm = other24.plan_confirm;
  pay_confirm = other24.pay_confirm;
  pay_info = other24.pay_info;
  pay_timestamp = other24.pay_timestamp;
  close_timestamp = other24.close_timestamp;
  close_by = other24.close_by;
  except_close_by = other24.except_close_by;
  except_close_timestamp = other24.except_close_timestamp;
  except_close_reason = other24.except_close_reason;
  proxy_company = other24.proxy_company;
  created_user_name = other24.created_user_name;
  buy_company = other24.buy_company;
  sale_company = other24.sale_company;
  __isset = other24.__isset;
}
stuff_plan& stuff_plan::operator=(const stuff_plan& other25) {
  type_id = other25.type_id;
  count = other25.count;
  vichele_info = other25.vichele_info;
  plan_id = other25.plan_id;
  plan_time = other25.plan_time;
  created_time = other25.created_time;
  name = other25.name;
  price = other25.price;
  status = other25.status;
  comment = other25.comment;
  plan_confirm = other25.plan_confirm;
  pay_confirm = other25.pay_confirm;
  pay_info = other25.pay_info;
  pay_timestamp = other25.pay_timestamp;
  close_timestamp = other25.close_timestamp;
  close_by = other25.close_by;
  except_close_by = other25.except_close_by;
  except_close_timestamp = other25.except_close_timestamp;
  except_close_reason = other25.except_close_reason;
  proxy_company = other25.proxy_company;
  created_user_name = other25.created_user_name;
  buy_company = other25.buy_company;
  sale_company = other25.sale_company;
  __isset = other25.__isset;
  return *this;
}
void stuff_plan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "stuff_plan(";
  out << "type_id=" << to_string(type_id);
  out << ", " << "count=" << to_string(count);
  out << ", " << "vichele_info=" << to_string(vichele_info);
  out << ", " << "plan_id=" << to_string(plan_id);
  out << ", " << "plan_time=" << to_string(plan_time);
  out << ", " << "created_time=" << to_string(created_time);
  out << ", " << "name=" << to_string(name);
  out << ", " << "price=" << to_string(price);
  out << ", " << "status=" << to_string(status);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "plan_confirm=" << to_string(plan_confirm);
  out << ", " << "pay_confirm=" << to_string(pay_confirm);
  out << ", " << "pay_info=" << to_string(pay_info);
  out << ", " << "pay_timestamp=" << to_string(pay_timestamp);
  out << ", " << "close_timestamp=" << to_string(close_timestamp);
  out << ", " << "close_by=" << to_string(close_by);
  out << ", " << "except_close_by=" << to_string(except_close_by);
  out << ", " << "except_close_timestamp=" << to_string(except_close_timestamp);
  out << ", " << "except_close_reason=" << to_string(except_close_reason);
  out << ", " << "proxy_company=" << to_string(proxy_company);
  out << ", " << "created_user_name=" << to_string(created_user_name);
  out << ", " << "buy_company=" << to_string(buy_company);
  out << ", " << "sale_company=" << to_string(sale_company);
  out << ")";
}


plan_status::~plan_status() noexcept {
}


void plan_status::__set_plan_id(const int64_t val) {
  this->plan_id = val;
}

void plan_status::__set_status(const int64_t val) {
  this->status = val;
}

void plan_status::__set_plan_time(const int64_t val) {
  this->plan_time = val;
}
std::ostream& operator<<(std::ostream& out, const plan_status& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t plan_status::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_id);
          this->__isset.plan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_time);
          this->__isset.plan_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t plan_status::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("plan_status");

  xfer += oprot->writeFieldBegin("plan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->plan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_time", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->plan_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(plan_status &a, plan_status &b) {
  using ::std::swap;
  swap(a.plan_id, b.plan_id);
  swap(a.status, b.status);
  swap(a.plan_time, b.plan_time);
  swap(a.__isset, b.__isset);
}

plan_status::plan_status(const plan_status& other26) {
  plan_id = other26.plan_id;
  status = other26.status;
  plan_time = other26.plan_time;
  __isset = other26.__isset;
}
plan_status& plan_status::operator=(const plan_status& other27) {
  plan_id = other27.plan_id;
  status = other27.status;
  plan_time = other27.plan_time;
  __isset = other27.__isset;
  return *this;
}
void plan_status::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "plan_status(";
  out << "plan_id=" << to_string(plan_id);
  out << ", " << "status=" << to_string(status);
  out << ", " << "plan_time=" << to_string(plan_time);
  out << ")";
}


