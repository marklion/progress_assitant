/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "idl_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




user_info::~user_info() noexcept {
}


void user_info::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void user_info::__set_name(const std::string& val) {
  this->name = val;
}

void user_info::__set_logo(const std::string& val) {
  this->logo = val;
}

void user_info::__set_company(const std::string& val) {
  this->company = val;
}

void user_info::__set_buyer(const bool val) {
  this->buyer = val;
}

void user_info::__set_phone(const std::string& val) {
  this->phone = val;
}
std::ostream& operator<<(std::ostream& out, const user_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t user_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logo);
          this->__isset.logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->buyer);
          this->__isset.buyer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t user_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("user_info");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->logo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyer", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->buyer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(user_info &a, user_info &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.name, b.name);
  swap(a.logo, b.logo);
  swap(a.company, b.company);
  swap(a.buyer, b.buyer);
  swap(a.phone, b.phone);
  swap(a.__isset, b.__isset);
}

user_info::user_info(const user_info& other0) {
  user_id = other0.user_id;
  name = other0.name;
  logo = other0.logo;
  company = other0.company;
  buyer = other0.buyer;
  phone = other0.phone;
  __isset = other0.__isset;
}
user_info& user_info::operator=(const user_info& other1) {
  user_id = other1.user_id;
  name = other1.name;
  logo = other1.logo;
  company = other1.company;
  buyer = other1.buyer;
  phone = other1.phone;
  __isset = other1.__isset;
  return *this;
}
void user_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "user_info(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "logo=" << to_string(logo);
  out << ", " << "company=" << to_string(company);
  out << ", " << "buyer=" << to_string(buyer);
  out << ", " << "phone=" << to_string(phone);
  out << ")";
}


stuff_detail::~stuff_detail() noexcept {
}


void stuff_detail::__set_name(const std::string& val) {
  this->name = val;
}

void stuff_detail::__set_last(const std::string& val) {
  this->last = val;
}

void stuff_detail::__set_price(const int64_t val) {
  this->price = val;
}

void stuff_detail::__set_company(const std::string& val) {
  this->company = val;
}

void stuff_detail::__set_type_id(const int64_t val) {
  this->type_id = val;
}
std::ostream& operator<<(std::ostream& out, const stuff_detail& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t stuff_detail::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last);
          this->__isset.last = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stuff_detail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("stuff_detail");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->last);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stuff_detail &a, stuff_detail &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.last, b.last);
  swap(a.price, b.price);
  swap(a.company, b.company);
  swap(a.type_id, b.type_id);
  swap(a.__isset, b.__isset);
}

stuff_detail::stuff_detail(const stuff_detail& other2) {
  name = other2.name;
  last = other2.last;
  price = other2.price;
  company = other2.company;
  type_id = other2.type_id;
  __isset = other2.__isset;
}
stuff_detail& stuff_detail::operator=(const stuff_detail& other3) {
  name = other3.name;
  last = other3.last;
  price = other3.price;
  company = other3.company;
  type_id = other3.type_id;
  __isset = other3.__isset;
  return *this;
}
void stuff_detail::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "stuff_detail(";
  out << "name=" << to_string(name);
  out << ", " << "last=" << to_string(last);
  out << ", " << "price=" << to_string(price);
  out << ", " << "company=" << to_string(company);
  out << ", " << "type_id=" << to_string(type_id);
  out << ")";
}


stuff_plan::~stuff_plan() noexcept {
}


void stuff_plan::__set_type_id(const int64_t val) {
  this->type_id = val;
}

void stuff_plan::__set_count(const double val) {
  this->count = val;
}

void stuff_plan::__set_vichele_info(const std::vector<std::string> & val) {
  this->vichele_info = val;
}

void stuff_plan::__set_plan_id(const int64_t val) {
  this->plan_id = val;
}

void stuff_plan::__set_created_by(const int64_t val) {
  this->created_by = val;
}

void stuff_plan::__set_plan_time(const std::string& val) {
  this->plan_time = val;
}

void stuff_plan::__set_created_time(const int64_t val) {
  this->created_time = val;
}
std::ostream& operator<<(std::ostream& out, const stuff_plan& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t stuff_plan::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vichele_info.clear();
            uint32_t _size4;
            ::apache::thrift::protocol::TType _etype7;
            xfer += iprot->readListBegin(_etype7, _size4);
            this->vichele_info.resize(_size4);
            uint32_t _i8;
            for (_i8 = 0; _i8 < _size4; ++_i8)
            {
              xfer += iprot->readString(this->vichele_info[_i8]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vichele_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_id);
          this->__isset.plan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created_by);
          this->__isset.created_by = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plan_time);
          this->__isset.plan_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created_time);
          this->__isset.created_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stuff_plan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("stuff_plan");

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vichele_info", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->vichele_info.size()));
    std::vector<std::string> ::const_iterator _iter9;
    for (_iter9 = this->vichele_info.begin(); _iter9 != this->vichele_info.end(); ++_iter9)
    {
      xfer += oprot->writeString((*_iter9));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->plan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_by", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->created_by);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_time", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->plan_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_time", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->created_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stuff_plan &a, stuff_plan &b) {
  using ::std::swap;
  swap(a.type_id, b.type_id);
  swap(a.count, b.count);
  swap(a.vichele_info, b.vichele_info);
  swap(a.plan_id, b.plan_id);
  swap(a.created_by, b.created_by);
  swap(a.plan_time, b.plan_time);
  swap(a.created_time, b.created_time);
  swap(a.__isset, b.__isset);
}

stuff_plan::stuff_plan(const stuff_plan& other10) {
  type_id = other10.type_id;
  count = other10.count;
  vichele_info = other10.vichele_info;
  plan_id = other10.plan_id;
  created_by = other10.created_by;
  plan_time = other10.plan_time;
  created_time = other10.created_time;
  __isset = other10.__isset;
}
stuff_plan& stuff_plan::operator=(const stuff_plan& other11) {
  type_id = other11.type_id;
  count = other11.count;
  vichele_info = other11.vichele_info;
  plan_id = other11.plan_id;
  created_by = other11.created_by;
  plan_time = other11.plan_time;
  created_time = other11.created_time;
  __isset = other11.__isset;
  return *this;
}
void stuff_plan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "stuff_plan(";
  out << "type_id=" << to_string(type_id);
  out << ", " << "count=" << to_string(count);
  out << ", " << "vichele_info=" << to_string(vichele_info);
  out << ", " << "plan_id=" << to_string(plan_id);
  out << ", " << "created_by=" << to_string(created_by);
  out << ", " << "plan_time=" << to_string(plan_time);
  out << ", " << "created_time=" << to_string(created_time);
  out << ")";
}


