/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "idl_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>




gen_exp::~gen_exp() noexcept {
}


void gen_exp::__set_msg(const std::string& val) {
  this->msg = val;
}
std::ostream& operator<<(std::ostream& out, const gen_exp& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t gen_exp::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t gen_exp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("gen_exp");

  xfer += oprot->writeFieldBegin("msg", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(gen_exp &a, gen_exp &b) {
  using ::std::swap;
  swap(a.msg, b.msg);
  swap(a.__isset, b.__isset);
}

gen_exp::gen_exp(const gen_exp& other0) : TException() {
  msg = other0.msg;
  __isset = other0.__isset;
}
gen_exp& gen_exp::operator=(const gen_exp& other1) {
  msg = other1.msg;
  __isset = other1.__isset;
  return *this;
}
void gen_exp::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "gen_exp(";
  out << "msg=" << to_string(msg);
  out << ")";
}

const char* gen_exp::what() const noexcept {
  try {
    std::stringstream ss;
    ss << "TException - service has thrown: " << *this;
    this->thriftTExceptionMessageHolder_ = ss.str();
    return this->thriftTExceptionMessageHolder_.c_str();
  } catch (const std::exception&) {
    return "TException - service has thrown: gen_exp";
  }
}


user_info::~user_info() noexcept {
}


void user_info::__set_user_id(const int64_t val) {
  this->user_id = val;
}

void user_info::__set_name(const std::string& val) {
  this->name = val;
}

void user_info::__set_logo(const std::string& val) {
  this->logo = val;
}

void user_info::__set_company(const std::string& val) {
  this->company = val;
}

void user_info::__set_buyer(const bool val) {
  this->buyer = val;
}

void user_info::__set_phone(const std::string& val) {
  this->phone = val;
}
std::ostream& operator<<(std::ostream& out, const user_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t user_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->user_id);
          this->__isset.user_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logo);
          this->__isset.logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->buyer);
          this->__isset.buyer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t user_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("user_info");

  xfer += oprot->writeFieldBegin("user_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->user_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->logo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("buyer", ::apache::thrift::protocol::T_BOOL, 5);
  xfer += oprot->writeBool(this->buyer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(user_info &a, user_info &b) {
  using ::std::swap;
  swap(a.user_id, b.user_id);
  swap(a.name, b.name);
  swap(a.logo, b.logo);
  swap(a.company, b.company);
  swap(a.buyer, b.buyer);
  swap(a.phone, b.phone);
  swap(a.__isset, b.__isset);
}

user_info::user_info(const user_info& other2) {
  user_id = other2.user_id;
  name = other2.name;
  logo = other2.logo;
  company = other2.company;
  buyer = other2.buyer;
  phone = other2.phone;
  __isset = other2.__isset;
}
user_info& user_info::operator=(const user_info& other3) {
  user_id = other3.user_id;
  name = other3.name;
  logo = other3.logo;
  company = other3.company;
  buyer = other3.buyer;
  phone = other3.phone;
  __isset = other3.__isset;
  return *this;
}
void user_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "user_info(";
  out << "user_id=" << to_string(user_id);
  out << ", " << "name=" << to_string(name);
  out << ", " << "logo=" << to_string(logo);
  out << ", " << "company=" << to_string(company);
  out << ", " << "buyer=" << to_string(buyer);
  out << ", " << "phone=" << to_string(phone);
  out << ")";
}


stuff_detail::~stuff_detail() noexcept {
}


void stuff_detail::__set_name(const std::string& val) {
  this->name = val;
}

void stuff_detail::__set_last(const std::string& val) {
  this->last = val;
}

void stuff_detail::__set_price(const int64_t val) {
  this->price = val;
}

void stuff_detail::__set_company(const std::string& val) {
  this->company = val;
}

void stuff_detail::__set_type_id(const int64_t val) {
  this->type_id = val;
}

void stuff_detail::__set_saling(const bool val) {
  this->saling = val;
}
std::ostream& operator<<(std::ostream& out, const stuff_detail& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t stuff_detail::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->last);
          this->__isset.last = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->company);
          this->__isset.company = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->saling);
          this->__isset.saling = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stuff_detail::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("stuff_detail");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("last", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->last);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("company", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->company);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("saling", ::apache::thrift::protocol::T_BOOL, 6);
  xfer += oprot->writeBool(this->saling);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stuff_detail &a, stuff_detail &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.last, b.last);
  swap(a.price, b.price);
  swap(a.company, b.company);
  swap(a.type_id, b.type_id);
  swap(a.saling, b.saling);
  swap(a.__isset, b.__isset);
}

stuff_detail::stuff_detail(const stuff_detail& other4) {
  name = other4.name;
  last = other4.last;
  price = other4.price;
  company = other4.company;
  type_id = other4.type_id;
  saling = other4.saling;
  __isset = other4.__isset;
}
stuff_detail& stuff_detail::operator=(const stuff_detail& other5) {
  name = other5.name;
  last = other5.last;
  price = other5.price;
  company = other5.company;
  type_id = other5.type_id;
  saling = other5.saling;
  __isset = other5.__isset;
  return *this;
}
void stuff_detail::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "stuff_detail(";
  out << "name=" << to_string(name);
  out << ", " << "last=" << to_string(last);
  out << ", " << "price=" << to_string(price);
  out << ", " << "company=" << to_string(company);
  out << ", " << "type_id=" << to_string(type_id);
  out << ", " << "saling=" << to_string(saling);
  out << ")";
}


user_apply::~user_apply() noexcept {
}


void user_apply::__set_name(const std::string& val) {
  this->name = val;
}

void user_apply::__set_phone(const std::string& val) {
  this->phone = val;
}

void user_apply::__set_logo(const std::string& val) {
  this->logo = val;
}

void user_apply::__set_apply_id(const int64_t val) {
  this->apply_id = val;
}

void user_apply::__set_status(const int64_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const user_apply& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t user_apply::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->phone);
          this->__isset.phone = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->logo);
          this->__isset.logo = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->apply_id);
          this->__isset.apply_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t user_apply::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("user_apply");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("phone", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->phone);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("logo", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->logo);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("apply_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->apply_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(user_apply &a, user_apply &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.phone, b.phone);
  swap(a.logo, b.logo);
  swap(a.apply_id, b.apply_id);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

user_apply::user_apply(const user_apply& other6) {
  name = other6.name;
  phone = other6.phone;
  logo = other6.logo;
  apply_id = other6.apply_id;
  status = other6.status;
  __isset = other6.__isset;
}
user_apply& user_apply::operator=(const user_apply& other7) {
  name = other7.name;
  phone = other7.phone;
  logo = other7.logo;
  apply_id = other7.apply_id;
  status = other7.status;
  __isset = other7.__isset;
  return *this;
}
void user_apply::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "user_apply(";
  out << "name=" << to_string(name);
  out << ", " << "phone=" << to_string(phone);
  out << ", " << "logo=" << to_string(logo);
  out << ", " << "apply_id=" << to_string(apply_id);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


plan_confirm_info::~plan_confirm_info() noexcept {
}


void plan_confirm_info::__set_timestamp(const std::string& val) {
  this->timestamp = val;
}

void plan_confirm_info::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const plan_confirm_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t plan_confirm_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t plan_confirm_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("plan_confirm_info");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(plan_confirm_info &a, plan_confirm_info &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

plan_confirm_info::plan_confirm_info(const plan_confirm_info& other8) {
  timestamp = other8.timestamp;
  name = other8.name;
  __isset = other8.__isset;
}
plan_confirm_info& plan_confirm_info::operator=(const plan_confirm_info& other9) {
  timestamp = other9.timestamp;
  name = other9.name;
  __isset = other9.__isset;
  return *this;
}
void plan_confirm_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "plan_confirm_info(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


pay_confirm_info::~pay_confirm_info() noexcept {
}


void pay_confirm_info::__set_timestamp(const std::string& val) {
  this->timestamp = val;
}

void pay_confirm_info::__set_name(const std::string& val) {
  this->name = val;
}
std::ostream& operator<<(std::ostream& out, const pay_confirm_info& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t pay_confirm_info::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t pay_confirm_info::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("pay_confirm_info");

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(pay_confirm_info &a, pay_confirm_info &b) {
  using ::std::swap;
  swap(a.timestamp, b.timestamp);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

pay_confirm_info::pay_confirm_info(const pay_confirm_info& other10) {
  timestamp = other10.timestamp;
  name = other10.name;
  __isset = other10.__isset;
}
pay_confirm_info& pay_confirm_info::operator=(const pay_confirm_info& other11) {
  timestamp = other11.timestamp;
  name = other11.name;
  __isset = other11.__isset;
  return *this;
}
void pay_confirm_info::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "pay_confirm_info(";
  out << "timestamp=" << to_string(timestamp);
  out << ", " << "name=" << to_string(name);
  out << ")";
}


stuff_plan::~stuff_plan() noexcept {
}


void stuff_plan::__set_type_id(const int64_t val) {
  this->type_id = val;
}

void stuff_plan::__set_count(const double val) {
  this->count = val;
}

void stuff_plan::__set_vichele_info(const std::vector<std::string> & val) {
  this->vichele_info = val;
}

void stuff_plan::__set_plan_id(const int64_t val) {
  this->plan_id = val;
}

void stuff_plan::__set_created_by(const int64_t val) {
  this->created_by = val;
}

void stuff_plan::__set_plan_time(const std::string& val) {
  this->plan_time = val;
}

void stuff_plan::__set_created_time(const int64_t val) {
  this->created_time = val;
}

void stuff_plan::__set_name(const std::string& val) {
  this->name = val;
}

void stuff_plan::__set_price(const double val) {
  this->price = val;
}

void stuff_plan::__set_status(const int64_t val) {
  this->status = val;
}

void stuff_plan::__set_comment(const std::string& val) {
  this->comment = val;
}

void stuff_plan::__set_plan_confirm(const plan_confirm_info& val) {
  this->plan_confirm = val;
}

void stuff_plan::__set_pay_confirm(const pay_confirm_info& val) {
  this->pay_confirm = val;
}

void stuff_plan::__set_pay_info(const std::string& val) {
  this->pay_info = val;
}

void stuff_plan::__set_pay_timestamp(const std::string& val) {
  this->pay_timestamp = val;
}

void stuff_plan::__set_close_timestamp(const std::string& val) {
  this->close_timestamp = val;
}

void stuff_plan::__set_close_by(const std::string& val) {
  this->close_by = val;
}
std::ostream& operator<<(std::ostream& out, const stuff_plan& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t stuff_plan::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->type_id);
          this->__isset.type_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->count);
          this->__isset.count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->vichele_info.clear();
            uint32_t _size12;
            ::apache::thrift::protocol::TType _etype15;
            xfer += iprot->readListBegin(_etype15, _size12);
            this->vichele_info.resize(_size12);
            uint32_t _i16;
            for (_i16 = 0; _i16 < _size12; ++_i16)
            {
              xfer += iprot->readString(this->vichele_info[_i16]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.vichele_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_id);
          this->__isset.plan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created_by);
          this->__isset.created_by = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->plan_time);
          this->__isset.plan_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->created_time);
          this->__isset.created_time = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->price);
          this->__isset.price = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->comment);
          this->__isset.comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->plan_confirm.read(iprot);
          this->__isset.plan_confirm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->pay_confirm.read(iprot);
          this->__isset.pay_confirm = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pay_info);
          this->__isset.pay_info = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pay_timestamp);
          this->__isset.pay_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->close_timestamp);
          this->__isset.close_timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->close_by);
          this->__isset.close_by = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t stuff_plan::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("stuff_plan");

  xfer += oprot->writeFieldBegin("type_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->type_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("count", ::apache::thrift::protocol::T_DOUBLE, 2);
  xfer += oprot->writeDouble(this->count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("vichele_info", ::apache::thrift::protocol::T_LIST, 3);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->vichele_info.size()));
    std::vector<std::string> ::const_iterator _iter17;
    for (_iter17 = this->vichele_info.begin(); _iter17 != this->vichele_info.end(); ++_iter17)
    {
      xfer += oprot->writeString((*_iter17));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_id", ::apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->plan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_by", ::apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->created_by);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_time", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->plan_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("created_time", ::apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->created_time);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("price", ::apache::thrift::protocol::T_DOUBLE, 9);
  xfer += oprot->writeDouble(this->price);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("comment", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("plan_confirm", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->plan_confirm.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pay_confirm", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->pay_confirm.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pay_info", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->pay_info);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pay_timestamp", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->pay_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_timestamp", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->close_timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("close_by", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->close_by);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(stuff_plan &a, stuff_plan &b) {
  using ::std::swap;
  swap(a.type_id, b.type_id);
  swap(a.count, b.count);
  swap(a.vichele_info, b.vichele_info);
  swap(a.plan_id, b.plan_id);
  swap(a.created_by, b.created_by);
  swap(a.plan_time, b.plan_time);
  swap(a.created_time, b.created_time);
  swap(a.name, b.name);
  swap(a.price, b.price);
  swap(a.status, b.status);
  swap(a.comment, b.comment);
  swap(a.plan_confirm, b.plan_confirm);
  swap(a.pay_confirm, b.pay_confirm);
  swap(a.pay_info, b.pay_info);
  swap(a.pay_timestamp, b.pay_timestamp);
  swap(a.close_timestamp, b.close_timestamp);
  swap(a.close_by, b.close_by);
  swap(a.__isset, b.__isset);
}

stuff_plan::stuff_plan(const stuff_plan& other18) {
  type_id = other18.type_id;
  count = other18.count;
  vichele_info = other18.vichele_info;
  plan_id = other18.plan_id;
  created_by = other18.created_by;
  plan_time = other18.plan_time;
  created_time = other18.created_time;
  name = other18.name;
  price = other18.price;
  status = other18.status;
  comment = other18.comment;
  plan_confirm = other18.plan_confirm;
  pay_confirm = other18.pay_confirm;
  pay_info = other18.pay_info;
  pay_timestamp = other18.pay_timestamp;
  close_timestamp = other18.close_timestamp;
  close_by = other18.close_by;
  __isset = other18.__isset;
}
stuff_plan& stuff_plan::operator=(const stuff_plan& other19) {
  type_id = other19.type_id;
  count = other19.count;
  vichele_info = other19.vichele_info;
  plan_id = other19.plan_id;
  created_by = other19.created_by;
  plan_time = other19.plan_time;
  created_time = other19.created_time;
  name = other19.name;
  price = other19.price;
  status = other19.status;
  comment = other19.comment;
  plan_confirm = other19.plan_confirm;
  pay_confirm = other19.pay_confirm;
  pay_info = other19.pay_info;
  pay_timestamp = other19.pay_timestamp;
  close_timestamp = other19.close_timestamp;
  close_by = other19.close_by;
  __isset = other19.__isset;
  return *this;
}
void stuff_plan::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "stuff_plan(";
  out << "type_id=" << to_string(type_id);
  out << ", " << "count=" << to_string(count);
  out << ", " << "vichele_info=" << to_string(vichele_info);
  out << ", " << "plan_id=" << to_string(plan_id);
  out << ", " << "created_by=" << to_string(created_by);
  out << ", " << "plan_time=" << to_string(plan_time);
  out << ", " << "created_time=" << to_string(created_time);
  out << ", " << "name=" << to_string(name);
  out << ", " << "price=" << to_string(price);
  out << ", " << "status=" << to_string(status);
  out << ", " << "comment=" << to_string(comment);
  out << ", " << "plan_confirm=" << to_string(plan_confirm);
  out << ", " << "pay_confirm=" << to_string(pay_confirm);
  out << ", " << "pay_info=" << to_string(pay_info);
  out << ", " << "pay_timestamp=" << to_string(pay_timestamp);
  out << ", " << "close_timestamp=" << to_string(close_timestamp);
  out << ", " << "close_by=" << to_string(close_by);
  out << ")";
}


plan_status::~plan_status() noexcept {
}


void plan_status::__set_plan_id(const int64_t val) {
  this->plan_id = val;
}

void plan_status::__set_status(const int64_t val) {
  this->status = val;
}
std::ostream& operator<<(std::ostream& out, const plan_status& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t plan_status::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->plan_id);
          this->__isset.plan_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->status);
          this->__isset.status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t plan_status::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("plan_status");

  xfer += oprot->writeFieldBegin("plan_id", ::apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->plan_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("status", ::apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(plan_status &a, plan_status &b) {
  using ::std::swap;
  swap(a.plan_id, b.plan_id);
  swap(a.status, b.status);
  swap(a.__isset, b.__isset);
}

plan_status::plan_status(const plan_status& other20) {
  plan_id = other20.plan_id;
  status = other20.status;
  __isset = other20.__isset;
}
plan_status& plan_status::operator=(const plan_status& other21) {
  plan_id = other21.plan_id;
  status = other21.status;
  __isset = other21.__isset;
  return *this;
}
void plan_status::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "plan_status(";
  out << "plan_id=" << to_string(plan_id);
  out << ", " << "status=" << to_string(status);
  out << ")";
}


