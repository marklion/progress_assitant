/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef user_management_H
#define user_management_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "idl_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class user_managementIf {
 public:
  virtual ~user_managementIf() {}
  virtual void get_user_info(user_info& _return, const std::string& ssid) = 0;
  virtual void user_login(std::string& _return, const std::string& code) = 0;
  virtual bool update_user_info(const user_info& info, const std::string& ssid) = 0;
  virtual void logff_user(const std::string& ssid) = 0;
  virtual void get_bound_vichele(std::vector<std::string> & _return, const std::string& ssid) = 0;
  virtual bool bind_new_vichele(const std::string& ssid, const std::string& vichele) = 0;
  virtual void remove_vichele(const std::string& ssid, const std::string& vichele) = 0;
  virtual bool update_logo(const std::string& content, const std::string& ssid) = 0;
  virtual void get_customer_info(std::string& _return, const int64_t user_id) = 0;
  virtual bool is_admin(const std::string& ssid) = 0;
};

class user_managementIfFactory {
 public:
  typedef user_managementIf Handler;

  virtual ~user_managementIfFactory() {}

  virtual user_managementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(user_managementIf* /* handler */) = 0;
};

class user_managementIfSingletonFactory : virtual public user_managementIfFactory {
 public:
  user_managementIfSingletonFactory(const ::std::shared_ptr<user_managementIf>& iface) : iface_(iface) {}
  virtual ~user_managementIfSingletonFactory() {}

  virtual user_managementIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(user_managementIf* /* handler */) {}

 protected:
  ::std::shared_ptr<user_managementIf> iface_;
};

class user_managementNull : virtual public user_managementIf {
 public:
  virtual ~user_managementNull() {}
  void get_user_info(user_info& /* _return */, const std::string& /* ssid */) {
    return;
  }
  void user_login(std::string& /* _return */, const std::string& /* code */) {
    return;
  }
  bool update_user_info(const user_info& /* info */, const std::string& /* ssid */) {
    bool _return = false;
    return _return;
  }
  void logff_user(const std::string& /* ssid */) {
    return;
  }
  void get_bound_vichele(std::vector<std::string> & /* _return */, const std::string& /* ssid */) {
    return;
  }
  bool bind_new_vichele(const std::string& /* ssid */, const std::string& /* vichele */) {
    bool _return = false;
    return _return;
  }
  void remove_vichele(const std::string& /* ssid */, const std::string& /* vichele */) {
    return;
  }
  bool update_logo(const std::string& /* content */, const std::string& /* ssid */) {
    bool _return = false;
    return _return;
  }
  void get_customer_info(std::string& /* _return */, const int64_t /* user_id */) {
    return;
  }
  bool is_admin(const std::string& /* ssid */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _user_management_get_user_info_args__isset {
  _user_management_get_user_info_args__isset() : ssid(false) {}
  bool ssid :1;
} _user_management_get_user_info_args__isset;

class user_management_get_user_info_args {
 public:

  user_management_get_user_info_args(const user_management_get_user_info_args&);
  user_management_get_user_info_args& operator=(const user_management_get_user_info_args&);
  user_management_get_user_info_args() : ssid() {
  }

  virtual ~user_management_get_user_info_args() noexcept;
  std::string ssid;

  _user_management_get_user_info_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const user_management_get_user_info_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const user_management_get_user_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_get_user_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_get_user_info_pargs {
 public:


  virtual ~user_management_get_user_info_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_get_user_info_result__isset {
  _user_management_get_user_info_result__isset() : success(false) {}
  bool success :1;
} _user_management_get_user_info_result__isset;

class user_management_get_user_info_result {
 public:

  user_management_get_user_info_result(const user_management_get_user_info_result&);
  user_management_get_user_info_result& operator=(const user_management_get_user_info_result&);
  user_management_get_user_info_result() {
  }

  virtual ~user_management_get_user_info_result() noexcept;
  user_info success;

  _user_management_get_user_info_result__isset __isset;

  void __set_success(const user_info& val);

  bool operator == (const user_management_get_user_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const user_management_get_user_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_get_user_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_get_user_info_presult__isset {
  _user_management_get_user_info_presult__isset() : success(false) {}
  bool success :1;
} _user_management_get_user_info_presult__isset;

class user_management_get_user_info_presult {
 public:


  virtual ~user_management_get_user_info_presult() noexcept;
  user_info* success;

  _user_management_get_user_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _user_management_user_login_args__isset {
  _user_management_user_login_args__isset() : code(false) {}
  bool code :1;
} _user_management_user_login_args__isset;

class user_management_user_login_args {
 public:

  user_management_user_login_args(const user_management_user_login_args&);
  user_management_user_login_args& operator=(const user_management_user_login_args&);
  user_management_user_login_args() : code() {
  }

  virtual ~user_management_user_login_args() noexcept;
  std::string code;

  _user_management_user_login_args__isset __isset;

  void __set_code(const std::string& val);

  bool operator == (const user_management_user_login_args & rhs) const
  {
    if (!(code == rhs.code))
      return false;
    return true;
  }
  bool operator != (const user_management_user_login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_user_login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_user_login_pargs {
 public:


  virtual ~user_management_user_login_pargs() noexcept;
  const std::string* code;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_user_login_result__isset {
  _user_management_user_login_result__isset() : success(false) {}
  bool success :1;
} _user_management_user_login_result__isset;

class user_management_user_login_result {
 public:

  user_management_user_login_result(const user_management_user_login_result&);
  user_management_user_login_result& operator=(const user_management_user_login_result&);
  user_management_user_login_result() : success() {
  }

  virtual ~user_management_user_login_result() noexcept;
  std::string success;

  _user_management_user_login_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const user_management_user_login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const user_management_user_login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_user_login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_user_login_presult__isset {
  _user_management_user_login_presult__isset() : success(false) {}
  bool success :1;
} _user_management_user_login_presult__isset;

class user_management_user_login_presult {
 public:


  virtual ~user_management_user_login_presult() noexcept;
  std::string* success;

  _user_management_user_login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _user_management_update_user_info_args__isset {
  _user_management_update_user_info_args__isset() : info(false), ssid(false) {}
  bool info :1;
  bool ssid :1;
} _user_management_update_user_info_args__isset;

class user_management_update_user_info_args {
 public:

  user_management_update_user_info_args(const user_management_update_user_info_args&);
  user_management_update_user_info_args& operator=(const user_management_update_user_info_args&);
  user_management_update_user_info_args() : ssid() {
  }

  virtual ~user_management_update_user_info_args() noexcept;
  user_info info;
  std::string ssid;

  _user_management_update_user_info_args__isset __isset;

  void __set_info(const user_info& val);

  void __set_ssid(const std::string& val);

  bool operator == (const user_management_update_user_info_args & rhs) const
  {
    if (!(info == rhs.info))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const user_management_update_user_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_update_user_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_update_user_info_pargs {
 public:


  virtual ~user_management_update_user_info_pargs() noexcept;
  const user_info* info;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_update_user_info_result__isset {
  _user_management_update_user_info_result__isset() : success(false) {}
  bool success :1;
} _user_management_update_user_info_result__isset;

class user_management_update_user_info_result {
 public:

  user_management_update_user_info_result(const user_management_update_user_info_result&);
  user_management_update_user_info_result& operator=(const user_management_update_user_info_result&);
  user_management_update_user_info_result() : success(0) {
  }

  virtual ~user_management_update_user_info_result() noexcept;
  bool success;

  _user_management_update_user_info_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const user_management_update_user_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const user_management_update_user_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_update_user_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_update_user_info_presult__isset {
  _user_management_update_user_info_presult__isset() : success(false) {}
  bool success :1;
} _user_management_update_user_info_presult__isset;

class user_management_update_user_info_presult {
 public:


  virtual ~user_management_update_user_info_presult() noexcept;
  bool* success;

  _user_management_update_user_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _user_management_logff_user_args__isset {
  _user_management_logff_user_args__isset() : ssid(false) {}
  bool ssid :1;
} _user_management_logff_user_args__isset;

class user_management_logff_user_args {
 public:

  user_management_logff_user_args(const user_management_logff_user_args&);
  user_management_logff_user_args& operator=(const user_management_logff_user_args&);
  user_management_logff_user_args() : ssid() {
  }

  virtual ~user_management_logff_user_args() noexcept;
  std::string ssid;

  _user_management_logff_user_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const user_management_logff_user_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const user_management_logff_user_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_logff_user_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_logff_user_pargs {
 public:


  virtual ~user_management_logff_user_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_logff_user_result {
 public:

  user_management_logff_user_result(const user_management_logff_user_result&);
  user_management_logff_user_result& operator=(const user_management_logff_user_result&);
  user_management_logff_user_result() {
  }

  virtual ~user_management_logff_user_result() noexcept;

  bool operator == (const user_management_logff_user_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const user_management_logff_user_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_logff_user_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_logff_user_presult {
 public:


  virtual ~user_management_logff_user_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _user_management_get_bound_vichele_args__isset {
  _user_management_get_bound_vichele_args__isset() : ssid(false) {}
  bool ssid :1;
} _user_management_get_bound_vichele_args__isset;

class user_management_get_bound_vichele_args {
 public:

  user_management_get_bound_vichele_args(const user_management_get_bound_vichele_args&);
  user_management_get_bound_vichele_args& operator=(const user_management_get_bound_vichele_args&);
  user_management_get_bound_vichele_args() : ssid() {
  }

  virtual ~user_management_get_bound_vichele_args() noexcept;
  std::string ssid;

  _user_management_get_bound_vichele_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const user_management_get_bound_vichele_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const user_management_get_bound_vichele_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_get_bound_vichele_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_get_bound_vichele_pargs {
 public:


  virtual ~user_management_get_bound_vichele_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_get_bound_vichele_result__isset {
  _user_management_get_bound_vichele_result__isset() : success(false) {}
  bool success :1;
} _user_management_get_bound_vichele_result__isset;

class user_management_get_bound_vichele_result {
 public:

  user_management_get_bound_vichele_result(const user_management_get_bound_vichele_result&);
  user_management_get_bound_vichele_result& operator=(const user_management_get_bound_vichele_result&);
  user_management_get_bound_vichele_result() {
  }

  virtual ~user_management_get_bound_vichele_result() noexcept;
  std::vector<std::string>  success;

  _user_management_get_bound_vichele_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const user_management_get_bound_vichele_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const user_management_get_bound_vichele_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_get_bound_vichele_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_get_bound_vichele_presult__isset {
  _user_management_get_bound_vichele_presult__isset() : success(false) {}
  bool success :1;
} _user_management_get_bound_vichele_presult__isset;

class user_management_get_bound_vichele_presult {
 public:


  virtual ~user_management_get_bound_vichele_presult() noexcept;
  std::vector<std::string> * success;

  _user_management_get_bound_vichele_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _user_management_bind_new_vichele_args__isset {
  _user_management_bind_new_vichele_args__isset() : ssid(false), vichele(false) {}
  bool ssid :1;
  bool vichele :1;
} _user_management_bind_new_vichele_args__isset;

class user_management_bind_new_vichele_args {
 public:

  user_management_bind_new_vichele_args(const user_management_bind_new_vichele_args&);
  user_management_bind_new_vichele_args& operator=(const user_management_bind_new_vichele_args&);
  user_management_bind_new_vichele_args() : ssid(), vichele() {
  }

  virtual ~user_management_bind_new_vichele_args() noexcept;
  std::string ssid;
  std::string vichele;

  _user_management_bind_new_vichele_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_vichele(const std::string& val);

  bool operator == (const user_management_bind_new_vichele_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(vichele == rhs.vichele))
      return false;
    return true;
  }
  bool operator != (const user_management_bind_new_vichele_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_bind_new_vichele_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_bind_new_vichele_pargs {
 public:


  virtual ~user_management_bind_new_vichele_pargs() noexcept;
  const std::string* ssid;
  const std::string* vichele;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_bind_new_vichele_result__isset {
  _user_management_bind_new_vichele_result__isset() : success(false) {}
  bool success :1;
} _user_management_bind_new_vichele_result__isset;

class user_management_bind_new_vichele_result {
 public:

  user_management_bind_new_vichele_result(const user_management_bind_new_vichele_result&);
  user_management_bind_new_vichele_result& operator=(const user_management_bind_new_vichele_result&);
  user_management_bind_new_vichele_result() : success(0) {
  }

  virtual ~user_management_bind_new_vichele_result() noexcept;
  bool success;

  _user_management_bind_new_vichele_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const user_management_bind_new_vichele_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const user_management_bind_new_vichele_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_bind_new_vichele_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_bind_new_vichele_presult__isset {
  _user_management_bind_new_vichele_presult__isset() : success(false) {}
  bool success :1;
} _user_management_bind_new_vichele_presult__isset;

class user_management_bind_new_vichele_presult {
 public:


  virtual ~user_management_bind_new_vichele_presult() noexcept;
  bool* success;

  _user_management_bind_new_vichele_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _user_management_remove_vichele_args__isset {
  _user_management_remove_vichele_args__isset() : ssid(false), vichele(false) {}
  bool ssid :1;
  bool vichele :1;
} _user_management_remove_vichele_args__isset;

class user_management_remove_vichele_args {
 public:

  user_management_remove_vichele_args(const user_management_remove_vichele_args&);
  user_management_remove_vichele_args& operator=(const user_management_remove_vichele_args&);
  user_management_remove_vichele_args() : ssid(), vichele() {
  }

  virtual ~user_management_remove_vichele_args() noexcept;
  std::string ssid;
  std::string vichele;

  _user_management_remove_vichele_args__isset __isset;

  void __set_ssid(const std::string& val);

  void __set_vichele(const std::string& val);

  bool operator == (const user_management_remove_vichele_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    if (!(vichele == rhs.vichele))
      return false;
    return true;
  }
  bool operator != (const user_management_remove_vichele_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_remove_vichele_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_remove_vichele_pargs {
 public:


  virtual ~user_management_remove_vichele_pargs() noexcept;
  const std::string* ssid;
  const std::string* vichele;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_remove_vichele_result {
 public:

  user_management_remove_vichele_result(const user_management_remove_vichele_result&);
  user_management_remove_vichele_result& operator=(const user_management_remove_vichele_result&);
  user_management_remove_vichele_result() {
  }

  virtual ~user_management_remove_vichele_result() noexcept;

  bool operator == (const user_management_remove_vichele_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const user_management_remove_vichele_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_remove_vichele_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_remove_vichele_presult {
 public:


  virtual ~user_management_remove_vichele_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _user_management_update_logo_args__isset {
  _user_management_update_logo_args__isset() : content(false), ssid(false) {}
  bool content :1;
  bool ssid :1;
} _user_management_update_logo_args__isset;

class user_management_update_logo_args {
 public:

  user_management_update_logo_args(const user_management_update_logo_args&);
  user_management_update_logo_args& operator=(const user_management_update_logo_args&);
  user_management_update_logo_args() : content(), ssid() {
  }

  virtual ~user_management_update_logo_args() noexcept;
  std::string content;
  std::string ssid;

  _user_management_update_logo_args__isset __isset;

  void __set_content(const std::string& val);

  void __set_ssid(const std::string& val);

  bool operator == (const user_management_update_logo_args & rhs) const
  {
    if (!(content == rhs.content))
      return false;
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const user_management_update_logo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_update_logo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_update_logo_pargs {
 public:


  virtual ~user_management_update_logo_pargs() noexcept;
  const std::string* content;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_update_logo_result__isset {
  _user_management_update_logo_result__isset() : success(false) {}
  bool success :1;
} _user_management_update_logo_result__isset;

class user_management_update_logo_result {
 public:

  user_management_update_logo_result(const user_management_update_logo_result&);
  user_management_update_logo_result& operator=(const user_management_update_logo_result&);
  user_management_update_logo_result() : success(0) {
  }

  virtual ~user_management_update_logo_result() noexcept;
  bool success;

  _user_management_update_logo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const user_management_update_logo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const user_management_update_logo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_update_logo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_update_logo_presult__isset {
  _user_management_update_logo_presult__isset() : success(false) {}
  bool success :1;
} _user_management_update_logo_presult__isset;

class user_management_update_logo_presult {
 public:


  virtual ~user_management_update_logo_presult() noexcept;
  bool* success;

  _user_management_update_logo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _user_management_get_customer_info_args__isset {
  _user_management_get_customer_info_args__isset() : user_id(false) {}
  bool user_id :1;
} _user_management_get_customer_info_args__isset;

class user_management_get_customer_info_args {
 public:

  user_management_get_customer_info_args(const user_management_get_customer_info_args&);
  user_management_get_customer_info_args& operator=(const user_management_get_customer_info_args&);
  user_management_get_customer_info_args() : user_id(0) {
  }

  virtual ~user_management_get_customer_info_args() noexcept;
  int64_t user_id;

  _user_management_get_customer_info_args__isset __isset;

  void __set_user_id(const int64_t val);

  bool operator == (const user_management_get_customer_info_args & rhs) const
  {
    if (!(user_id == rhs.user_id))
      return false;
    return true;
  }
  bool operator != (const user_management_get_customer_info_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_get_customer_info_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_get_customer_info_pargs {
 public:


  virtual ~user_management_get_customer_info_pargs() noexcept;
  const int64_t* user_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_get_customer_info_result__isset {
  _user_management_get_customer_info_result__isset() : success(false) {}
  bool success :1;
} _user_management_get_customer_info_result__isset;

class user_management_get_customer_info_result {
 public:

  user_management_get_customer_info_result(const user_management_get_customer_info_result&);
  user_management_get_customer_info_result& operator=(const user_management_get_customer_info_result&);
  user_management_get_customer_info_result() : success() {
  }

  virtual ~user_management_get_customer_info_result() noexcept;
  std::string success;

  _user_management_get_customer_info_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const user_management_get_customer_info_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const user_management_get_customer_info_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_get_customer_info_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_get_customer_info_presult__isset {
  _user_management_get_customer_info_presult__isset() : success(false) {}
  bool success :1;
} _user_management_get_customer_info_presult__isset;

class user_management_get_customer_info_presult {
 public:


  virtual ~user_management_get_customer_info_presult() noexcept;
  std::string* success;

  _user_management_get_customer_info_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _user_management_is_admin_args__isset {
  _user_management_is_admin_args__isset() : ssid(false) {}
  bool ssid :1;
} _user_management_is_admin_args__isset;

class user_management_is_admin_args {
 public:

  user_management_is_admin_args(const user_management_is_admin_args&);
  user_management_is_admin_args& operator=(const user_management_is_admin_args&);
  user_management_is_admin_args() : ssid() {
  }

  virtual ~user_management_is_admin_args() noexcept;
  std::string ssid;

  _user_management_is_admin_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const user_management_is_admin_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const user_management_is_admin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_is_admin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class user_management_is_admin_pargs {
 public:


  virtual ~user_management_is_admin_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_is_admin_result__isset {
  _user_management_is_admin_result__isset() : success(false) {}
  bool success :1;
} _user_management_is_admin_result__isset;

class user_management_is_admin_result {
 public:

  user_management_is_admin_result(const user_management_is_admin_result&);
  user_management_is_admin_result& operator=(const user_management_is_admin_result&);
  user_management_is_admin_result() : success(0) {
  }

  virtual ~user_management_is_admin_result() noexcept;
  bool success;

  _user_management_is_admin_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const user_management_is_admin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const user_management_is_admin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const user_management_is_admin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _user_management_is_admin_presult__isset {
  _user_management_is_admin_presult__isset() : success(false) {}
  bool success :1;
} _user_management_is_admin_presult__isset;

class user_management_is_admin_presult {
 public:


  virtual ~user_management_is_admin_presult() noexcept;
  bool* success;

  _user_management_is_admin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class user_managementClient : virtual public user_managementIf {
 public:
  user_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  user_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_user_info(user_info& _return, const std::string& ssid);
  void send_get_user_info(const std::string& ssid);
  void recv_get_user_info(user_info& _return);
  void user_login(std::string& _return, const std::string& code);
  void send_user_login(const std::string& code);
  void recv_user_login(std::string& _return);
  bool update_user_info(const user_info& info, const std::string& ssid);
  void send_update_user_info(const user_info& info, const std::string& ssid);
  bool recv_update_user_info();
  void logff_user(const std::string& ssid);
  void send_logff_user(const std::string& ssid);
  void recv_logff_user();
  void get_bound_vichele(std::vector<std::string> & _return, const std::string& ssid);
  void send_get_bound_vichele(const std::string& ssid);
  void recv_get_bound_vichele(std::vector<std::string> & _return);
  bool bind_new_vichele(const std::string& ssid, const std::string& vichele);
  void send_bind_new_vichele(const std::string& ssid, const std::string& vichele);
  bool recv_bind_new_vichele();
  void remove_vichele(const std::string& ssid, const std::string& vichele);
  void send_remove_vichele(const std::string& ssid, const std::string& vichele);
  void recv_remove_vichele();
  bool update_logo(const std::string& content, const std::string& ssid);
  void send_update_logo(const std::string& content, const std::string& ssid);
  bool recv_update_logo();
  void get_customer_info(std::string& _return, const int64_t user_id);
  void send_get_customer_info(const int64_t user_id);
  void recv_get_customer_info(std::string& _return);
  bool is_admin(const std::string& ssid);
  void send_is_admin(const std::string& ssid);
  bool recv_is_admin();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class user_managementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<user_managementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (user_managementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_user_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_user_login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_user_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_logff_user(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_bound_vichele(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_bind_new_vichele(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove_vichele(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_update_logo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_customer_info(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_is_admin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  user_managementProcessor(::std::shared_ptr<user_managementIf> iface) :
    iface_(iface) {
    processMap_["get_user_info"] = &user_managementProcessor::process_get_user_info;
    processMap_["user_login"] = &user_managementProcessor::process_user_login;
    processMap_["update_user_info"] = &user_managementProcessor::process_update_user_info;
    processMap_["logff_user"] = &user_managementProcessor::process_logff_user;
    processMap_["get_bound_vichele"] = &user_managementProcessor::process_get_bound_vichele;
    processMap_["bind_new_vichele"] = &user_managementProcessor::process_bind_new_vichele;
    processMap_["remove_vichele"] = &user_managementProcessor::process_remove_vichele;
    processMap_["update_logo"] = &user_managementProcessor::process_update_logo;
    processMap_["get_customer_info"] = &user_managementProcessor::process_get_customer_info;
    processMap_["is_admin"] = &user_managementProcessor::process_is_admin;
  }

  virtual ~user_managementProcessor() {}
};

class user_managementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  user_managementProcessorFactory(const ::std::shared_ptr< user_managementIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< user_managementIfFactory > handlerFactory_;
};

class user_managementMultiface : virtual public user_managementIf {
 public:
  user_managementMultiface(std::vector<std::shared_ptr<user_managementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~user_managementMultiface() {}
 protected:
  std::vector<std::shared_ptr<user_managementIf> > ifaces_;
  user_managementMultiface() {}
  void add(::std::shared_ptr<user_managementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_user_info(user_info& _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_user_info(_return, ssid);
    }
    ifaces_[i]->get_user_info(_return, ssid);
    return;
  }

  void user_login(std::string& _return, const std::string& code) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->user_login(_return, code);
    }
    ifaces_[i]->user_login(_return, code);
    return;
  }

  bool update_user_info(const user_info& info, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_user_info(info, ssid);
    }
    return ifaces_[i]->update_user_info(info, ssid);
  }

  void logff_user(const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->logff_user(ssid);
    }
    ifaces_[i]->logff_user(ssid);
  }

  void get_bound_vichele(std::vector<std::string> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_bound_vichele(_return, ssid);
    }
    ifaces_[i]->get_bound_vichele(_return, ssid);
    return;
  }

  bool bind_new_vichele(const std::string& ssid, const std::string& vichele) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->bind_new_vichele(ssid, vichele);
    }
    return ifaces_[i]->bind_new_vichele(ssid, vichele);
  }

  void remove_vichele(const std::string& ssid, const std::string& vichele) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove_vichele(ssid, vichele);
    }
    ifaces_[i]->remove_vichele(ssid, vichele);
  }

  bool update_logo(const std::string& content, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->update_logo(content, ssid);
    }
    return ifaces_[i]->update_logo(content, ssid);
  }

  void get_customer_info(std::string& _return, const int64_t user_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_customer_info(_return, user_id);
    }
    ifaces_[i]->get_customer_info(_return, user_id);
    return;
  }

  bool is_admin(const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->is_admin(ssid);
    }
    return ifaces_[i]->is_admin(ssid);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class user_managementConcurrentClient : virtual public user_managementIf {
 public:
  user_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  user_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_user_info(user_info& _return, const std::string& ssid);
  int32_t send_get_user_info(const std::string& ssid);
  void recv_get_user_info(user_info& _return, const int32_t seqid);
  void user_login(std::string& _return, const std::string& code);
  int32_t send_user_login(const std::string& code);
  void recv_user_login(std::string& _return, const int32_t seqid);
  bool update_user_info(const user_info& info, const std::string& ssid);
  int32_t send_update_user_info(const user_info& info, const std::string& ssid);
  bool recv_update_user_info(const int32_t seqid);
  void logff_user(const std::string& ssid);
  int32_t send_logff_user(const std::string& ssid);
  void recv_logff_user(const int32_t seqid);
  void get_bound_vichele(std::vector<std::string> & _return, const std::string& ssid);
  int32_t send_get_bound_vichele(const std::string& ssid);
  void recv_get_bound_vichele(std::vector<std::string> & _return, const int32_t seqid);
  bool bind_new_vichele(const std::string& ssid, const std::string& vichele);
  int32_t send_bind_new_vichele(const std::string& ssid, const std::string& vichele);
  bool recv_bind_new_vichele(const int32_t seqid);
  void remove_vichele(const std::string& ssid, const std::string& vichele);
  int32_t send_remove_vichele(const std::string& ssid, const std::string& vichele);
  void recv_remove_vichele(const int32_t seqid);
  bool update_logo(const std::string& content, const std::string& ssid);
  int32_t send_update_logo(const std::string& content, const std::string& ssid);
  bool recv_update_logo(const int32_t seqid);
  void get_customer_info(std::string& _return, const int64_t user_id);
  int32_t send_get_customer_info(const int64_t user_id);
  void recv_get_customer_info(std::string& _return, const int32_t seqid);
  bool is_admin(const std::string& ssid);
  int32_t send_is_admin(const std::string& ssid);
  bool recv_is_admin(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
