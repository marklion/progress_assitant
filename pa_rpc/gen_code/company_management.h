/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef company_management_H
#define company_management_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "idl_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class company_managementIf {
 public:
  virtual ~company_managementIf() {}
  virtual void get_all_type(std::vector<int64_t> & _return, const std::string& ssid) = 0;
};

class company_managementIfFactory {
 public:
  typedef company_managementIf Handler;

  virtual ~company_managementIfFactory() {}

  virtual company_managementIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(company_managementIf* /* handler */) = 0;
};

class company_managementIfSingletonFactory : virtual public company_managementIfFactory {
 public:
  company_managementIfSingletonFactory(const ::std::shared_ptr<company_managementIf>& iface) : iface_(iface) {}
  virtual ~company_managementIfSingletonFactory() {}

  virtual company_managementIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(company_managementIf* /* handler */) {}

 protected:
  ::std::shared_ptr<company_managementIf> iface_;
};

class company_managementNull : virtual public company_managementIf {
 public:
  virtual ~company_managementNull() {}
  void get_all_type(std::vector<int64_t> & /* _return */, const std::string& /* ssid */) {
    return;
  }
};

typedef struct _company_management_get_all_type_args__isset {
  _company_management_get_all_type_args__isset() : ssid(false) {}
  bool ssid :1;
} _company_management_get_all_type_args__isset;

class company_management_get_all_type_args {
 public:

  company_management_get_all_type_args(const company_management_get_all_type_args&);
  company_management_get_all_type_args& operator=(const company_management_get_all_type_args&);
  company_management_get_all_type_args() : ssid() {
  }

  virtual ~company_management_get_all_type_args() noexcept;
  std::string ssid;

  _company_management_get_all_type_args__isset __isset;

  void __set_ssid(const std::string& val);

  bool operator == (const company_management_get_all_type_args & rhs) const
  {
    if (!(ssid == rhs.ssid))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_type_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_type_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class company_management_get_all_type_pargs {
 public:


  virtual ~company_management_get_all_type_pargs() noexcept;
  const std::string* ssid;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_type_result__isset {
  _company_management_get_all_type_result__isset() : success(false) {}
  bool success :1;
} _company_management_get_all_type_result__isset;

class company_management_get_all_type_result {
 public:

  company_management_get_all_type_result(const company_management_get_all_type_result&);
  company_management_get_all_type_result& operator=(const company_management_get_all_type_result&);
  company_management_get_all_type_result() {
  }

  virtual ~company_management_get_all_type_result() noexcept;
  std::vector<int64_t>  success;

  _company_management_get_all_type_result__isset __isset;

  void __set_success(const std::vector<int64_t> & val);

  bool operator == (const company_management_get_all_type_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const company_management_get_all_type_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const company_management_get_all_type_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _company_management_get_all_type_presult__isset {
  _company_management_get_all_type_presult__isset() : success(false) {}
  bool success :1;
} _company_management_get_all_type_presult__isset;

class company_management_get_all_type_presult {
 public:


  virtual ~company_management_get_all_type_presult() noexcept;
  std::vector<int64_t> * success;

  _company_management_get_all_type_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class company_managementClient : virtual public company_managementIf {
 public:
  company_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  company_managementClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_all_type(std::vector<int64_t> & _return, const std::string& ssid);
  void send_get_all_type(const std::string& ssid);
  void recv_get_all_type(std::vector<int64_t> & _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class company_managementProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<company_managementIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (company_managementProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_get_all_type(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  company_managementProcessor(::std::shared_ptr<company_managementIf> iface) :
    iface_(iface) {
    processMap_["get_all_type"] = &company_managementProcessor::process_get_all_type;
  }

  virtual ~company_managementProcessor() {}
};

class company_managementProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  company_managementProcessorFactory(const ::std::shared_ptr< company_managementIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< company_managementIfFactory > handlerFactory_;
};

class company_managementMultiface : virtual public company_managementIf {
 public:
  company_managementMultiface(std::vector<std::shared_ptr<company_managementIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~company_managementMultiface() {}
 protected:
  std::vector<std::shared_ptr<company_managementIf> > ifaces_;
  company_managementMultiface() {}
  void add(::std::shared_ptr<company_managementIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void get_all_type(std::vector<int64_t> & _return, const std::string& ssid) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_all_type(_return, ssid);
    }
    ifaces_[i]->get_all_type(_return, ssid);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class company_managementConcurrentClient : virtual public company_managementIf {
 public:
  company_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  company_managementConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void get_all_type(std::vector<int64_t> & _return, const std::string& ssid);
  int32_t send_get_all_type(const std::string& ssid);
  void recv_get_all_type(std::vector<int64_t> & _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
